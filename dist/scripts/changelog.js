"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const semver = require("semver");
const packages_1 = require("../lib/packages");
const changelogTemplate = require('./templates/changelog').default;
const conventionalCommitsParser = require('conventional-commits-parser');
const gitRawCommits = require('git-raw-commits');
const ghGot = require('gh-got');
const through = require('through2');
function default_1(args, logger) {
    const commits = [];
    let toSha = null;
    const githubToken = (args.githubToken
        || (args.githubTokenFile && fs.readFileSync(args.githubTokenFile, 'utf-8'))
        || '').trim();
    return new Promise((resolve) => {
        gitRawCommits({
            from: args.from,
            to: args.to || 'HEAD',
            format: '%B%n-hash-%n%H%n-gitTags-%n%D%n-committerDate-%n%ci%n-authorName-%n%aN%n',
        })
            .on('error', err => {
            logger.fatal('An error happened: ' + err.message);
            process.exit(1);
        })
            .pipe(through((chunk, enc, callback) => {
            // Replace github URLs with `@XYZ#123`
            const commit = chunk.toString('utf-8')
                .replace(/https?:\/\/github.com\/(.*?)\/issues\/(\d+)/g, '@$1#$2');
            callback(undefined, new Buffer(commit));
        }))
            .pipe(conventionalCommitsParser({
            headerPattern: /^(\w*)(?:\(([^)]*)\))?: (.*)$/,
            headerCorrespondence: ['type', 'scope', 'subject'],
            noteKeywords: ['BREAKING CHANGE'],
            revertPattern: /^revert:\s([\s\S]*?)\s*This reverts commit (\w*)\./,
            revertCorrespondence: [`header`, `hash`],
        }))
            .pipe(through.obj((chunk, _, cb) => {
            try {
                const maybeTag = chunk.gitTags && chunk.gitTags.match(/tag: (.*)/);
                const tags = maybeTag && maybeTag[1].split(/,/g);
                chunk['tags'] = tags;
                if (tags && tags.find(x => x == args.to)) {
                    toSha = chunk.hash;
                }
                commits.push(chunk);
                cb();
            }
            catch (err) {
                cb(err);
            }
        }))
            .on('finish', resolve);
    })
        .then(() => {
        const markdown = changelogTemplate(Object.assign({}, args, { include: (x, v) => require('./' + path.join('templates', x)).default(v), commits,
            packages: packages_1.packages }));
        if (args.stdout || !githubToken) {
            console.log(markdown);
            process.exit(0);
        }
        // Check if we need to edit or create a new one.
        return ghGot('repos/angular/angular-cli/releases').then((x) => [x, markdown]);
    })
        .then(([body, markdown]) => {
        const json = body.body;
        const maybeRelease = json.find((x) => x.tag_name == args.to);
        const id = maybeRelease ? `/${maybeRelease.id}` : '';
        const semversion = (args.to && semver.parse(args.to)) || { prerelease: '' };
        return ghGot('repos/angular/angular-cli/releases' + id, {
            body: Object.assign({ body: markdown, draft: !maybeRelease, name: args.to, prerelease: semversion.prerelease.length > 0, tag_name: args.to }, (toSha ? { target_commitish: toSha } : {})),
            token: githubToken,
        });
    });
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,