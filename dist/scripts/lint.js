"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const tslint_1 = require("tslint");
const ts = require("typescript");
function _buildRules(logger) {
    const tsConfigPath = path.join(__dirname, '../rules/tsconfig.json');
    const configFile = ts.readConfigFile(tsConfigPath, ts.sys.readFile);
    const parsedTsConfig = ts.parseJsonConfigFileContent(configFile.config, ts.sys, path.dirname(tsConfigPath));
    const lintRulesProgram = ts.createProgram(parsedTsConfig.fileNames, parsedTsConfig.options);
    const result = lintRulesProgram.emit();
    if (result.emitSkipped) {
        const host = {
            getCurrentDirectory: () => ts.sys.getCurrentDirectory(),
            getNewLine: () => ts.sys.newLine,
            getCanonicalFileName: (fileName) => fileName,
        };
        logger.fatal(ts.formatDiagnostics(result.diagnostics, host));
        process.exit(100);
    }
}
function default_1(options, logger) {
    _buildRules(logger);
    const lintOptions = {
        fix: options.fix,
    };
    const program = tslint_1.Linter.createProgram(path.join(__dirname, '../tsconfig.json'));
    const linter = new tslint_1.Linter(lintOptions, program);
    const tsLintPath = path.join(__dirname, '../tslint.json');
    const tsLintConfig = tslint_1.Configuration.loadConfigurationFromPath(tsLintPath);
    program.getRootFileNames().forEach(fileName => {
        linter.lint(fileName, ts.sys.readFile(fileName) || '', tsLintConfig);
    });
    const result = linter.getResult();
    const Formatter = tslint_1.findFormatter('codeFrame');
    if (!Formatter) {
        throw new Error('Cannot find lint formatter.');
    }
    const formatter = new Formatter();
    if (result.errorCount > 0) {
        logger.error(formatter.format(result.failures));
        logger.info(`Errors:   ${result.errorCount}`);
        if (result.warningCount > 0) {
            logger.info(`Warnings: ${result.warningCount}`);
        }
        process.exit(2);
    }
    else if (result.warningCount > 0) {
        logger.warn(formatter.format(result.failures));
        logger.info(`Warnings: ${result.warningCount}`);
        process.exit(1);
    }
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGludC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZXJuaWVkYXZpcy9Db2RlL2FuZ3VsYXItY2xpLyIsInNvdXJjZXMiOlsic2NyaXB0cy9saW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBVUEsNkJBQTZCO0FBQzdCLG1DQUE4RTtBQUM5RSxpQ0FBaUM7QUFHakMscUJBQXFCLE1BQXNCO0lBQ3pDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLHdCQUF3QixDQUFDLENBQUM7SUFDcEUsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVwRSxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsMEJBQTBCLENBQ2xELFVBQVUsQ0FBQyxNQUFNLEVBQ2pCLEVBQUUsQ0FBQyxHQUFHLEVBQ04sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FDM0IsQ0FBQztJQUNGLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM1RixNQUFNLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUV2QyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUU7UUFDdEIsTUFBTSxJQUFJLEdBQTZCO1lBQ3JDLG1CQUFtQixFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUU7WUFDdkQsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTztZQUNoQyxvQkFBb0IsRUFBRSxDQUFDLFFBQWdCLEVBQUUsRUFBRSxDQUFDLFFBQVE7U0FDckQsQ0FBQztRQUNGLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM3RCxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ25CO0FBQ0gsQ0FBQztBQUdELG1CQUF5QixPQUFtQixFQUFFLE1BQXNCO0lBQ2xFLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVwQixNQUFNLFdBQVcsR0FBbUI7UUFDbEMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHO0tBQ2pCLENBQUM7SUFFRixNQUFNLE9BQU8sR0FBRyxlQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGtCQUFrQixDQUFDLENBQUMsQ0FBQztJQUMvRSxNQUFNLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUMxRCxNQUFNLFlBQVksR0FBRyxzQkFBYSxDQUFDLHlCQUF5QixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRXpFLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUM1QyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDdkUsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDbEMsTUFBTSxTQUFTLEdBQUcsc0JBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM3QyxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0tBQ2hEO0lBQ0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztJQUVsQyxJQUFJLE1BQU0sQ0FBQyxVQUFVLEdBQUcsQ0FBQyxFQUFFO1FBQ3pCLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNoRCxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDOUMsSUFBSSxNQUFNLENBQUMsWUFBWSxHQUFHLENBQUMsRUFBRTtZQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7U0FDakQ7UUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2pCO1NBQU0sSUFBSSxNQUFNLENBQUMsWUFBWSxHQUFHLENBQUMsRUFBRTtRQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQ2hELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDakI7QUFDSCxDQUFDO0FBbkNELDRCQW1DQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8vIHRzbGludDpkaXNhYmxlOm5vLWltcGxpY2l0LWRlcGVuZGVuY2llc1xuaW1wb3J0IHsgbG9nZ2luZyB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcbmltcG9ydCB7IFBhcnNlZEFyZ3MgfSBmcm9tICdtaW5pbWlzdCc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgQ29uZmlndXJhdGlvbiwgSUxpbnRlck9wdGlvbnMsIExpbnRlciwgZmluZEZvcm1hdHRlciB9IGZyb20gJ3RzbGludCc7XG5pbXBvcnQgKiBhcyB0cyBmcm9tICd0eXBlc2NyaXB0JztcblxuXG5mdW5jdGlvbiBfYnVpbGRSdWxlcyhsb2dnZXI6IGxvZ2dpbmcuTG9nZ2VyKSB7XG4gIGNvbnN0IHRzQ29uZmlnUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9ydWxlcy90c2NvbmZpZy5qc29uJyk7XG4gIGNvbnN0IGNvbmZpZ0ZpbGUgPSB0cy5yZWFkQ29uZmlnRmlsZSh0c0NvbmZpZ1BhdGgsIHRzLnN5cy5yZWFkRmlsZSk7XG5cbiAgY29uc3QgcGFyc2VkVHNDb25maWcgPSB0cy5wYXJzZUpzb25Db25maWdGaWxlQ29udGVudChcbiAgICBjb25maWdGaWxlLmNvbmZpZyxcbiAgICB0cy5zeXMsXG4gICAgcGF0aC5kaXJuYW1lKHRzQ29uZmlnUGF0aCksXG4gICk7XG4gIGNvbnN0IGxpbnRSdWxlc1Byb2dyYW0gPSB0cy5jcmVhdGVQcm9ncmFtKHBhcnNlZFRzQ29uZmlnLmZpbGVOYW1lcywgcGFyc2VkVHNDb25maWcub3B0aW9ucyk7XG4gIGNvbnN0IHJlc3VsdCA9IGxpbnRSdWxlc1Byb2dyYW0uZW1pdCgpO1xuXG4gIGlmIChyZXN1bHQuZW1pdFNraXBwZWQpIHtcbiAgICBjb25zdCBob3N0OiB0cy5Gb3JtYXREaWFnbm9zdGljc0hvc3QgPSB7XG4gICAgICBnZXRDdXJyZW50RGlyZWN0b3J5OiAoKSA9PiB0cy5zeXMuZ2V0Q3VycmVudERpcmVjdG9yeSgpLFxuICAgICAgZ2V0TmV3TGluZTogKCkgPT4gdHMuc3lzLm5ld0xpbmUsXG4gICAgICBnZXRDYW5vbmljYWxGaWxlTmFtZTogKGZpbGVOYW1lOiBzdHJpbmcpID0+IGZpbGVOYW1lLFxuICAgIH07XG4gICAgbG9nZ2VyLmZhdGFsKHRzLmZvcm1hdERpYWdub3N0aWNzKHJlc3VsdC5kaWFnbm9zdGljcywgaG9zdCkpO1xuICAgIHByb2Nlc3MuZXhpdCgxMDApO1xuICB9XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKG9wdGlvbnM6IFBhcnNlZEFyZ3MsIGxvZ2dlcjogbG9nZ2luZy5Mb2dnZXIpIHtcbiAgX2J1aWxkUnVsZXMobG9nZ2VyKTtcblxuICBjb25zdCBsaW50T3B0aW9uczogSUxpbnRlck9wdGlvbnMgPSB7XG4gICAgZml4OiBvcHRpb25zLmZpeCxcbiAgfTtcblxuICBjb25zdCBwcm9ncmFtID0gTGludGVyLmNyZWF0ZVByb2dyYW0ocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL3RzY29uZmlnLmpzb24nKSk7XG4gIGNvbnN0IGxpbnRlciA9IG5ldyBMaW50ZXIobGludE9wdGlvbnMsIHByb2dyYW0pO1xuICBjb25zdCB0c0xpbnRQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL3RzbGludC5qc29uJyk7XG4gIGNvbnN0IHRzTGludENvbmZpZyA9IENvbmZpZ3VyYXRpb24ubG9hZENvbmZpZ3VyYXRpb25Gcm9tUGF0aCh0c0xpbnRQYXRoKTtcblxuICBwcm9ncmFtLmdldFJvb3RGaWxlTmFtZXMoKS5mb3JFYWNoKGZpbGVOYW1lID0+IHtcbiAgICBsaW50ZXIubGludChmaWxlTmFtZSwgdHMuc3lzLnJlYWRGaWxlKGZpbGVOYW1lKSB8fCAnJywgdHNMaW50Q29uZmlnKTtcbiAgfSk7XG5cbiAgY29uc3QgcmVzdWx0ID0gbGludGVyLmdldFJlc3VsdCgpO1xuICBjb25zdCBGb3JtYXR0ZXIgPSBmaW5kRm9ybWF0dGVyKCdjb2RlRnJhbWUnKTtcbiAgaWYgKCFGb3JtYXR0ZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIGxpbnQgZm9ybWF0dGVyLicpO1xuICB9XG4gIGNvbnN0IGZvcm1hdHRlciA9IG5ldyBGb3JtYXR0ZXIoKTtcblxuICBpZiAocmVzdWx0LmVycm9yQ291bnQgPiAwKSB7XG4gICAgbG9nZ2VyLmVycm9yKGZvcm1hdHRlci5mb3JtYXQocmVzdWx0LmZhaWx1cmVzKSk7XG4gICAgbG9nZ2VyLmluZm8oYEVycm9yczogICAke3Jlc3VsdC5lcnJvckNvdW50fWApO1xuICAgIGlmIChyZXN1bHQud2FybmluZ0NvdW50ID4gMCkge1xuICAgICAgbG9nZ2VyLmluZm8oYFdhcm5pbmdzOiAke3Jlc3VsdC53YXJuaW5nQ291bnR9YCk7XG4gICAgfVxuICAgIHByb2Nlc3MuZXhpdCgyKTtcbiAgfSBlbHNlIGlmIChyZXN1bHQud2FybmluZ0NvdW50ID4gMCkge1xuICAgIGxvZ2dlci53YXJuKGZvcm1hdHRlci5mb3JtYXQocmVzdWx0LmZhaWx1cmVzKSk7XG4gICAgbG9nZ2VyLmluZm8oYFdhcm5pbmdzOiAke3Jlc3VsdC53YXJuaW5nQ291bnR9YCk7XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xuICB9XG59XG4iXX0=