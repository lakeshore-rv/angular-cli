"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const packages_1 = require("../lib/packages");
const build_1 = require("./build");
function _exec(command, args, opts, logger) {
    const { status, error, stderr, stdout } = child_process_1.spawnSync(command, args, Object.assign({}, opts));
    if (status != 0) {
        logger.error(`Command failed: ${command} ${args.map(x => JSON.stringify(x)).join(', ')}`);
        if (error) {
            logger.error('Error: ' + (error ? error.message : 'undefined'));
        }
        else {
            logger.error(`STDERR:\n${stderr}`);
        }
        throw error;
    }
    else {
        return stdout.toString();
    }
}
function default_1(args, logger) {
    logger.info('Building...');
    build_1.default({}, logger.createChild('build'));
    return Object.keys(packages_1.packages).reduce((acc, name) => {
        const pkg = packages_1.packages[name];
        if (pkg.packageJson['private']) {
            logger.debug(`${name} (private)`);
            return acc;
        }
        return acc
            .then(() => {
            logger.info(name);
            return _exec('npm', ['publish'].concat(args.tag ? ['--tag', args.tag] : []), {
                cwd: pkg.dist,
            }, logger);
        })
            .then((stdout) => {
            logger.info(stdout);
        });
    }, Promise.resolve())
        .then(() => logger.info('done'), (err) => logger.fatal(err.message));
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGlzaC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZXJuaWVkYXZpcy9Db2RlL2FuZ3VsYXItY2xpLyIsInNvdXJjZXMiOlsic2NyaXB0cy9wdWJsaXNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBU0EsaURBQTBDO0FBQzFDLDhDQUEyQztBQUMzQyxtQ0FBNEI7QUFHNUIsZUFBZSxPQUFlLEVBQUUsSUFBYyxFQUFFLElBQXNCLEVBQUUsTUFBc0I7SUFDNUYsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLHlCQUFTLENBQUMsT0FBTyxFQUFFLElBQUksb0JBQU8sSUFBSSxFQUFHLENBQUM7SUFFaEYsSUFBSSxNQUFNLElBQUksQ0FBQyxFQUFFO1FBQ2YsTUFBTSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsT0FBTyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMxRixJQUFJLEtBQUssRUFBRTtZQUNULE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1NBQ2pFO2FBQU07WUFDTCxNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksTUFBTSxFQUFFLENBQUMsQ0FBQztTQUNwQztRQUNELE1BQU0sS0FBSyxDQUFDO0tBQ2I7U0FBTTtRQUNMLE9BQU8sTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQzFCO0FBQ0gsQ0FBQztBQUdELG1CQUF5QixJQUFzQixFQUFFLE1BQXNCO0lBQ3JFLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDM0IsZUFBSyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFFdkMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFrQixFQUFFLElBQVksRUFBRSxFQUFFO1FBQ3ZFLE1BQU0sR0FBRyxHQUFHLG1CQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0IsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzlCLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLFlBQVksQ0FBQyxDQUFDO1lBRWxDLE9BQU8sR0FBRyxDQUFDO1NBQ1o7UUFFRCxPQUFPLEdBQUc7YUFDUCxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVsQixPQUFPLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDM0UsR0FBRyxFQUFFLEdBQUcsQ0FBQyxJQUFJO2FBQ2QsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNiLENBQUMsQ0FBQzthQUNELElBQUksQ0FBQyxDQUFDLE1BQWMsRUFBRSxFQUFFO1lBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ3BCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBVSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQzlFLENBQUM7QUF6QkQsNEJBeUJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLy8gdHNsaW50OmRpc2FibGU6bm8taW1wbGljaXQtZGVwZW5kZW5jaWVzXG5pbXBvcnQgeyBsb2dnaW5nIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2NvcmUnO1xuaW1wb3J0IHsgc3Bhd25TeW5jIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgeyBwYWNrYWdlcyB9IGZyb20gJy4uL2xpYi9wYWNrYWdlcyc7XG5pbXBvcnQgYnVpbGQgZnJvbSAnLi9idWlsZCc7XG5cblxuZnVuY3Rpb24gX2V4ZWMoY29tbWFuZDogc3RyaW5nLCBhcmdzOiBzdHJpbmdbXSwgb3B0czogeyBjd2Q/OiBzdHJpbmcgfSwgbG9nZ2VyOiBsb2dnaW5nLkxvZ2dlcikge1xuICBjb25zdCB7IHN0YXR1cywgZXJyb3IsIHN0ZGVyciwgc3Rkb3V0IH0gPSBzcGF3blN5bmMoY29tbWFuZCwgYXJncywgeyAuLi5vcHRzIH0pO1xuXG4gIGlmIChzdGF0dXMgIT0gMCkge1xuICAgIGxvZ2dlci5lcnJvcihgQ29tbWFuZCBmYWlsZWQ6ICR7Y29tbWFuZH0gJHthcmdzLm1hcCh4ID0+IEpTT04uc3RyaW5naWZ5KHgpKS5qb2luKCcsICcpfWApO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdFcnJvcjogJyArIChlcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAndW5kZWZpbmVkJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2dnZXIuZXJyb3IoYFNUREVSUjpcXG4ke3N0ZGVycn1gKTtcbiAgICB9XG4gICAgdGhyb3cgZXJyb3I7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0ZG91dC50b1N0cmluZygpO1xuICB9XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGFyZ3M6IHsgdGFnPzogc3RyaW5nIH0sIGxvZ2dlcjogbG9nZ2luZy5Mb2dnZXIpIHtcbiAgbG9nZ2VyLmluZm8oJ0J1aWxkaW5nLi4uJyk7XG4gIGJ1aWxkKHt9LCBsb2dnZXIuY3JlYXRlQ2hpbGQoJ2J1aWxkJykpO1xuXG4gIHJldHVybiBPYmplY3Qua2V5cyhwYWNrYWdlcykucmVkdWNlKChhY2M6IFByb21pc2U8dm9pZD4sIG5hbWU6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHBrZyA9IHBhY2thZ2VzW25hbWVdO1xuICAgIGlmIChwa2cucGFja2FnZUpzb25bJ3ByaXZhdGUnXSkge1xuICAgICAgbG9nZ2VyLmRlYnVnKGAke25hbWV9IChwcml2YXRlKWApO1xuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cblxuICAgIHJldHVybiBhY2NcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgbG9nZ2VyLmluZm8obmFtZSk7XG5cbiAgICAgICAgcmV0dXJuIF9leGVjKCducG0nLCBbJ3B1Ymxpc2gnXS5jb25jYXQoYXJncy50YWcgPyBbJy0tdGFnJywgYXJncy50YWddIDogW10pLCB7XG4gICAgICAgICAgY3dkOiBwa2cuZGlzdCxcbiAgICAgICAgfSwgbG9nZ2VyKTtcbiAgICAgIH0pXG4gICAgICAudGhlbigoc3Rkb3V0OiBzdHJpbmcpID0+IHtcbiAgICAgICAgbG9nZ2VyLmluZm8oc3Rkb3V0KTtcbiAgICAgIH0pO1xuICB9LCBQcm9taXNlLnJlc29sdmUoKSlcbiAgLnRoZW4oKCkgPT4gbG9nZ2VyLmluZm8oJ2RvbmUnKSwgKGVycjogRXJyb3IpID0+IGxvZ2dlci5mYXRhbChlcnIubWVzc2FnZSkpO1xufVxuIl19