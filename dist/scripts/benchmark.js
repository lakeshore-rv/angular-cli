"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// tslint:disable:no-implicit-dependencies
const core_1 = require("@angular-devkit/core");
const glob = require("glob");
require("jasmine");
const jasmine_spec_reporter_1 = require("jasmine-spec-reporter");
const path_1 = require("path");
const Jasmine = require('jasmine');
const projectBaseDir = path_1.join(__dirname, '../packages');
require('source-map-support').install({
    hookRequire: true,
});
class BenchmarkReporter extends jasmine_spec_reporter_1.SpecReporter {
    constructor() {
        super({
            summary: {},
        });
    }
    reportBenchmark(stats) {
        this._stats = stats;
    }
    jasmineStarted(suiteInfo) {
        super.jasmineStarted(suiteInfo);
    }
    suiteStarted(result) {
        super.suiteStarted(result);
    }
    specStarted(result) {
        super.specStarted(result);
        this._stats = null;
    }
    specDone(result) {
        super.specDone(result);
        if (result.status == 'passed' && this._stats) {
            const stat = this._stats;
            const padding = '             ';
            function pad(x, p = padding) {
                const s = ('' + x).replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
                return p.substr(0, p.length - ('' + s).length) + s;
            }
            const fastest = stat.fastest.map(x => pad(x)).join('');
            const slowest = stat.slowest.map(x => pad(x)).join('');
            const mean = pad(Math.floor(stat.mean));
            const average = pad(Math.floor(stat.average));
            if (stat.base) {
                const precision = (x) => ('' + Math.floor(x * 100)).replace(/(\d\d)$/, '.$1');
                const multPad = '      ';
                const baseFastest = stat.base.fastest.map(x => pad(x)).join('');
                const baseSlowest = stat.base.slowest.map(x => pad(x)).join('');
                const baseMean = pad(Math.floor(stat.base.mean));
                const baseMeanMult = pad(precision(stat.mean / stat.base.mean), multPad);
                const baseAverage = pad(Math.floor(stat.base.average));
                const baseAverageMult = pad(precision(stat.average / stat.base.average), multPad);
                console.log(core_1.terminal.colors.yellow(core_1.tags.indentBy(6) `
          fastest: ${fastest}
            (base) ${baseFastest}
          slowest: ${slowest}
            (base) ${baseSlowest}
          mean:    ${mean} (${baseMean}) (${baseMeanMult}x)
          average: ${average} (${baseAverage}) (${baseAverageMult}x)
        `));
            }
            else {
                console.log(core_1.terminal.colors.yellow(core_1.tags.indentBy(6) `
          fastest: ${fastest}
          slowest: ${slowest}
          mean:    ${mean}
          average: ${average}
        `));
            }
        }
    }
    suiteDone(result) {
        super.suiteDone(result);
    }
    jasmineDone(runDetails) {
        super.jasmineDone(runDetails);
    }
}
// Create a Jasmine runner and configure it.
const runner = new Jasmine({ projectBaseDir: projectBaseDir });
runner.env.clearReporters();
global.benchmarkReporter = new BenchmarkReporter();
runner.env.addReporter(global.benchmarkReporter);
// Manually set exit code (needed with custom reporters)
runner.onComplete((success) => {
    process.exitCode = success ? 0 : 1;
});
// Run the tests.
const allTests = glob.sync('packages/**/*_benchmark.ts')
    .map(p => path_1.relative(projectBaseDir, p))
    .filter(p => !/schematics_cli\/schematics\//.test(p));
function default_1(_args) {
    runner.execute(allTests);
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,