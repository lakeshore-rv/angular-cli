"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
function default_1(opts, logger) {
    const authors = child_process_1.execSync(`git log ${opts.sha}.. --format="%aN"`).toString();
    const counter = new Map();
    for (const name of authors.split(/\r?\n/g)) {
        if (name) {
            const maybeCounter = counter.get(name);
            counter.set(name, (maybeCounter || 0) + 1);
        }
    }
    const sortedCount = [...counter.entries()].sort((a, b) => b[1] - a[1]);
    for (const count of sortedCount) {
        logger.info(count[0] + ' ' + count[1]);
    }
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlY2lhbC10aGFua3MuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2VybmllZGF2aXMvQ29kZS9hbmd1bGFyLWNsaS8iLCJzb3VyY2VzIjpbInNjcmlwdHMvc3BlY2lhbC10aGFua3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFTQSxpREFBeUM7QUFFekMsbUJBQXlCLElBQXFCLEVBQUUsTUFBc0I7SUFDcEUsTUFBTSxPQUFPLEdBQUcsd0JBQVEsQ0FBQyxXQUFXLElBQUksQ0FBQyxHQUFHLG1CQUFtQixDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFNUUsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7SUFDMUMsS0FBSyxNQUFNLElBQUksSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQzFDLElBQUksSUFBSSxFQUFFO1lBQ1IsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLFlBQVksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUM1QztLQUNGO0lBRUQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV2RSxLQUFLLE1BQU0sS0FBSyxJQUFJLFdBQVcsRUFBRTtRQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDeEM7QUFDSCxDQUFDO0FBaEJELDRCQWdCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8vIHRzbGludDpkaXNhYmxlOm5vLWltcGxpY2l0LWRlcGVuZGVuY2llc1xuaW1wb3J0IHsgbG9nZ2luZyB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcbmltcG9ydCB7IGV4ZWNTeW5jIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChvcHRzOiB7IHNoYTogc3RyaW5nIH0sIGxvZ2dlcjogbG9nZ2luZy5Mb2dnZXIpIHtcbiAgY29uc3QgYXV0aG9ycyA9IGV4ZWNTeW5jKGBnaXQgbG9nICR7b3B0cy5zaGF9Li4gLS1mb3JtYXQ9XCIlYU5cImApLnRvU3RyaW5nKCk7XG5cbiAgY29uc3QgY291bnRlciA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+KCk7XG4gIGZvciAoY29uc3QgbmFtZSBvZiBhdXRob3JzLnNwbGl0KC9cXHI/XFxuL2cpKSB7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIGNvbnN0IG1heWJlQ291bnRlciA9IGNvdW50ZXIuZ2V0KG5hbWUpO1xuICAgICAgY291bnRlci5zZXQobmFtZSwgKG1heWJlQ291bnRlciB8fCAwKSArIDEpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHNvcnRlZENvdW50ID0gWy4uLmNvdW50ZXIuZW50cmllcygpXS5zb3J0KChhLCBiKSA9PiBiWzFdIC0gYVsxXSk7XG5cbiAgZm9yIChjb25zdCBjb3VudCBvZiBzb3J0ZWRDb3VudCkge1xuICAgIGxvZ2dlci5pbmZvKGNvdW50WzBdICsgJyAnICsgY291bnRbMV0pO1xuICB9XG59XG4iXX0=