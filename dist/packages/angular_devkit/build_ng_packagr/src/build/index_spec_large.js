"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/architect/testing");
const core_1 = require("@angular-devkit/core");
const operators_1 = require("rxjs/operators");
const devkitRoot = core_1.normalize(global._DevKitRoot); // tslint:disable-line:no-any
const workspaceRoot = core_1.join(devkitRoot, 'tests/angular_devkit/build_ng_packagr/ng-packaged/');
exports.host = new testing_1.TestProjectHost(workspaceRoot);
describe('NgPackagr Builder', () => {
    beforeEach(done => exports.host.initialize().toPromise().then(done, done.fail));
    afterEach(done => exports.host.restore().toPromise().then(done, done.fail));
    it('works', (done) => {
        const targetSpec = { project: 'lib', target: 'build' };
        testing_1.runTargetSpec(exports.host, targetSpec).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true))).toPromise().then(done, done.fail);
    });
    it('tests works', (done) => {
        const targetSpec = { project: 'lib', target: 'test' };
        testing_1.runTargetSpec(exports.host, targetSpec).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true))).toPromise().then(done, done.fail);
    });
    it('lint works', (done) => {
        const targetSpec = { project: 'lib', target: 'lint' };
        testing_1.runTargetSpec(exports.host, targetSpec).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true))).toPromise().then(done, done.fail);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXhfc3BlY19sYXJnZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZXJuaWVkYXZpcy9Db2RlL2FuZ3VsYXItY2xpLyIsInNvdXJjZXMiOlsicGFja2FnZXMvYW5ndWxhcl9kZXZraXQvYnVpbGRfbmdfcGFja2Fnci9zcmMvYnVpbGQvaW5kZXhfc3BlY19sYXJnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOztBQUdILCtEQUFtRjtBQUNuRiwrQ0FBdUQ7QUFDdkQsOENBQXFDO0FBR3JDLE1BQU0sVUFBVSxHQUFHLGdCQUFTLENBQUUsTUFBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsNkJBQTZCO0FBQ3hGLE1BQU0sYUFBYSxHQUFHLFdBQUksQ0FBQyxVQUFVLEVBQUUsb0RBQW9ELENBQUMsQ0FBQztBQUNoRixRQUFBLElBQUksR0FBRyxJQUFJLHlCQUFlLENBQUMsYUFBYSxDQUFDLENBQUM7QUFFdkQsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtJQUNqQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN4RSxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUVwRSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDbkIsTUFBTSxVQUFVLEdBQW9CLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUM7UUFFeEUsdUJBQWEsQ0FBQyxZQUFJLEVBQUUsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUNsQyxlQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQzNELENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDekIsTUFBTSxVQUFVLEdBQW9CLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUM7UUFFdkUsdUJBQWEsQ0FBQyxZQUFJLEVBQUUsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUNsQyxlQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQzNELENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDeEIsTUFBTSxVQUFVLEdBQW9CLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUM7UUFFdkUsdUJBQWEsQ0FBQyxZQUFJLEVBQUUsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUNsQyxlQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQzNELENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHsgVGFyZ2V0U3BlY2lmaWVyIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2FyY2hpdGVjdCc7XG5pbXBvcnQgeyBUZXN0UHJvamVjdEhvc3QsIHJ1blRhcmdldFNwZWMgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvYXJjaGl0ZWN0L3Rlc3RpbmcnO1xuaW1wb3J0IHsgam9pbiwgbm9ybWFsaXplIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2NvcmUnO1xuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5cbmNvbnN0IGRldmtpdFJvb3QgPSBub3JtYWxpemUoKGdsb2JhbCBhcyBhbnkpLl9EZXZLaXRSb290KTsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1hbnlcbmNvbnN0IHdvcmtzcGFjZVJvb3QgPSBqb2luKGRldmtpdFJvb3QsICd0ZXN0cy9hbmd1bGFyX2RldmtpdC9idWlsZF9uZ19wYWNrYWdyL25nLXBhY2thZ2VkLycpO1xuZXhwb3J0IGNvbnN0IGhvc3QgPSBuZXcgVGVzdFByb2plY3RIb3N0KHdvcmtzcGFjZVJvb3QpO1xuXG5kZXNjcmliZSgnTmdQYWNrYWdyIEJ1aWxkZXInLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goZG9uZSA9PiBob3N0LmluaXRpYWxpemUoKS50b1Byb21pc2UoKS50aGVuKGRvbmUsIGRvbmUuZmFpbCkpO1xuICBhZnRlckVhY2goZG9uZSA9PiBob3N0LnJlc3RvcmUoKS50b1Byb21pc2UoKS50aGVuKGRvbmUsIGRvbmUuZmFpbCkpO1xuXG4gIGl0KCd3b3JrcycsIChkb25lKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0U3BlYzogVGFyZ2V0U3BlY2lmaWVyID0geyBwcm9qZWN0OiAnbGliJywgdGFyZ2V0OiAnYnVpbGQnIH07XG5cbiAgICBydW5UYXJnZXRTcGVjKGhvc3QsIHRhcmdldFNwZWMpLnBpcGUoXG4gICAgICB0YXAoKGJ1aWxkRXZlbnQpID0+IGV4cGVjdChidWlsZEV2ZW50LnN1Y2Nlc3MpLnRvQmUodHJ1ZSkpLFxuICAgICkudG9Qcm9taXNlKCkudGhlbihkb25lLCBkb25lLmZhaWwpO1xuICB9KTtcblxuICBpdCgndGVzdHMgd29ya3MnLCAoZG9uZSkgPT4ge1xuICAgIGNvbnN0IHRhcmdldFNwZWM6IFRhcmdldFNwZWNpZmllciA9IHsgcHJvamVjdDogJ2xpYicsIHRhcmdldDogJ3Rlc3QnIH07XG5cbiAgICBydW5UYXJnZXRTcGVjKGhvc3QsIHRhcmdldFNwZWMpLnBpcGUoXG4gICAgICB0YXAoKGJ1aWxkRXZlbnQpID0+IGV4cGVjdChidWlsZEV2ZW50LnN1Y2Nlc3MpLnRvQmUodHJ1ZSkpLFxuICAgICkudG9Qcm9taXNlKCkudGhlbihkb25lLCBkb25lLmZhaWwpO1xuICB9KTtcblxuICBpdCgnbGludCB3b3JrcycsIChkb25lKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0U3BlYzogVGFyZ2V0U3BlY2lmaWVyID0geyBwcm9qZWN0OiAnbGliJywgdGFyZ2V0OiAnbGludCcgfTtcblxuICAgIHJ1blRhcmdldFNwZWMoaG9zdCwgdGFyZ2V0U3BlYykucGlwZShcbiAgICAgIHRhcCgoYnVpbGRFdmVudCkgPT4gZXhwZWN0KGJ1aWxkRXZlbnQuc3VjY2VzcykudG9CZSh0cnVlKSksXG4gICAgKS50b1Byb21pc2UoKS50aGVuKGRvbmUsIGRvbmUuZmFpbCk7XG4gIH0pO1xufSk7XG4iXX0=