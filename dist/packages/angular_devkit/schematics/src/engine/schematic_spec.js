"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// tslint:disable:non-null-operator
const core_1 = require("@angular-devkit/core");
const rxjs_1 = require("rxjs");
const base_1 = require("../rules/base");
const interface_1 = require("../tree/interface");
const static_1 = require("../tree/static");
const schematic_1 = require("./schematic");
const context = {
    debug: false,
    logger: new core_1.logging.NullLogger(),
    strategy: interface_1.MergeStrategy.Default,
};
const engine = {
    createContext: (schematic) => (Object.assign({ engine, schematic }, context)),
    transformOptions: (_, options) => rxjs_1.of(options),
    defaultMergeStrategy: interface_1.MergeStrategy.Default,
};
const collection = {
    name: 'collection',
    description: 'description',
};
function files(tree) {
    const files = [];
    tree.visit(x => files.push(x));
    return files;
}
describe('Schematic', () => {
    it('works with a rule', done => {
        let inner = null;
        const desc = {
            collection,
            name: 'test',
            description: '',
            path: '/a/b/c',
            factory: () => (tree) => {
                inner = static_1.branch(tree);
                tree.create('a/b/c', 'some content');
                return tree;
            },
        };
        const schematic = new schematic_1.SchematicImpl(desc, desc.factory, null, engine);
        schematic.call({}, rxjs_1.of(static_1.empty()))
            .toPromise()
            .then(x => {
            expect(files(inner)).toEqual([]);
            expect(files(x)).toEqual(['/a/b/c']);
        })
            .then(done, done.fail);
    });
    it('works with a rule that returns an observable', done => {
        let inner = null;
        const desc = {
            collection,
            name: 'test',
            description: '',
            path: 'a/b/c',
            factory: () => (fem) => {
                inner = fem;
                return rxjs_1.of(static_1.empty());
            },
        };
        const schematic = new schematic_1.SchematicImpl(desc, desc.factory, null, engine);
        schematic.call({}, rxjs_1.of(static_1.empty()))
            .toPromise()
            .then(x => {
            expect(files(inner)).toEqual([]);
            expect(files(x)).toEqual([]);
            expect(inner).not.toBe(x);
        })
            .then(done, done.fail);
    });
    it('works with nested chained function rules', done => {
        let chainCount = 0;
        let oneCount = 0;
        let twoCount = 0;
        let threeCount = 0;
        const one = () => {
            return base_1.chain([
                () => { oneCount++; },
            ]);
        };
        const two = () => {
            return base_1.chain([
                () => { twoCount++; },
            ]);
        };
        const three = () => {
            threeCount++;
        };
        const desc = {
            collection,
            name: 'test',
            description: '',
            path: '/a/b/c',
            factory: () => {
                return base_1.chain([
                    () => { chainCount++; },
                    one,
                    two,
                    three,
                ]);
            },
        };
        const schematic = new schematic_1.SchematicImpl(desc, desc.factory, null, engine);
        schematic.call({}, rxjs_1.of(static_1.empty()))
            .toPromise()
            .then(_x => {
            expect(chainCount).toBe(1);
            expect(oneCount).toBe(1);
            expect(twoCount).toBe(1);
            expect(threeCount).toBe(1);
        })
            .then(done, done.fail);
    });
});
//# sourceMappingURL=data:application/json;base64,