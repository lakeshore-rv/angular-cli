"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// tslint:disable:non-null-operator
// tslint:disable:no-any
// tslint:disable:no-implicit-dependencies
const schematics_1 = require("@angular-devkit/schematics");
const rxjs_1 = require("rxjs");
const static_1 = require("../tree/static");
const call_1 = require("./call");
const context = {
    engine: null,
    debug: false,
    strategy: schematics_1.MergeStrategy.Default,
};
describe('callSource', () => {
    it('errors if undefined source', done => {
        const source0 = () => undefined;
        call_1.callSource(source0, context)
            .toPromise()
            .then(() => done.fail(), err => {
            expect(err.constructor).toBe(call_1.InvalidSourceResultException);
        })
            .then(done, done.fail);
    });
    it('errors if invalid source object', done => {
        const source0 = () => ({});
        call_1.callSource(source0, context)
            .toPromise()
            .then(() => done.fail(), err => {
            expect(err.constructor).toBe(call_1.InvalidSourceResultException);
        })
            .then(done, done.fail);
    });
    it('errors if Observable of invalid source object', done => {
        const source0 = () => rxjs_1.of({});
        call_1.callSource(source0, context)
            .toPromise()
            .then(() => done.fail(), err => {
            expect(err.constructor).toBe(call_1.InvalidSourceResultException);
        })
            .then(done, done.fail);
    });
    it('works with a Tree', done => {
        const tree0 = static_1.empty();
        const source0 = () => tree0;
        call_1.callSource(source0, context)
            .toPromise()
            .then(tree => {
            expect(tree).toBe(tree0);
        })
            .then(done, done.fail);
    });
    it('works with an Observable', done => {
        const tree0 = static_1.empty();
        const source0 = () => rxjs_1.of(tree0);
        call_1.callSource(source0, context)
            .toPromise()
            .then(tree => {
            expect(tree).toBe(tree0);
        })
            .then(done, done.fail);
    });
});
describe('callRule', () => {
    it('errors if invalid source object', done => {
        const tree0 = rxjs_1.of(static_1.empty());
        const rule0 = () => ({});
        call_1.callRule(rule0, tree0, context)
            .toPromise()
            .then(() => done.fail(), err => {
            expect(err.constructor).toBe(call_1.InvalidRuleResultException);
        })
            .then(done, done.fail);
    });
    it('errors if Observable of invalid source object', done => {
        const tree0 = rxjs_1.of(static_1.empty());
        const rule0 = () => rxjs_1.of({});
        call_1.callRule(rule0, tree0, context)
            .toPromise()
            .then(() => done.fail(), err => {
            expect(err.constructor).toBe(call_1.InvalidRuleResultException);
        })
            .then(done, done.fail);
    });
    it('works with undefined result', done => {
        const tree0 = static_1.empty();
        const rule0 = () => undefined;
        call_1.callRule(rule0, rxjs_1.of(tree0), context)
            .toPromise()
            .then(tree => {
            expect(tree).toBe(tree0);
        })
            .then(done, done.fail);
    });
    it('works with a Tree', done => {
        const tree0 = static_1.empty();
        const rule0 = () => tree0;
        call_1.callRule(rule0, rxjs_1.of(tree0), context)
            .toPromise()
            .then(tree => {
            expect(tree).toBe(tree0);
        })
            .then(done, done.fail);
    });
    it('works with an Observable', done => {
        const tree0 = static_1.empty();
        const rule0 = () => rxjs_1.of(tree0);
        call_1.callRule(rule0, rxjs_1.of(tree0), context)
            .toPromise()
            .then(tree => {
            expect(tree).toBe(tree0);
        })
            .then(done, done.fail);
    });
});
//# sourceMappingURL=data:application/json;base64,