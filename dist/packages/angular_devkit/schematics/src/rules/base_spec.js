"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// tslint:disable:no-implicit-dependencies
// tslint:disable:non-null-operator
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const rxjs_1 = require("rxjs");
const static_1 = require("../tree/static");
const base_1 = require("./base");
const call_1 = require("./call");
const context = {
    engine: null,
    debug: false,
    strategy: schematics_1.MergeStrategy.Default,
};
describe('chain', () => {
    it('works with simple rules', done => {
        const rulesCalled = [];
        const tree0 = static_1.empty();
        const tree1 = static_1.empty();
        const tree2 = static_1.empty();
        const tree3 = static_1.empty();
        const rule0 = (tree) => (rulesCalled[0] = tree, tree1);
        const rule1 = (tree) => (rulesCalled[1] = tree, tree2);
        const rule2 = (tree) => (rulesCalled[2] = tree, tree3);
        call_1.callRule(base_1.chain([rule0, rule1, rule2]), rxjs_1.of(tree0), context)
            .toPromise()
            .then(result => {
            expect(result).not.toBe(tree0);
            expect(rulesCalled[0]).toBe(tree0);
            expect(rulesCalled[1]).toBe(tree1);
            expect(rulesCalled[2]).toBe(tree2);
            expect(result).toBe(tree3);
        })
            .then(done, done.fail);
    });
    it('works with observable rules', done => {
        const rulesCalled = [];
        const tree0 = static_1.empty();
        const tree1 = static_1.empty();
        const tree2 = static_1.empty();
        const tree3 = static_1.empty();
        const rule0 = (tree) => (rulesCalled[0] = tree, rxjs_1.of(tree1));
        const rule1 = (tree) => (rulesCalled[1] = tree, rxjs_1.of(tree2));
        const rule2 = (tree) => (rulesCalled[2] = tree, tree3);
        call_1.callRule(base_1.chain([rule0, rule1, rule2]), rxjs_1.of(tree0), context)
            .toPromise()
            .then(result => {
            expect(result).not.toBe(tree0);
            expect(rulesCalled[0]).toBe(tree0);
            expect(rulesCalled[1]).toBe(tree1);
            expect(rulesCalled[2]).toBe(tree2);
            expect(result).toBe(tree3);
        })
            .then(done, done.fail);
    });
});
describe('apply', () => {
    it('works with simple rules', done => {
        const rulesCalled = [];
        let sourceCalled = false;
        const tree0 = static_1.empty();
        const tree1 = static_1.empty();
        const tree2 = static_1.empty();
        const tree3 = static_1.empty();
        const source = () => (sourceCalled = true, tree0);
        const rule0 = (tree) => (rulesCalled[0] = tree, tree1);
        const rule1 = (tree) => (rulesCalled[1] = tree, tree2);
        const rule2 = (tree) => (rulesCalled[2] = tree, tree3);
        call_1.callSource(base_1.apply(source, [rule0, rule1, rule2]), context)
            .toPromise()
            .then(result => {
            expect(result).not.toBe(tree0);
            expect(rulesCalled[0]).toBe(tree0);
            expect(rulesCalled[1]).toBe(tree1);
            expect(rulesCalled[2]).toBe(tree2);
            expect(result).toBe(tree3);
        })
            .then(done, done.fail);
    });
    it('works with observable rules', done => {
        const rulesCalled = [];
        let sourceCalled = false;
        const tree0 = static_1.empty();
        const tree1 = static_1.empty();
        const tree2 = static_1.empty();
        const tree3 = static_1.empty();
        const source = () => (sourceCalled = true, tree0);
        const rule0 = (tree) => (rulesCalled[0] = tree, rxjs_1.of(tree1));
        const rule1 = (tree) => (rulesCalled[1] = tree, rxjs_1.of(tree2));
        const rule2 = (tree) => (rulesCalled[2] = tree, tree3);
        call_1.callSource(base_1.apply(source, [rule0, rule1, rule2]), context)
            .toPromise()
            .then(result => {
            expect(result).not.toBe(tree0);
            expect(rulesCalled[0]).toBe(tree0);
            expect(rulesCalled[1]).toBe(tree1);
            expect(rulesCalled[2]).toBe(tree2);
            expect(result).toBe(tree3);
        })
            .then(done, done.fail);
    });
});
describe('partitionApplyMerge', () => {
    it('works with simple rules', done => {
        const host = new core_1.virtualFs.test.TestHost({
            '/test1': '',
            '/test2': '',
        });
        const tree = new schematics_1.HostTree(host);
        const predicate = (path) => path.indexOf('1') != -1;
        const ruleYes = (tree) => {
            expect(tree.exists('/test1')).toBe(true);
            expect(tree.exists('/test2')).toBe(false);
            return static_1.empty();
        };
        const ruleNo = (tree) => {
            expect(tree.exists('/test1')).toBe(false);
            expect(tree.exists('/test2')).toBe(true);
            return static_1.empty();
        };
        call_1.callRule(schematics_1.partitionApplyMerge(predicate, ruleYes, ruleNo), rxjs_1.of(tree), context)
            .toPromise()
            .then(result => {
            expect(result.exists('/test1')).toBe(false);
            expect(result.exists('/test2')).toBe(false);
        })
            .then(done, done.fail);
    });
});
//# sourceMappingURL=data:application/json;base64,