"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// tslint:disable:non-null-operator
const rxjs_1 = require("rxjs");
const host_tree_1 = require("../tree/host-tree");
const call_1 = require("./call");
const move_1 = require("./move");
const context = null;
describe('move', () => {
    it('works on moving the whole structure', done => {
        const tree = new host_tree_1.HostTree();
        tree.create('a/b/file1', 'hello world');
        tree.create('a/b/file2', 'hello world');
        tree.create('a/c/file3', 'hello world');
        call_1.callRule(move_1.move('sub'), rxjs_1.of(tree), context)
            .toPromise()
            .then(result => {
            expect(result.exists('sub/a/b/file1')).toBe(true);
            expect(result.exists('sub/a/b/file2')).toBe(true);
            expect(result.exists('sub/a/c/file3')).toBe(true);
        })
            .then(done, done.fail);
    });
    it('works on moving a subdirectory structure', done => {
        const tree = new host_tree_1.HostTree();
        tree.create('a/b/file1', 'hello world');
        tree.create('a/b/file2', 'hello world');
        tree.create('a/c/file3', 'hello world');
        call_1.callRule(move_1.move('a/b', 'sub'), rxjs_1.of(tree), context)
            .toPromise()
            .then(result => {
            expect(result.exists('sub/file1')).toBe(true);
            expect(result.exists('sub/file2')).toBe(true);
            expect(result.exists('a/c/file3')).toBe(true);
        })
            .then(done, done.fail);
    });
    it('becomes a noop with identical from and to', done => {
        const tree = new host_tree_1.HostTree();
        tree.create('a/b/file1', 'hello world');
        tree.create('a/b/file2', 'hello world');
        tree.create('a/c/file3', 'hello world');
        call_1.callRule(move_1.move(''), rxjs_1.of(tree), context)
            .toPromise()
            .then(result => {
            expect(result.exists('a/b/file1')).toBe(true);
            expect(result.exists('a/b/file2')).toBe(true);
            expect(result.exists('a/c/file3')).toBe(true);
        })
            .then(done, done.fail);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW92ZV9zcGVjLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9lcm5pZWRhdmlzL0NvZGUvYW5ndWxhci1jbGkvIiwic291cmNlcyI6WyJwYWNrYWdlcy9hbmd1bGFyX2RldmtpdC9zY2hlbWF0aWNzL3NyYy9ydWxlcy9tb3ZlX3NwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7O0dBTUc7QUFDSCxtQ0FBbUM7QUFDbkMsK0JBQTBDO0FBRTFDLGlEQUE2QztBQUM3QyxpQ0FBa0M7QUFDbEMsaUNBQThCO0FBRzlCLE1BQU0sT0FBTyxHQUFxQixJQUFNLENBQUM7QUFHekMsUUFBUSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7SUFDcEIsRUFBRSxDQUFDLHFDQUFxQyxFQUFFLElBQUksQ0FBQyxFQUFFO1FBQy9DLE1BQU0sSUFBSSxHQUFHLElBQUksb0JBQVEsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRXhDLGVBQVEsQ0FBQyxXQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsU0FBWSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sQ0FBQzthQUMvQyxTQUFTLEVBQUU7YUFDWCxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDYixNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsRCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsRCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwRCxDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywwQ0FBMEMsRUFBRSxJQUFJLENBQUMsRUFBRTtRQUNwRCxNQUFNLElBQUksR0FBRyxJQUFJLG9CQUFRLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUV4QyxlQUFRLENBQUMsV0FBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxTQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxDQUFDO2FBQ3RELFNBQVMsRUFBRTthQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNiLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hELENBQUMsQ0FBQzthQUNELElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDJDQUEyQyxFQUFFLElBQUksQ0FBQyxFQUFFO1FBQ3JELE1BQU0sSUFBSSxHQUFHLElBQUksb0JBQVEsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRXhDLGVBQVEsQ0FBQyxXQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBWSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sQ0FBQzthQUM1QyxTQUFTLEVBQUU7YUFDWCxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDYixNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM5QyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM5QyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoRCxDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLy8gdHNsaW50OmRpc2FibGU6bm9uLW51bGwtb3BlcmF0b3JcbmltcG9ydCB7IG9mIGFzIG9ic2VydmFibGVPZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgU2NoZW1hdGljQ29udGV4dCB9IGZyb20gJy4uL2VuZ2luZS9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSG9zdFRyZWUgfSBmcm9tICcuLi90cmVlL2hvc3QtdHJlZSc7XG5pbXBvcnQgeyBjYWxsUnVsZSB9IGZyb20gJy4vY2FsbCc7XG5pbXBvcnQgeyBtb3ZlIH0gZnJvbSAnLi9tb3ZlJztcblxuXG5jb25zdCBjb250ZXh0OiBTY2hlbWF0aWNDb250ZXh0ID0gbnVsbCAhO1xuXG5cbmRlc2NyaWJlKCdtb3ZlJywgKCkgPT4ge1xuICBpdCgnd29ya3Mgb24gbW92aW5nIHRoZSB3aG9sZSBzdHJ1Y3R1cmUnLCBkb25lID0+IHtcbiAgICBjb25zdCB0cmVlID0gbmV3IEhvc3RUcmVlKCk7XG4gICAgdHJlZS5jcmVhdGUoJ2EvYi9maWxlMScsICdoZWxsbyB3b3JsZCcpO1xuICAgIHRyZWUuY3JlYXRlKCdhL2IvZmlsZTInLCAnaGVsbG8gd29ybGQnKTtcbiAgICB0cmVlLmNyZWF0ZSgnYS9jL2ZpbGUzJywgJ2hlbGxvIHdvcmxkJyk7XG5cbiAgICBjYWxsUnVsZShtb3ZlKCdzdWInKSwgb2JzZXJ2YWJsZU9mKHRyZWUpLCBjb250ZXh0KVxuICAgICAgLnRvUHJvbWlzZSgpXG4gICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICBleHBlY3QocmVzdWx0LmV4aXN0cygnc3ViL2EvYi9maWxlMScpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmV4aXN0cygnc3ViL2EvYi9maWxlMicpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmV4aXN0cygnc3ViL2EvYy9maWxlMycpKS50b0JlKHRydWUpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGRvbmUsIGRvbmUuZmFpbCk7XG4gIH0pO1xuXG4gIGl0KCd3b3JrcyBvbiBtb3ZpbmcgYSBzdWJkaXJlY3Rvcnkgc3RydWN0dXJlJywgZG9uZSA9PiB7XG4gICAgY29uc3QgdHJlZSA9IG5ldyBIb3N0VHJlZSgpO1xuICAgIHRyZWUuY3JlYXRlKCdhL2IvZmlsZTEnLCAnaGVsbG8gd29ybGQnKTtcbiAgICB0cmVlLmNyZWF0ZSgnYS9iL2ZpbGUyJywgJ2hlbGxvIHdvcmxkJyk7XG4gICAgdHJlZS5jcmVhdGUoJ2EvYy9maWxlMycsICdoZWxsbyB3b3JsZCcpO1xuXG4gICAgY2FsbFJ1bGUobW92ZSgnYS9iJywgJ3N1YicpLCBvYnNlcnZhYmxlT2YodHJlZSksIGNvbnRleHQpXG4gICAgICAudG9Qcm9taXNlKClcbiAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuZXhpc3RzKCdzdWIvZmlsZTEnKSkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5leGlzdHMoJ3N1Yi9maWxlMicpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmV4aXN0cygnYS9jL2ZpbGUzJykpLnRvQmUodHJ1ZSk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oZG9uZSwgZG9uZS5mYWlsKTtcbiAgfSk7XG5cbiAgaXQoJ2JlY29tZXMgYSBub29wIHdpdGggaWRlbnRpY2FsIGZyb20gYW5kIHRvJywgZG9uZSA9PiB7XG4gICAgY29uc3QgdHJlZSA9IG5ldyBIb3N0VHJlZSgpO1xuICAgIHRyZWUuY3JlYXRlKCdhL2IvZmlsZTEnLCAnaGVsbG8gd29ybGQnKTtcbiAgICB0cmVlLmNyZWF0ZSgnYS9iL2ZpbGUyJywgJ2hlbGxvIHdvcmxkJyk7XG4gICAgdHJlZS5jcmVhdGUoJ2EvYy9maWxlMycsICdoZWxsbyB3b3JsZCcpO1xuXG4gICAgY2FsbFJ1bGUobW92ZSgnJyksIG9ic2VydmFibGVPZih0cmVlKSwgY29udGV4dClcbiAgICAgIC50b1Byb21pc2UoKVxuICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5leGlzdHMoJ2EvYi9maWxlMScpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmV4aXN0cygnYS9iL2ZpbGUyJykpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuZXhpc3RzKCdhL2MvZmlsZTMnKSkudG9CZSh0cnVlKTtcbiAgICAgIH0pXG4gICAgICAudGhlbihkb25lLCBkb25lLmZhaWwpO1xuICB9KTtcbn0pO1xuIl19