"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// tslint:disable:no-implicit-dependencies
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const host_1 = require("../../../core/src/virtual-fs/host");
const host_tree_1 = require("../tree/host-tree");
const static_1 = require("../tree/static");
describe('FileSystemSink', () => {
    it('works', done => {
        const host = new core_1.virtualFs.test.TestHost({
            '/hello': 'world',
            '/sub/directory/file2': '',
            '/sub/file1': '',
        });
        const tree = new host_tree_1.HostCreateTree(host);
        tree.create('/test', 'testing 1 2');
        const recorder = tree.beginUpdate('/test');
        recorder.insertLeft(8, 'testing ');
        tree.commitUpdate(recorder);
        const files = ['/hello', '/sub/directory/file2', '/sub/file1', '/test'];
        const treeFiles = [];
        tree.visit(path => treeFiles.push(path));
        treeFiles.sort();
        expect(treeFiles).toEqual(files);
        const outputHost = new core_1.virtualFs.test.TestHost();
        const sink = new schematics_1.HostSink(outputHost);
        sink.commit(static_1.optimize(tree))
            .toPromise()
            .then(() => {
            const tmpFiles = outputHost.files.sort();
            expect(tmpFiles).toEqual(files);
            expect(outputHost.sync.read(core_1.normalize('/test')).toString())
                .toBe('testing testing 1 2');
        })
            .then(done, done.fail);
    });
    describe('complex tests', () => {
        beforeEach(done => {
            // Commit a version of the tree.
            const host = new core_1.virtualFs.test.TestHost({
                '/file0': '/file0',
                '/sub/directory/file2': '/sub/directory/file2',
                '/sub/file1': '/sub/file1',
            });
            const tree = new host_tree_1.HostCreateTree(host);
            const outputHost = new core_1.virtualFs.test.TestHost();
            const sink = new schematics_1.HostSink(outputHost);
            sink.commit(static_1.optimize(tree))
                .toPromise()
                .then(done, done.fail);
        });
        it('can rename files', done => {
            const host = new core_1.virtualFs.test.TestHost({
                '/file0': '/file0',
            });
            const tree = new host_tree_1.HostTree(host);
            tree.rename('/file0', '/file1');
            const sink = new schematics_1.HostSink(host);
            sink.commit(static_1.optimize(tree))
                .toPromise()
                .then(() => {
                expect(host.sync.exists(core_1.normalize('/file0'))).toBe(false);
                expect(host.sync.exists(core_1.normalize('/file1'))).toBe(true);
            })
                .then(done, done.fail);
        });
        it('can rename nested files', done => {
            const host = new core_1.virtualFs.test.TestHost({
                '/sub/directory/file2': '',
            });
            const tree = new host_tree_1.HostTree(host);
            tree.rename('/sub/directory/file2', '/another-directory/file2');
            const sink = new schematics_1.HostSink(host);
            sink.commit(static_1.optimize(tree))
                .toPromise()
                .then(() => {
                expect(host.sync.exists(core_1.normalize('/sub/directory/file2'))).toBe(false);
                expect(host.sync.exists(core_1.normalize('/another-directory/file2'))).toBe(true);
            })
                .then(done, done.fail);
        });
        it('can delete and create the same file', done => {
            const host = new core_1.virtualFs.test.TestHost({
                '/file0': 'world',
            });
            const tree = new host_tree_1.HostTree(host);
            tree.delete('/file0');
            tree.create('/file0', 'hello');
            const sink = new schematics_1.HostSink(host);
            sink.commit(static_1.optimize(tree))
                .toPromise()
                .then(() => {
                expect(host.sync.read(core_1.normalize('/file0')).toString()).toBe('hello');
            })
                .then(done, done.fail);
        });
        it('can rename then create the same file', done => {
            const host = new core_1.virtualFs.test.TestHost({
                '/file0': 'world',
            });
            const tree = new host_tree_1.HostTree(host);
            tree.rename('/file0', '/file1');
            expect(tree.exists('/file0')).toBeFalsy();
            expect(tree.exists('/file1')).toBeTruthy();
            tree.create('/file0', 'hello');
            expect(tree.exists('/file0')).toBeTruthy();
            const sink = new schematics_1.HostSink(host);
            sink.commit(static_1.optimize(tree))
                .toPromise()
                .then(() => {
                expect(host.sync.read(core_1.normalize('/file0')).toString()).toBe('hello');
                expect(host_1.fileBufferToString(host.sync.read(core_1.normalize('/file1')))).toBe('world');
            })
                .then(done, done.fail);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,