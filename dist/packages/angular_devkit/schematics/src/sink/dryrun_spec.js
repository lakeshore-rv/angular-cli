"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// tslint:disable:no-implicit-dependencies
const core_1 = require("@angular-devkit/core");
const operators_1 = require("rxjs/operators");
const host_tree_1 = require("../tree/host-tree");
const static_1 = require("../tree/static");
const dryrun_1 = require("./dryrun");
const host = new core_1.virtualFs.test.TestHost({
    '/hello': '',
    '/sub/file1': '',
    '/sub/directory/file2': '',
});
describe('DryRunSink', () => {
    it('works when creating everything', done => {
        const tree = new host_tree_1.HostCreateTree(host);
        tree.create('/test', 'testing 1 2');
        const recorder = tree.beginUpdate('/test');
        recorder.insertLeft(8, 'testing ');
        tree.commitUpdate(recorder);
        tree.overwrite('/hello', 'world');
        const files = ['/hello', '/sub/directory/file2', '/sub/file1', '/test'];
        const treeFiles = [];
        tree.visit(path => treeFiles.push(path));
        treeFiles.sort();
        expect(treeFiles).toEqual(files.map(core_1.normalize));
        const sink = new dryrun_1.DryRunSink(new core_1.virtualFs.SimpleMemoryHost());
        sink.reporter.pipe(operators_1.toArray())
            .toPromise()
            .then(infos => {
            expect(infos.length).toBe(4);
            for (const info of infos) {
                expect(info.kind).toBe('create');
            }
        })
            .then(done, done.fail);
        sink.commit(static_1.optimize(tree))
            .toPromise().then(done, done.fail);
    });
    it('works with root', done => {
        const tree = new host_tree_1.HostTree(host);
        tree.create('/test', 'testing 1 2');
        const recorder = tree.beginUpdate('/test');
        recorder.insertLeft(8, 'testing ');
        tree.commitUpdate(recorder);
        tree.overwrite('/hello', 'world');
        const files = ['/hello', '/sub/directory/file2', '/sub/file1', '/test'];
        const treeFiles = [];
        tree.visit(path => treeFiles.push(path));
        treeFiles.sort();
        expect(treeFiles).toEqual(files.map(core_1.normalize));
        // Need to create this file on the filesystem, otherwise the commit phase will fail.
        const outputHost = new core_1.virtualFs.SimpleMemoryHost();
        outputHost.write(core_1.normalize('/hello'), core_1.virtualFs.stringToFileBuffer('')).subscribe();
        const sink = new dryrun_1.DryRunSink(outputHost);
        sink.reporter.pipe(operators_1.toArray())
            .toPromise()
            .then(infos => {
            expect(infos.map(x => x.kind)).toEqual(['create', 'update']);
        })
            .then(done, done.fail);
        sink.commit(static_1.optimize(tree))
            .toPromise().then(done, done.fail);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJ5cnVuX3NwZWMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2VybmllZGF2aXMvQ29kZS9hbmd1bGFyLWNsaS8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L3NjaGVtYXRpY3Mvc3JjL3NpbmsvZHJ5cnVuX3NwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7O0dBTUc7QUFDSCwwQ0FBMEM7QUFDMUMsK0NBQWtFO0FBQ2xFLDhDQUF5QztBQUN6QyxpREFBNkQ7QUFDN0QsMkNBQTBDO0FBQzFDLHFDQUFzQztBQUd0QyxNQUFNLElBQUksR0FBRyxJQUFJLGdCQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QyxRQUFRLEVBQUUsRUFBRTtJQUNaLFlBQVksRUFBRSxFQUFFO0lBQ2hCLHNCQUFzQixFQUFFLEVBQUU7Q0FDM0IsQ0FBQyxDQUFDO0FBR0gsUUFBUSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7SUFDMUIsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLElBQUksQ0FBQyxFQUFFO1FBQzFDLE1BQU0sSUFBSSxHQUFHLElBQUksMEJBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV0QyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNwQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFbEMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxRQUFRLEVBQUUsc0JBQXNCLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sU0FBUyxHQUFXLEVBQUUsQ0FBQztR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QUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUMvRCxDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV6QixJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDeEIsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8vIHRzbGludDpkaXNhYmxlOm5vLWltcGxpY2l0LWRlcGVuZGVuY2llc1xuaW1wb3J0IHsgUGF0aCwgbm9ybWFsaXplLCB2aXJ0dWFsRnMgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvY29yZSc7XG5pbXBvcnQgeyB0b0FycmF5IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSG9zdENyZWF0ZVRyZWUsIEhvc3RUcmVlIH0gZnJvbSAnLi4vdHJlZS9ob3N0LXRyZWUnO1xuaW1wb3J0IHsgb3B0aW1pemUgfSBmcm9tICcuLi90cmVlL3N0YXRpYyc7XG5pbXBvcnQgeyBEcnlSdW5TaW5rIH0gZnJvbSAnLi9kcnlydW4nO1xuXG5cbmNvbnN0IGhvc3QgPSBuZXcgdmlydHVhbEZzLnRlc3QuVGVzdEhvc3Qoe1xuICAnL2hlbGxvJzogJycsXG4gICcvc3ViL2ZpbGUxJzogJycsXG4gICcvc3ViL2RpcmVjdG9yeS9maWxlMic6ICcnLFxufSk7XG5cblxuZGVzY3JpYmUoJ0RyeVJ1blNpbmsnLCAoKSA9PiB7XG4gIGl0KCd3b3JrcyB3aGVuIGNyZWF0aW5nIGV2ZXJ5dGhpbmcnLCBkb25lID0+IHtcbiAgICBjb25zdCB0cmVlID0gbmV3IEhvc3RDcmVhdGVUcmVlKGhvc3QpO1xuXG4gICAgdHJlZS5jcmVhdGUoJy90ZXN0JywgJ3Rlc3RpbmcgMSAyJyk7XG4gICAgY29uc3QgcmVjb3JkZXIgPSB0cmVlLmJlZ2luVXBkYXRlKCcvdGVzdCcpO1xuICAgIHJlY29yZGVyLmluc2VydExlZnQoOCwgJ3Rlc3RpbmcgJyk7XG4gICAgdHJlZS5jb21taXRVcGRhdGUocmVjb3JkZXIpO1xuICAgIHRyZWUub3ZlcndyaXRlKCcvaGVsbG8nLCAnd29ybGQnKTtcblxuICAgIGNvbnN0IGZpbGVzID0gWycvaGVsbG8nLCAnL3N1Yi9kaXJlY3RvcnkvZmlsZTInLCAnL3N1Yi9maWxlMScsICcvdGVzdCddO1xuICAgIGNvbnN0IHRyZWVGaWxlczogUGF0aFtdID0gW107XG4gICAgdHJlZS52aXNpdChwYXRoID0+IHRyZWVGaWxlcy5wdXNoKHBhdGgpKTtcbiAgICB0cmVlRmlsZXMuc29ydCgpO1xuICAgIGV4cGVjdCh0cmVlRmlsZXMpLnRvRXF1YWwoZmlsZXMubWFwKG5vcm1hbGl6ZSkpO1xuXG4gICAgY29uc3Qgc2luayA9IG5ldyBEcnlSdW5TaW5rKG5ldyB2aXJ0dWFsRnMuU2ltcGxlTWVtb3J5SG9zdCgpKTtcbiAgICBzaW5rLnJlcG9ydGVyLnBpcGUodG9BcnJheSgpKVxuICAgICAgLnRvUHJvbWlzZSgpXG4gICAgICAudGhlbihpbmZvcyA9PiB7XG4gICAgICAgIGV4cGVjdChpbmZvcy5sZW5ndGgpLnRvQmUoNCk7XG4gICAgICAgIGZvciAoY29uc3QgaW5mbyBvZiBpbmZvcykge1xuICAgICAgICAgIGV4cGVjdChpbmZvLmtpbmQpLnRvQmUoJ2NyZWF0ZScpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLnRoZW4oZG9uZSwgZG9uZS5mYWlsKTtcblxuICAgIHNpbmsuY29tbWl0KG9wdGltaXplKHRyZWUpKVxuICAgICAgLnRvUHJvbWlzZSgpLnRoZW4oZG9uZSwgZG9uZS5mYWlsKTtcbiAgfSk7XG5cbiAgaXQoJ3dvcmtzIHdpdGggcm9vdCcsIGRvbmUgPT4ge1xuICAgIGNvbnN0IHRyZWUgPSBuZXcgSG9zdFRyZWUoaG9zdCk7XG5cbiAgICB0cmVlLmNyZWF0ZSgnL3Rlc3QnLCAndGVzdGluZyAxIDInKTtcbiAgICBjb25zdCByZWNvcmRlciA9IHRyZWUuYmVnaW5VcGRhdGUoJy90ZXN0Jyk7XG4gICAgcmVjb3JkZXIuaW5zZXJ0TGVmdCg4LCAndGVzdGluZyAnKTtcbiAgICB0cmVlLmNvbW1pdFVwZGF0ZShyZWNvcmRlcik7XG4gICAgdHJlZS5vdmVyd3JpdGUoJy9oZWxsbycsICd3b3JsZCcpO1xuXG4gICAgY29uc3QgZmlsZXMgPSBbJy9oZWxsbycsICcvc3ViL2RpcmVjdG9yeS9maWxlMicsICcvc3ViL2ZpbGUxJywgJy90ZXN0J107XG4gICAgY29uc3QgdHJlZUZpbGVzOiBQYXRoW10gPSBbXTtcbiAgICB0cmVlLnZpc2l0KHBhdGggPT4gdHJlZUZpbGVzLnB1c2gocGF0aCkpO1xuICAgIHRyZWVGaWxlcy5zb3J0KCk7XG4gICAgZXhwZWN0KHRyZWVGaWxlcykudG9FcXVhbChmaWxlcy5tYXAobm9ybWFsaXplKSk7XG5cbiAgICAvLyBOZWVkIHRvIGNyZWF0ZSB0aGlzIGZpbGUgb24gdGhlIGZpbGVzeXN0ZW0sIG90aGVyd2lzZSB0aGUgY29tbWl0IHBoYXNlIHdpbGwgZmFpbC5cbiAgICBjb25zdCBvdXRwdXRIb3N0ID0gbmV3IHZpcnR1YWxGcy5TaW1wbGVNZW1vcnlIb3N0KCk7XG4gICAgb3V0cHV0SG9zdC53cml0ZShub3JtYWxpemUoJy9oZWxsbycpLCB2aXJ0dWFsRnMuc3RyaW5nVG9GaWxlQnVmZmVyKCcnKSkuc3Vic2NyaWJlKCk7XG5cbiAgICBjb25zdCBzaW5rID0gbmV3IERyeVJ1blNpbmsob3V0cHV0SG9zdCk7XG4gICAgc2luay5yZXBvcnRlci5waXBlKHRvQXJyYXkoKSlcbiAgICAgIC50b1Byb21pc2UoKVxuICAgICAgLnRoZW4oaW5mb3MgPT4ge1xuICAgICAgICBleHBlY3QoaW5mb3MubWFwKHggPT4geC5raW5kKSkudG9FcXVhbChbJ2NyZWF0ZScsICd1cGRhdGUnXSk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oZG9uZSwgZG9uZS5mYWlsKTtcblxuICAgIHNpbmsuY29tbWl0KG9wdGltaXplKHRyZWUpKVxuICAgICAgLnRvUHJvbWlzZSgpLnRoZW4oZG9uZSwgZG9uZS5mYWlsKTtcbiAgfSk7XG59KTtcbiJdfQ==