"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// tslint:disable:non-null-operator
const core_1 = require("@angular-devkit/core");
function testTreeVisit({ createTree, sets }) {
    sets.forEach(({ name, files: paths, visits, focus: focusSet }) => {
        visits.forEach(({ root, expected, exception, focus }) => {
            if (expected == null) {
                expected = paths;
            }
            const that = focusSet || focus ? fit : it;
            that(`can visit: ${name} from ${root}`, () => {
                const tree = createTree(paths);
                const normalizedRoot = core_1.normalize(root);
                if (exception != null) {
                    expect(() => tree.getDir(normalizedRoot).visit(() => { }))
                        .toThrow(exception({ path: normalizedRoot }));
                    return;
                }
                const allPaths = [];
                tree.getDir(normalizedRoot)
                    .visit((path, entry) => {
                    expect(entry).not.toBeNull();
                    expect(entry.content.toString()).toEqual(path);
                    allPaths.push(path);
                });
                expect(allPaths).toEqual(expected);
            });
        });
    });
}
exports.testTreeVisit = testTreeVisit;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uX3NwZWMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2VybmllZGF2aXMvQ29kZS9hbmd1bGFyLWNsaS8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L3NjaGVtYXRpY3Mvc3JjL3RyZWUvY29tbW9uX3NwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7O0dBTUc7QUFDSCxtQ0FBbUM7QUFDbkMsK0NBQWlEO0FBdUJqRCx1QkFBOEIsRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFnQjtJQUM3RCxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBQyxFQUFFLEVBQUU7UUFDN0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFDLEVBQUUsRUFBRTtZQUNwRCxJQUFJLFFBQVEsSUFBSSxJQUFJLEVBQUU7Z0JBQUUsUUFBUSxHQUFHLEtBQUssQ0FBQzthQUFFO1lBRTNDLE1BQU0sSUFBSSxHQUFHLFFBQVEsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzFDLElBQUksQ0FBQyxjQUFjLElBQUksU0FBUyxJQUFJLEVBQUUsRUFBRSxHQUFHLEVBQUU7Z0JBQzNDLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFFL0IsTUFBTSxjQUFjLEdBQUcsZ0JBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFFdkMsSUFBSSxTQUFTLElBQUksSUFBSSxFQUFFO29CQUNyQixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDLENBQUM7eUJBQ3hELE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBQyxJQUFJLEVBQUUsY0FBYyxFQUFDLENBQUMsQ0FBQyxDQUFDO29CQUU1QyxPQUFPO2lCQUNSO2dCQUVELE1BQU0sUUFBUSxHQUFhLEVBQUUsQ0FBQztnQkFDOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7cUJBQ3hCLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtvQkFDckIsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztvQkFDN0IsTUFBTSxDQUFDLEtBQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ2hELFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3RCLENBQUMsQ0FBQyxDQUFDO2dCQUVMLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUyxDQUFDLENBQUM7WUFDdEMsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQTlCRCxzQ0E4QkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vLyB0c2xpbnQ6ZGlzYWJsZTpub24tbnVsbC1vcGVyYXRvclxuaW1wb3J0IHsgbm9ybWFsaXplIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2NvcmUnO1xuaW1wb3J0IHsgVHJlZSB9IGZyb20gJy4vaW50ZXJmYWNlJztcblxuXG5leHBvcnQgaW50ZXJmYWNlIFZpc2l0VGVzdFZpc2l0U3BlYyB7XG4gIHJvb3Q6IHN0cmluZztcbiAgZXhwZWN0ZWQ/OiBzdHJpbmdbXTtcbiAgZXhjZXB0aW9uPzogKHNwZWM6IHtwYXRoOiBzdHJpbmd9KSA9PiBFcnJvcjtcbiAgZm9jdXM/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZpc2l0VGVzdFNldCB7XG4gIG5hbWU6IHN0cmluZztcbiAgZmlsZXM6IHN0cmluZ1tdO1xuICB2aXNpdHM6IFZpc2l0VGVzdFZpc2l0U3BlY1tdO1xuICBmb2N1cz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmlzaXRUZXN0U3BlYyB7XG4gIGNyZWF0ZVRyZWU6IChwYXRoczogc3RyaW5nW10pID0+IFRyZWU7XG4gIHNldHM6IFZpc2l0VGVzdFNldFtdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGVzdFRyZWVWaXNpdCh7Y3JlYXRlVHJlZSwgc2V0c306IFZpc2l0VGVzdFNwZWMpIHtcbiAgc2V0cy5mb3JFYWNoKCh7bmFtZSwgZmlsZXM6IHBhdGhzLCB2aXNpdHMsIGZvY3VzOiBmb2N1c1NldH0pID0+IHtcbiAgICB2aXNpdHMuZm9yRWFjaCgoe3Jvb3QsIGV4cGVjdGVkLCBleGNlcHRpb24sIGZvY3VzfSkgPT4ge1xuICAgICAgaWYgKGV4cGVjdGVkID09IG51bGwpIHsgZXhwZWN0ZWQgPSBwYXRoczsgfVxuXG4gICAgICBjb25zdCB0aGF0ID0gZm9jdXNTZXQgfHwgZm9jdXMgPyBmaXQgOiBpdDtcbiAgICAgIHRoYXQoYGNhbiB2aXNpdDogJHtuYW1lfSBmcm9tICR7cm9vdH1gLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRyZWUgPSBjcmVhdGVUcmVlKHBhdGhzKTtcblxuICAgICAgICBjb25zdCBub3JtYWxpemVkUm9vdCA9IG5vcm1hbGl6ZShyb290KTtcblxuICAgICAgICBpZiAoZXhjZXB0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICBleHBlY3QoKCkgPT4gdHJlZS5nZXREaXIobm9ybWFsaXplZFJvb3QpLnZpc2l0KCgpID0+IHt9KSlcbiAgICAgICAgICAudG9UaHJvdyhleGNlcHRpb24oe3BhdGg6IG5vcm1hbGl6ZWRSb290fSkpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYWxsUGF0aHM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIHRyZWUuZ2V0RGlyKG5vcm1hbGl6ZWRSb290KVxuICAgICAgICAgIC52aXNpdCgocGF0aCwgZW50cnkpID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChlbnRyeSkubm90LnRvQmVOdWxsKCk7XG4gICAgICAgICAgICBleHBlY3QoZW50cnkhLmNvbnRlbnQudG9TdHJpbmcoKSkudG9FcXVhbChwYXRoKTtcbiAgICAgICAgICAgIGFsbFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZXhwZWN0KGFsbFBhdGhzKS50b0VxdWFsKGV4cGVjdGVkISk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXX0=