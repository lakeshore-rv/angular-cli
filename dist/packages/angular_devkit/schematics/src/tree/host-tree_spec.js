"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// tslint:disable:no-any
const core_1 = require("@angular-devkit/core");
const host_tree_1 = require("./host-tree");
const virtual_1 = require("./virtual");
describe('HostTree', () => {
    it('is backward compatible with VirtualTree', () => {
        const fs = new core_1.virtualFs.test.TestHost({
            '/file1': '',
        });
        const tree = new host_tree_1.HostTree(fs);
        const vTree = new virtual_1.VirtualTree();
        tree.create('/file2', '');
        vTree.create('/file3', '');
        // This is the behaviour of 6.0.x merge (returning the branch).
        // We need to be compatible with it.
        const tree2 = tree.branch();
        tree2.merge(vTree);
        const actions = tree2.actions;
        expect(actions).toEqual([
            jasmine.objectContaining({ kind: 'c', path: core_1.normalize('/file2') }),
            jasmine.objectContaining({ kind: 'c', path: core_1.normalize('/file3') }),
        ]);
    });
});
describe('FilterHostTree', () => {
    it('works', () => {
        const tree = new host_tree_1.HostTree();
        tree.create('/file1', '');
        tree.create('/file2', '');
        tree.create('/file3', '');
        const filtered = new host_tree_1.FilterHostTree(tree, p => p != '/file2');
        const filteredFiles = [];
        filtered.visit(path => filteredFiles.push(path));
        filteredFiles.sort();
        expect(filteredFiles).toEqual(['/file1', '/file3'].map(core_1.normalize));
        expect(filtered.actions.length).toEqual(2);
    });
    it('works with two filters', () => {
        const tree = new host_tree_1.HostTree();
        tree.create('/file1', '');
        tree.create('/file2', '');
        tree.create('/file3', '');
        const filtered = new host_tree_1.FilterHostTree(tree, p => p != '/file2');
        const filtered2 = new host_tree_1.FilterHostTree(filtered, p => p != '/file3');
        const filteredFiles = [];
        filtered2.visit(path => filteredFiles.push(path));
        filteredFiles.sort();
        expect(filteredFiles).toEqual(['/file1'].map(core_1.normalize));
        expect(filtered2.actions.map(a => a.kind)).toEqual(['c']);
    });
    it('works with underlying files', () => {
        const fs = new core_1.virtualFs.test.TestHost({
            '/file1': '',
        });
        const tree = new host_tree_1.HostTree(fs);
        tree.create('/file2', '');
        tree.create('/file3', '');
        const filtered = new host_tree_1.FilterHostTree(tree, p => p != '/file2');
        const filtered2 = new host_tree_1.FilterHostTree(filtered, p => p != '/file3');
        const filteredFiles = [];
        filtered2.visit(path => filteredFiles.push(path));
        filteredFiles.sort();
        expect(filteredFiles).toEqual(['/file1'].map(core_1.normalize));
        expect(filtered2.actions.map(a => a.kind)).toEqual([]);
    });
    it('works with created paths and files', () => {
        const tree = new host_tree_1.HostTree();
        tree.create('/dir1/file1', '');
        tree.create('/dir2/file2', '');
        tree.create('/file3', '');
        const filtered = new host_tree_1.FilterHostTree(tree, p => p != '/dir2/file2');
        const filtered2 = new host_tree_1.FilterHostTree(filtered, p => p != '/file3');
        const filteredFiles = [];
        filtered2.visit(path => filteredFiles.push(path));
        filteredFiles.sort();
        expect(filteredFiles).toEqual(['/dir1/file1'].map(core_1.normalize));
        expect(filtered2.actions.map(a => a.kind)).toEqual(['c']);
    });
    it('works with underlying paths and files', () => {
        const fs = new core_1.virtualFs.test.TestHost({
            '/dir1/file1': '',
            '/dir2/file2': '',
        });
        const tree = new host_tree_1.HostTree(fs);
        tree.create('/file3', '');
        const filtered = new host_tree_1.FilterHostTree(tree, p => p != '/dir2/file2');
        const filtered2 = new host_tree_1.FilterHostTree(filtered, p => p != '/file3');
        const filteredFiles = [];
        filtered2.visit(path => filteredFiles.push(path));
        filteredFiles.sort();
        expect(filteredFiles).toEqual(['/dir1/file1'].map(core_1.normalize));
        expect(filtered2.actions.map(a => a.kind)).toEqual([]);
    });
});
//# sourceMappingURL=data:application/json;base64,