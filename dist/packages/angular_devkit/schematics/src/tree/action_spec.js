"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const core_1 = require("@angular-devkit/core");
const action_1 = require("./action");
describe('Action', () => {
    describe('optimize', () => {
        it('works with create', () => {
            const actions = new action_1.ActionList;
            actions.create(core_1.normalize('/a/b'), Buffer.from('1'));
            actions.create(core_1.normalize('/a/c'), Buffer.from('2'));
            actions.create(core_1.normalize('/a/c'), Buffer.from('3'));
            expect(actions.length).toBe(3);
            actions.optimize();
            expect(actions.length).toBe(2);
        });
        it('works with overwrite', () => {
            const actions = new action_1.ActionList;
            actions.create(core_1.normalize('/a/b'), Buffer.from('1'));
            actions.create(core_1.normalize('/a/c'), Buffer.from('2'));
            actions.overwrite(core_1.normalize('/a/c'), Buffer.from('3'));
            actions.overwrite(core_1.normalize('/a/b'), Buffer.from('4'));
            expect(actions.length).toBe(4);
            actions.optimize();
            expect(actions.length).toBe(2);
        });
        it('works with cloning a list', () => {
            const actions = new action_1.ActionList;
            actions.create(core_1.normalize('/a/b'), Buffer.from('1'));
            actions.create(core_1.normalize('/a/c'), Buffer.from('2'));
            actions.overwrite(core_1.normalize('/a/c'), Buffer.from('3'));
            actions.overwrite(core_1.normalize('/a/b'), Buffer.from('4'));
            actions.create(core_1.normalize('/a/d'), Buffer.from('5'));
            const actions2 = new action_1.ActionList;
            actions.forEach(x => actions2.push(x));
            expect(actions.length).toBe(5);
            expect(actions2.length).toBe(5);
            actions.optimize();
            expect(actions.length).toBe(3);
            expect(actions2.length).toBe(5);
            actions2.optimize();
            expect(actions2.length).toBe(3);
        });
        it('handles edge cases (1)', () => {
            const actions = new action_1.ActionList;
            actions.create(core_1.normalize('/test'), Buffer.from('1'));
            actions.overwrite(core_1.normalize('/test'), Buffer.from('3'));
            actions.overwrite(core_1.normalize('/hello'), Buffer.from('2'));
            actions.overwrite(core_1.normalize('/test'), Buffer.from('4'));
            const actions2 = new action_1.ActionList;
            actions.forEach(x => actions2.push(x));
            expect(actions.length).toBe(4);
            expect(actions2.length).toBe(4);
            actions.optimize();
            expect(actions.length).toBe(2);
            expect(actions2.length).toBe(4);
            actions2.optimize();
            expect(actions2.length).toBe(2);
        });
        it('handles edge cases (2)', () => {
            const actions = new action_1.ActionList;
            actions.create(core_1.normalize('/test'), Buffer.from('1'));
            actions.rename(core_1.normalize('/test'), core_1.normalize('/test1'));
            actions.overwrite(core_1.normalize('/test1'), Buffer.from('2'));
            actions.rename(core_1.normalize('/test1'), core_1.normalize('/test2'));
            actions.optimize();
            expect(actions.length).toBe(1);
            expect(actions.get(0)).toEqual(jasmine.objectContaining({ kind: 'c', path: core_1.normalize('/test2') }));
        });
        it('handles edge cases (3)', () => {
            const actions = new action_1.ActionList;
            actions.rename(core_1.normalize('/test'), core_1.normalize('/test1'));
            actions.overwrite(core_1.normalize('/test1'), Buffer.from('2'));
            actions.rename(core_1.normalize('/test1'), core_1.normalize('/test2'));
            actions.optimize();
            expect(actions.length).toBe(2);
            expect(actions.get(0)).toEqual(jasmine.objectContaining({
                kind: 'r', path: core_1.normalize('/test'), to: core_1.normalize('/test2'),
            }));
            expect(actions.get(1)).toEqual(jasmine.objectContaining({ kind: 'o', path: core_1.normalize('/test2') }));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,