"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const path = require("path");
const _1 = require(".");
const export_ref_1 = require("./export-ref");
describe('ExportStringRef', () => {
    it('works', () => {
        // META
        const ref = new export_ref_1.ExportStringRef('./export-ref#ExportStringRef', __dirname);
        expect(ref.ref).toBe(export_ref_1.ExportStringRef);
        expect(ref.path).toBe(__dirname);
        expect(ref.module).toBe(path.join(__dirname, 'export-ref.ts'));
    });
    it('works without an inner ref', () => {
        // META
        const ref = new export_ref_1.ExportStringRef(path.join(__dirname, 'export-ref'));
        expect(ref.ref).toBe(undefined);
        expect(ref.path).toBe(__dirname);
        expect(ref.module).toBe(path.join(__dirname, 'export-ref.ts'));
    });
    it('returns the exports', () => {
        // META
        const ref = new export_ref_1.ExportStringRef('./export-ref#ExportStringRef', __dirname, false);
        expect(ref.ref).toEqual({ ExportStringRef: export_ref_1.ExportStringRef });
        expect(ref.path).toBe(__dirname);
        expect(ref.module).toBe(path.join(__dirname, 'export-ref.ts'));
    });
    it('works on package names', () => {
        // META
        const ref = new export_ref_1.ExportStringRef('@angular-devkit/schematics/tools#CollectionCannotBeResolvedException');
        expect(ref.ref).toEqual(_1.CollectionCannotBeResolvedException);
        expect(ref.path).toBe(__dirname);
        expect(ref.module).toBe(path.join(__dirname, 'index.ts'));
    });
    it('works on directory', () => {
        // META
        const ref = new export_ref_1.ExportStringRef(__dirname);
        expect(ref.path).toBe(__dirname);
        expect(ref.module).toBe(path.join(__dirname, 'index.ts'));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0LXJlZl9zcGVjLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9lcm5pZWRhdmlzL0NvZGUvYW5ndWxhci1jbGkvIiwic291cmNlcyI6WyJwYWNrYWdlcy9hbmd1bGFyX2RldmtpdC9zY2hlbWF0aWNzL3Rvb2xzL2V4cG9ydC1yZWZfc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7R0FNRztBQUNILDZCQUE2QjtBQUM3Qix3QkFBd0Q7QUFDeEQsNkNBQStDO0FBRy9DLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7SUFDL0IsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7UUFDZixPQUFPO1FBQ1AsTUFBTSxHQUFHLEdBQUcsSUFBSSw0QkFBZSxDQUFDLDhCQUE4QixFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzNFLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLDRCQUFlLENBQUMsQ0FBQztRQUN0QyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRTtRQUNwQyxPQUFPO1FBQ1AsTUFBTSxHQUFHLEdBQUcsSUFBSSw0QkFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDcEUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDaEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUU7UUFDN0IsT0FBTztRQUNQLE1BQU0sR0FBRyxHQUFHLElBQUksNEJBQWUsQ0FBQyw4QkFBOEIsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEYsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxlQUFlLEVBQWYsNEJBQWUsRUFBRSxDQUFDLENBQUM7UUFDN0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUU7UUFDaEMsT0FBTztRQUNQLE1BQU0sR0FBRyxHQUFHLElBQUksNEJBQWUsQ0FDN0Isc0VBQXNFLENBQ3ZFLENBQUM7UUFDRixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxzQ0FBbUMsQ0FBQyxDQUFDO1FBQzdELE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFO1FBQzVCLE9BQU87UUFDUCxNQUFNLEdBQUcsR0FBRyxJQUFJLDRCQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IENvbGxlY3Rpb25DYW5ub3RCZVJlc29sdmVkRXhjZXB0aW9uIH0gZnJvbSAnLic7XG5pbXBvcnQgeyBFeHBvcnRTdHJpbmdSZWYgfSBmcm9tICcuL2V4cG9ydC1yZWYnO1xuXG5cbmRlc2NyaWJlKCdFeHBvcnRTdHJpbmdSZWYnLCAoKSA9PiB7XG4gIGl0KCd3b3JrcycsICgpID0+IHtcbiAgICAvLyBNRVRBXG4gICAgY29uc3QgcmVmID0gbmV3IEV4cG9ydFN0cmluZ1JlZignLi9leHBvcnQtcmVmI0V4cG9ydFN0cmluZ1JlZicsIF9fZGlybmFtZSk7XG4gICAgZXhwZWN0KHJlZi5yZWYpLnRvQmUoRXhwb3J0U3RyaW5nUmVmKTtcbiAgICBleHBlY3QocmVmLnBhdGgpLnRvQmUoX19kaXJuYW1lKTtcbiAgICBleHBlY3QocmVmLm1vZHVsZSkudG9CZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnZXhwb3J0LXJlZi50cycpKTtcbiAgfSk7XG5cbiAgaXQoJ3dvcmtzIHdpdGhvdXQgYW4gaW5uZXIgcmVmJywgKCkgPT4ge1xuICAgIC8vIE1FVEFcbiAgICBjb25zdCByZWYgPSBuZXcgRXhwb3J0U3RyaW5nUmVmKHBhdGguam9pbihfX2Rpcm5hbWUsICdleHBvcnQtcmVmJykpO1xuICAgIGV4cGVjdChyZWYucmVmKS50b0JlKHVuZGVmaW5lZCk7XG4gICAgZXhwZWN0KHJlZi5wYXRoKS50b0JlKF9fZGlybmFtZSk7XG4gICAgZXhwZWN0KHJlZi5tb2R1bGUpLnRvQmUocGF0aC5qb2luKF9fZGlybmFtZSwgJ2V4cG9ydC1yZWYudHMnKSk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIHRoZSBleHBvcnRzJywgKCkgPT4ge1xuICAgIC8vIE1FVEFcbiAgICBjb25zdCByZWYgPSBuZXcgRXhwb3J0U3RyaW5nUmVmKCcuL2V4cG9ydC1yZWYjRXhwb3J0U3RyaW5nUmVmJywgX19kaXJuYW1lLCBmYWxzZSk7XG4gICAgZXhwZWN0KHJlZi5yZWYpLnRvRXF1YWwoeyBFeHBvcnRTdHJpbmdSZWYgfSk7XG4gICAgZXhwZWN0KHJlZi5wYXRoKS50b0JlKF9fZGlybmFtZSk7XG4gICAgZXhwZWN0KHJlZi5tb2R1bGUpLnRvQmUocGF0aC5qb2luKF9fZGlybmFtZSwgJ2V4cG9ydC1yZWYudHMnKSk7XG4gIH0pO1xuXG4gIGl0KCd3b3JrcyBvbiBwYWNrYWdlIG5hbWVzJywgKCkgPT4ge1xuICAgIC8vIE1FVEFcbiAgICBjb25zdCByZWYgPSBuZXcgRXhwb3J0U3RyaW5nUmVmKFxuICAgICAgJ0Bhbmd1bGFyLWRldmtpdC9zY2hlbWF0aWNzL3Rvb2xzI0NvbGxlY3Rpb25DYW5ub3RCZVJlc29sdmVkRXhjZXB0aW9uJyxcbiAgICApO1xuICAgIGV4cGVjdChyZWYucmVmKS50b0VxdWFsKENvbGxlY3Rpb25DYW5ub3RCZVJlc29sdmVkRXhjZXB0aW9uKTtcbiAgICBleHBlY3QocmVmLnBhdGgpLnRvQmUoX19kaXJuYW1lKTtcbiAgICBleHBlY3QocmVmLm1vZHVsZSkudG9CZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnaW5kZXgudHMnKSk7XG4gIH0pO1xuXG4gIGl0KCd3b3JrcyBvbiBkaXJlY3RvcnknLCAoKSA9PiB7XG4gICAgLy8gTUVUQVxuICAgIGNvbnN0IHJlZiA9IG5ldyBFeHBvcnRTdHJpbmdSZWYoX19kaXJuYW1lKTtcbiAgICBleHBlY3QocmVmLnBhdGgpLnRvQmUoX19kaXJuYW1lKTtcbiAgICBleHBlY3QocmVmLm1vZHVsZSkudG9CZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnaW5kZXgudHMnKSk7XG4gIH0pO1xufSk7XG4iXX0=