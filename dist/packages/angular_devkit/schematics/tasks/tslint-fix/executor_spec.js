"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// tslint:disable:no-implicit-dependencies
const core_1 = require("@angular-devkit/core");
const testing_1 = require("@angular-devkit/core/node/testing");
const schematics_1 = require("@angular-devkit/schematics");
const testing_2 = require("@angular-devkit/schematics/testing");
const path = require("path");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
describe('TsLintTaskExecutor', () => {
    it('works with config object', done => {
        const testRunner = new testing_2.SchematicTestRunner('@_/test', path.join(__dirname, 'test/collection.json'));
        const host = new testing_1.TempScopedNodeJsSyncHost();
        host.write(core_1.normalize('/file.ts'), core_1.virtualFs.stringToFileBuffer(`
      export function() { console.log(1); }
    `)).subscribe();
        const tree = new testing_2.UnitTestTree(new schematics_1.HostTree(host));
        testRunner.runSchematicAsync('run-task', null, tree)
            .toPromise().then(done, done.fail);
    });
    it('shows errors with config object', done => {
        const testRunner = new testing_2.SchematicTestRunner('@_/test', path.join(__dirname, 'test/collection.json'));
        const host = new testing_1.TempScopedNodeJsSyncHost();
        host.write(core_1.normalize('/file.ts'), core_1.virtualFs.stringToFileBuffer(`
      // ${'...MORE_THAN_100'.repeat(10)}
      export function() { console.log(1); }
    `)).subscribe();
        const tree = new testing_2.UnitTestTree(new schematics_1.HostTree(host));
        const messages = [];
        let error = false;
        rxjs_1.concat(testRunner.runSchematicAsync('run-task', null, tree), new rxjs_1.Observable(obs => {
            process.chdir(core_1.getSystemPath(host.root));
            testRunner.logger.subscribe(x => messages.push(x.message));
            testRunner.engine.executePostTasks().subscribe(obs);
        }).pipe(operators_1.catchError(() => {
            error = true;
            return [];
        })), new rxjs_1.Observable(obs => {
            expect(messages.find(msg => /\b80\b/.test(msg))).not.toBeUndefined();
            expect(error).toBe(true);
            obs.complete();
        })).toPromise().then(done, done.fail);
    });
    it('supports custom rules in the project (pass)', done => {
        const testRunner = new testing_2.SchematicTestRunner('@_/test', path.join(__dirname, 'test/collection.json'));
        const host = new testing_1.TempScopedNodeJsSyncHost();
        host.write(core_1.normalize('/file.ts'), core_1.virtualFs.stringToFileBuffer(`
      console.log('hello world');
    `)).subscribe();
        const tree = new testing_2.UnitTestTree(new schematics_1.HostTree(host));
        const messages = [];
        rxjs_1.concat(testRunner.runSchematicAsync('custom-rule', { shouldPass: true }, tree), new rxjs_1.Observable(obs => {
            process.chdir(core_1.getSystemPath(host.root));
            testRunner.logger.subscribe(x => messages.push(x.message));
            testRunner.engine.executePostTasks().subscribe(obs);
        })).toPromise().then(done, done.fail);
    });
    it('supports custom rules in the project (fail)', done => {
        const testRunner = new testing_2.SchematicTestRunner('@_/test', path.join(__dirname, 'test/collection.json'));
        const host = new testing_1.TempScopedNodeJsSyncHost();
        host.write(core_1.normalize('/file.ts'), core_1.virtualFs.stringToFileBuffer(`
      console.log('hello world');
    `)).subscribe();
        const tree = new testing_2.UnitTestTree(new schematics_1.HostTree(host));
        const messages = [];
        let error = false;
        rxjs_1.concat(testRunner.runSchematicAsync('custom-rule', { shouldPass: false }, tree), new rxjs_1.Observable(obs => {
            process.chdir(core_1.getSystemPath(host.root));
            testRunner.logger.subscribe(x => messages.push(x.message));
            testRunner.engine.executePostTasks().subscribe(obs);
        }).pipe(operators_1.catchError(() => {
            error = true;
            return [];
        })), new rxjs_1.Observable(obs => {
            expect(messages.find(msg => /\bcustom-rule fail\b/.test(msg))).not.toBeUndefined();
            expect(error).toBe(true);
            obs.complete();
        })).toPromise().then(done, done.fail);
    });
});
//# sourceMappingURL=data:application/json;base64,