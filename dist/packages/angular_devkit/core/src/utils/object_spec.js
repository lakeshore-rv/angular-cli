"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// tslint:disable:no-any
const object_1 = require("./object");
describe('object', () => {
    describe('deepCopy', () => {
        it('works with empty', () => {
            const data = {};
            expect(object_1.deepCopy(data)).toEqual(data);
        });
        it('works with objects', () => {
            const data = { a: 1, b: { c: 'hello' } };
            expect(object_1.deepCopy(data)).toEqual(data);
        });
        it('works with null', () => {
            const data = null;
            expect(object_1.deepCopy(data)).toEqual(data);
        });
        it('works with number', () => {
            const data = 1;
            expect(object_1.deepCopy(data)).toEqual(data);
        });
        it('works with simple classes', () => {
            class Data {
                constructor(_x = 1, _y = 2, _z = 3) {
                    this._x = _x;
                    this._y = _y;
                    this._z = _z;
                }
            }
            const data = new Data();
            expect(object_1.deepCopy(data)).toEqual(data);
            expect(object_1.deepCopy(data) instanceof Data).toBe(true);
        });
        it('works with circular objects', () => {
            const data1 = { a: 1 };
            const data = { b: data1 };
            data1['circular'] = data;
            const result = object_1.deepCopy(data);
            expect(result.b.a).toBe(1);
            expect(result.b.circular.b.a).toBe(1);
            expect(result.b).not.toBe(data1);
            expect(result.b).toBe(result.b.circular.b);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0X3NwZWMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2VybmllZGF2aXMvQ29kZS9hbmd1bGFyLWNsaS8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L2NvcmUvc3JjL3V0aWxzL29iamVjdF9zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7OztHQU1HO0FBQ0gsd0JBQXdCO0FBQ3hCLHFDQUFvQztBQUVwQyxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtJQUN0QixRQUFRLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtRQUN4QixFQUFFLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO1lBQzFCLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNoQixNQUFNLENBQUMsaUJBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7WUFDNUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDO1lBQ3pDLE1BQU0sQ0FBQyxpQkFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtZQUN6QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUM7WUFDbEIsTUFBTSxDQUFDLGlCQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO1lBQzNCLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQztZQUNmLE1BQU0sQ0FBQyxpQkFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtZQUNuQztnQkFDRSxZQUFvQixLQUFLLENBQUMsRUFBWSxLQUFLLENBQUMsRUFBUyxLQUFLLENBQUM7b0JBQXZDLE9BQUUsR0FBRixFQUFFLENBQUk7b0JBQVksT0FBRSxHQUFGLEVBQUUsQ0FBSTtvQkFBUyxPQUFFLEdBQUYsRUFBRSxDQUFJO2dCQUFHLENBQUM7YUFDaEU7WUFDRCxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1lBQ3hCLE1BQU0sQ0FBQyxpQkFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sQ0FBQyxpQkFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUU7WUFDckMsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFTLENBQUM7WUFDOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUM7WUFDMUIsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUV6QixNQUFNLE1BQU0sR0FBRyxpQkFBUSxDQUFDLElBQUksQ0FBUSxDQUFDO1lBQ3JDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDakMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0MsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLy8gdHNsaW50OmRpc2FibGU6bm8tYW55XG5pbXBvcnQgeyBkZWVwQ29weSB9IGZyb20gJy4vb2JqZWN0JztcblxuZGVzY3JpYmUoJ29iamVjdCcsICgpID0+IHtcbiAgZGVzY3JpYmUoJ2RlZXBDb3B5JywgKCkgPT4ge1xuICAgIGl0KCd3b3JrcyB3aXRoIGVtcHR5JywgKCkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IHt9O1xuICAgICAgZXhwZWN0KGRlZXBDb3B5KGRhdGEpKS50b0VxdWFsKGRhdGEpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3dvcmtzIHdpdGggb2JqZWN0cycsICgpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSB7IGE6IDEsIGI6IHsgYzogJ2hlbGxvJyB9IH07XG4gICAgICBleHBlY3QoZGVlcENvcHkoZGF0YSkpLnRvRXF1YWwoZGF0YSk7XG4gICAgfSk7XG5cbiAgICBpdCgnd29ya3Mgd2l0aCBudWxsJywgKCkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IG51bGw7XG4gICAgICBleHBlY3QoZGVlcENvcHkoZGF0YSkpLnRvRXF1YWwoZGF0YSk7XG4gICAgfSk7XG5cbiAgICBpdCgnd29ya3Mgd2l0aCBudW1iZXInLCAoKSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gMTtcbiAgICAgIGV4cGVjdChkZWVwQ29weShkYXRhKSkudG9FcXVhbChkYXRhKTtcbiAgICB9KTtcblxuICAgIGl0KCd3b3JrcyB3aXRoIHNpbXBsZSBjbGFzc2VzJywgKCkgPT4ge1xuICAgICAgY2xhc3MgRGF0YSB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX3ggPSAxLCBwcm90ZWN0ZWQgX3kgPSAyLCBwdWJsaWMgX3ogPSAzKSB7fVxuICAgICAgfVxuICAgICAgY29uc3QgZGF0YSA9IG5ldyBEYXRhKCk7XG4gICAgICBleHBlY3QoZGVlcENvcHkoZGF0YSkpLnRvRXF1YWwoZGF0YSk7XG4gICAgICBleHBlY3QoZGVlcENvcHkoZGF0YSkgaW5zdGFuY2VvZiBEYXRhKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3dvcmtzIHdpdGggY2lyY3VsYXIgb2JqZWN0cycsICgpID0+IHtcbiAgICAgIGNvbnN0IGRhdGExID0geyBhOiAxIH0gYXMgYW55O1xuICAgICAgY29uc3QgZGF0YSA9IHsgYjogZGF0YTEgfTtcbiAgICAgIGRhdGExWydjaXJjdWxhciddID0gZGF0YTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gZGVlcENvcHkoZGF0YSkgYXMgYW55O1xuICAgICAgZXhwZWN0KHJlc3VsdC5iLmEpLnRvQmUoMSk7XG4gICAgICBleHBlY3QocmVzdWx0LmIuY2lyY3VsYXIuYi5hKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5iKS5ub3QudG9CZShkYXRhMSk7XG4gICAgICBleHBlY3QocmVzdWx0LmIpLnRvQmUocmVzdWx0LmIuY2lyY3VsYXIuYik7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=