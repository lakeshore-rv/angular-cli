"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// tslint:disable:no-big-function
Object.defineProperty(exports, "__esModule", { value: true });
const operators_1 = require("rxjs/operators");
const __1 = require("..");
const node_1 = require("../../node");
const virtual_fs_1 = require("../virtual-fs");
const workspace_1 = require("./workspace");
describe('Workspace', () => {
    const host = new node_1.NodeJsSyncHost();
    const root = virtual_fs_1.normalize(__dirname);
    // The content of this JSON object should be kept in sync with the path below:
    // tests/angular_devkit/core/workspace/angular-workspace.json
    const workspaceJson = {
        version: 1,
        newProjectRoot: './projects',
        defaultProject: 'app',
        cli: {
            '$globalOverride': '${HOME}/.angular-cli.json',
            'schematics': {
                'defaultCollection': '@schematics/angular',
            },
            'warnings': {
                'showDeprecation': false,
            },
        },
        schematics: {
            '@schematics/angular': {
                '*': {
                    skipImport: true,
                    'packageManager': 'yarn',
                },
                'application': {
                    spec: false,
                },
            },
        },
        architect: {},
        projects: {
            app: {
                root: 'projects/app',
                sourceRoot: 'projects/app/src',
                projectType: 'application',
                prefix: 'app',
                cli: {},
                schematics: {
                    '@schematics/angular': {
                        '*': {
                            spec: false,
                        },
                    },
                },
                architect: {
                    build: {
                        builder: '@angular-devkit/build-angular:browser',
                        transforms: [
                            {
                                plugin: '@angular-devkit/architect-transforms:replacement',
                                file: 'environments/environment.ts',
                                configurations: {
                                    production: 'environments/environment.prod.ts',
                                },
                            },
                        ],
                        options: {
                            outputPath: '../dist',
                            index: 'index.html',
                            main: 'main.ts',
                            polyfills: 'polyfills.ts',
                            tsConfig: 'tsconfig.app.json',
                            progress: false,
                        },
                        configurations: {
                            production: {
                                optimize: true,
                                outputHashing: 'all',
                                sourceMap: false,
                                extractCss: true,
                                namedChunks: false,
                                aot: true,
                                extractLicenses: true,
                                vendorChunk: false,
                                buildOptimizer: true,
                            },
                        },
                    },
                },
            },
        },
    };
    const appProject = Object.assign({}, workspaceJson.projects['app'], { 
        // Tools should not be returned when getting a project.
        cli: {}, schematics: {}, architect: {} });
    it('loads workspace from json', (done) => {
        const workspace = new workspace_1.Workspace(root, host);
        workspace.loadWorkspaceFromJson(workspaceJson).pipe(operators_1.tap((ws) => expect(ws.getProject('app').root).toEqual(workspaceJson.projects['app'].root))).toPromise().then(done, done.fail);
    });
    it('loads workspace from host', (done) => {
        const devkitRoot = virtual_fs_1.normalize(global._DevKitRoot); // tslint:disable-line:no-any
        const workspaceRoot = virtual_fs_1.join(devkitRoot, 'tests/angular_devkit/core/workspace');
        const workspace = new workspace_1.Workspace(workspaceRoot, host);
        workspace.loadWorkspaceFromHost(virtual_fs_1.normalize('angular-workspace.json')).pipe(operators_1.tap((ws) => expect(ws.getProject('app').root).toEqual(workspaceJson.projects['app'].root))).toPromise().then(done, done.fail);
    });
    it('errors when workspace fails validation', (done) => {
        const workspace = new workspace_1.Workspace(root, host);
        workspace.loadWorkspaceFromJson({ foo: 'bar' })
            .toPromise().then(() => done.fail, (err) => {
            expect(err).toEqual(jasmine.any(__1.schema.SchemaValidationException));
            done();
        });
    });
    it('throws when getting information before workspace is loaded', () => {
        const workspace = new workspace_1.Workspace(root, host);
        expect(() => workspace.version).toThrow(new workspace_1.WorkspaceNotYetLoadedException());
    });
    it('throws when getting workspace tool before workspace is loaded', () => {
        const workspace = new workspace_1.Workspace(root, host);
        expect(() => workspace.getCli()).toThrow(new workspace_1.WorkspaceNotYetLoadedException());
    });
    it('gets workspace root', () => {
        const workspace = new workspace_1.Workspace(root, host);
        expect(workspace.root).toBe(root);
    });
    it('gets workspace host', () => {
        const workspace = new workspace_1.Workspace(root, host);
        expect(workspace.host).toBe(host);
    });
    it('gets workspace version', (done) => {
        const workspace = new workspace_1.Workspace(root, host);
        workspace.loadWorkspaceFromJson(workspaceJson).pipe(operators_1.tap((ws) => expect(ws.version).toEqual(workspaceJson.version))).toPromise().then(done, done.fail);
    });
    it('gets workspace new project root', (done) => {
        const workspace = new workspace_1.Workspace(root, host);
        workspace.loadWorkspaceFromJson(workspaceJson).pipe(operators_1.tap((ws) => expect(ws.newProjectRoot).toEqual(workspaceJson.newProjectRoot))).toPromise().then(done, done.fail);
    });
    it('lists project names', (done) => {
        const workspace = new workspace_1.Workspace(root, host);
        workspace.loadWorkspaceFromJson(workspaceJson).pipe(operators_1.tap((ws) => expect(ws.listProjectNames()).toEqual(['app']))).toPromise().then(done, done.fail);
    });
    it('gets project by name', (done) => {
        const workspace = new workspace_1.Workspace(root, host);
        workspace.loadWorkspaceFromJson(workspaceJson).pipe(operators_1.tap((ws) => expect(ws.getProject('app')).toEqual(appProject))).toPromise().then(done, done.fail);
    });
    it('throws on missing project', (done) => {
        const workspace = new workspace_1.Workspace(root, host);
        workspace.loadWorkspaceFromJson(workspaceJson).pipe(operators_1.tap((ws) => expect(() => ws.getProject('abc')).toThrow(new workspace_1.ProjectNotFoundException('abc')))).toPromise().then(done, done.fail);
    });
    it('gets default project', (done) => {
        const workspace = new workspace_1.Workspace(root, host);
        workspace.loadWorkspaceFromJson(workspaceJson).pipe(operators_1.tap((ws) => expect(ws.getDefaultProjectName()).toEqual('app'))).toPromise().then(done, done.fail);
    });
    it('gets default project when there is a single one', (done) => {
        const customWorkspaceJson = Object.assign({}, workspaceJson, { defaultProject: undefined });
        const workspace = new workspace_1.Workspace(root, host);
        workspace.loadWorkspaceFromJson(customWorkspaceJson).pipe(operators_1.tap((ws) => expect(ws.getDefaultProjectName()).toEqual('app'))).toPromise().then(done, done.fail);
    });
    it('gets default project returns null when there is none', (done) => {
        const customWorkspaceJson = Object.assign({}, workspaceJson, { defaultProject: undefined, projects: {} });
        const workspace = new workspace_1.Workspace(root, host);
        workspace.loadWorkspaceFromJson(customWorkspaceJson).pipe(operators_1.tap((ws) => expect(ws.getDefaultProjectName()).toEqual(null))).toPromise().then(done, done.fail);
    });
    it('gets project by path', (done) => {
        const workspace = new workspace_1.Workspace(root, host);
        workspace.loadWorkspaceFromJson(workspaceJson).pipe(operators_1.tap((ws) => expect(ws.getProjectByPath(ws.root)).toEqual('app'))).toPromise().then(done, done.fail);
    });
    it('gets closest project by path', (done) => {
        const app = workspaceJson.projects['app'];
        const anotherAppRoot = virtual_fs_1.join(virtual_fs_1.normalize(app.root), 'folder');
        const customWorkspaceJson = Object.assign({}, workspaceJson, { projects: {
                'app': app,
                'another-app': Object.assign({}, app, { root: anotherAppRoot }),
            } });
        const workspace = new workspace_1.Workspace(root, host);
        workspace.loadWorkspaceFromJson(customWorkspaceJson).pipe(operators_1.tap((ws) => expect(ws.getProjectByPath(anotherAppRoot)).toEqual('another-app'))).toPromise().then(done, done.fail);
    });
    it('gets workspace cli', (done) => {
        const workspace = new workspace_1.Workspace(root, host);
        workspace.loadWorkspaceFromJson(workspaceJson).pipe(operators_1.tap((ws) => expect(ws.getCli()).toEqual(workspaceJson.cli))).toPromise().then(done, done.fail);
    });
    it('gets workspace schematics', (done) => {
        const workspace = new workspace_1.Workspace(root, host);
        workspace.loadWorkspaceFromJson(workspaceJson).pipe(operators_1.tap((ws) => expect(ws.getSchematics()).toEqual(workspaceJson.schematics))).toPromise().then(done, done.fail);
    });
    it('gets workspace architect', (done) => {
        const workspace = new workspace_1.Workspace(root, host);
        workspace.loadWorkspaceFromJson(workspaceJson).pipe(operators_1.tap((ws) => expect(ws.getArchitect()).toEqual(workspaceJson.architect))).toPromise().then(done, done.fail);
    });
    it('gets project cli', (done) => {
        const workspace = new workspace_1.Workspace(root, host);
        workspace.loadWorkspaceFromJson(workspaceJson).pipe(operators_1.tap((ws) => expect(ws.getProjectCli('app'))
            .toEqual(workspaceJson.projects.app.cli))).toPromise().then(done, done.fail);
    });
    it('gets project schematics', (done) => {
        const workspace = new workspace_1.Workspace(root, host);
        workspace.loadWorkspaceFromJson(workspaceJson).pipe(operators_1.tap((ws) => expect(ws.getProjectSchematics('app'))
            .toEqual(workspaceJson.projects.app.schematics))).toPromise().then(done, done.fail);
    });
    it('gets project architect', (done) => {
        const workspace = new workspace_1.Workspace(root, host);
        workspace.loadWorkspaceFromJson(workspaceJson).pipe(operators_1.tap((ws) => expect(ws.getProjectArchitect('app'))
            .toEqual(workspaceJson.projects.app.architect))).toPromise().then(done, done.fail);
    });
});
//# sourceMappingURL=data:application/json;base64,