"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// tslint:disable:no-any
const operators_1 = require("rxjs/operators");
const indent_1 = require("./indent");
const logger_1 = require("./logger");
describe('IndentSpec', () => {
    it('works', (done) => {
        const logger = new indent_1.IndentLogger('test');
        logger.pipe(operators_1.toArray())
            .toPromise()
            .then((observed) => {
            expect(observed).toEqual([
                jasmine.objectContaining({ message: 'test', level: 'info', name: 'test' }),
                jasmine.objectContaining({ message: '  test2', level: 'info', name: 'test2' }),
                jasmine.objectContaining({ message: '    test3', level: 'info', name: 'test3' }),
                jasmine.objectContaining({ message: '  test4', level: 'info', name: 'test4' }),
                jasmine.objectContaining({ message: 'test5', level: 'info', name: 'test' }),
            ]);
        })
            .then(() => done(), err => done.fail(err));
        const logger2 = new logger_1.Logger('test2', logger);
        const logger3 = new logger_1.Logger('test3', logger2);
        const logger4 = new logger_1.Logger('test4', logger);
        logger.info('test');
        logger2.info('test2');
        logger3.info('test3');
        logger4.info('test4');
        logger.info('test5');
        logger.complete();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZW50X3NwZWMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2VybmllZGF2aXMvQ29kZS9hbmd1bGFyLWNsaS8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L2NvcmUvc3JjL2xvZ2dlci9pbmRlbnRfc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7R0FNRztBQUNILHdCQUF3QjtBQUN4Qiw4Q0FBeUM7QUFDekMscUNBQXdDO0FBQ3hDLHFDQUE0QztBQUc1QyxRQUFRLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtJQUMxQixFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBWSxFQUFFLEVBQUU7UUFDM0IsTUFBTSxNQUFNLEdBQUcsSUFBSSxxQkFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUJBQU8sRUFBRSxDQUFDO2FBQ25CLFNBQVMsRUFBRTthQUNYLElBQUksQ0FBQyxDQUFDLFFBQW9CLEVBQUUsRUFBRTtZQUM3QixNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUN2QixPQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFRO2dCQUNqRixPQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFRO2dCQUNyRixPQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFRO2dCQUN2RixPQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFRO2dCQUNyRixPQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFRO2FBQ25GLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQzthQUNELElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM3QyxNQUFNLE9BQU8sR0FBRyxJQUFJLGVBQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDNUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxlQUFNLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzdDLE1BQU0sT0FBTyxHQUFHLElBQUksZUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUU1QyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BCLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEIsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0QixPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFckIsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3BCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby1hbnlcbmltcG9ydCB7IHRvQXJyYXkgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJbmRlbnRMb2dnZXIgfSBmcm9tICcuL2luZGVudCc7XG5pbXBvcnQgeyBMb2dFbnRyeSwgTG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuXG5cbmRlc2NyaWJlKCdJbmRlbnRTcGVjJywgKCkgPT4ge1xuICBpdCgnd29ya3MnLCAoZG9uZTogRG9uZUZuKSA9PiB7XG4gICAgY29uc3QgbG9nZ2VyID0gbmV3IEluZGVudExvZ2dlcigndGVzdCcpO1xuICAgIGxvZ2dlci5waXBlKHRvQXJyYXkoKSlcbiAgICAgIC50b1Byb21pc2UoKVxuICAgICAgLnRoZW4oKG9ic2VydmVkOiBMb2dFbnRyeVtdKSA9PiB7XG4gICAgICAgIGV4cGVjdChvYnNlcnZlZCkudG9FcXVhbChbXG4gICAgICAgICAgamFzbWluZS5vYmplY3RDb250YWluaW5nKHsgbWVzc2FnZTogJ3Rlc3QnLCBsZXZlbDogJ2luZm8nLCBuYW1lOiAndGVzdCcgfSkgYXMgYW55LFxuICAgICAgICAgIGphc21pbmUub2JqZWN0Q29udGFpbmluZyh7IG1lc3NhZ2U6ICcgIHRlc3QyJywgbGV2ZWw6ICdpbmZvJywgbmFtZTogJ3Rlc3QyJyB9KSBhcyBhbnksXG4gICAgICAgICAgamFzbWluZS5vYmplY3RDb250YWluaW5nKHsgbWVzc2FnZTogJyAgICB0ZXN0MycsIGxldmVsOiAnaW5mbycsIG5hbWU6ICd0ZXN0MycgfSkgYXMgYW55LFxuICAgICAgICAgIGphc21pbmUub2JqZWN0Q29udGFpbmluZyh7IG1lc3NhZ2U6ICcgIHRlc3Q0JywgbGV2ZWw6ICdpbmZvJywgbmFtZTogJ3Rlc3Q0JyB9KSBhcyBhbnksXG4gICAgICAgICAgamFzbWluZS5vYmplY3RDb250YWluaW5nKHsgbWVzc2FnZTogJ3Rlc3Q1JywgbGV2ZWw6ICdpbmZvJywgbmFtZTogJ3Rlc3QnIH0pIGFzIGFueSxcbiAgICAgICAgXSk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4gZG9uZSgpLCBlcnIgPT4gZG9uZS5mYWlsKGVycikpO1xuICAgIGNvbnN0IGxvZ2dlcjIgPSBuZXcgTG9nZ2VyKCd0ZXN0MicsIGxvZ2dlcik7XG4gICAgY29uc3QgbG9nZ2VyMyA9IG5ldyBMb2dnZXIoJ3Rlc3QzJywgbG9nZ2VyMik7XG4gICAgY29uc3QgbG9nZ2VyNCA9IG5ldyBMb2dnZXIoJ3Rlc3Q0JywgbG9nZ2VyKTtcblxuICAgIGxvZ2dlci5pbmZvKCd0ZXN0Jyk7XG4gICAgbG9nZ2VyMi5pbmZvKCd0ZXN0MicpO1xuICAgIGxvZ2dlcjMuaW5mbygndGVzdDMnKTtcbiAgICBsb2dnZXI0LmluZm8oJ3Rlc3Q0Jyk7XG4gICAgbG9nZ2VyLmluZm8oJ3Rlc3Q1Jyk7XG5cbiAgICBsb2dnZXIuY29tcGxldGUoKTtcbiAgfSk7XG59KTtcbiJdfQ==