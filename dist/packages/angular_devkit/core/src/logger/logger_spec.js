"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// tslint:disable:no-any
const operators_1 = require("rxjs/operators");
const logger_1 = require("./logger");
describe('Logger', () => {
    it('works', (done) => {
        const logger = new logger_1.Logger('test');
        logger.pipe(operators_1.toArray())
            .toPromise()
            .then((observed) => {
            expect(observed).toEqual([
                jasmine.objectContaining({ message: 'hello', level: 'debug', name: 'test' }),
                jasmine.objectContaining({ message: 'world', level: 'info', name: 'test' }),
            ]);
        })
            .then(() => done(), err => done.fail(err));
        logger.debug('hello');
        logger.info('world');
        logger.complete();
    });
    it('works with children', (done) => {
        const logger = new logger_1.Logger('test');
        let hasCompleted = false;
        logger.pipe(operators_1.toArray())
            .toPromise()
            .then((observed) => {
            expect(observed).toEqual([
                jasmine.objectContaining({ message: 'hello', level: 'debug', name: 'child' }),
                jasmine.objectContaining({ message: 'world', level: 'info', name: 'child' }),
            ]);
            expect(hasCompleted).toBe(true);
        })
            .then(() => done(), err => done.fail(err));
        const childLogger = new logger_1.Logger('child', logger);
        childLogger.subscribe(undefined, undefined, () => hasCompleted = true);
        childLogger.debug('hello');
        childLogger.info('world');
        logger.complete();
    });
    it('misses messages if not subscribed', (done) => {
        const logger = new logger_1.Logger('test');
        logger.debug('woah');
        logger.pipe(operators_1.toArray())
            .toPromise()
            .then((observed) => {
            expect(observed).toEqual([
                jasmine.objectContaining({ message: 'hello', level: 'debug', name: 'test' }),
            ]);
        })
            .then(() => done(), err => done.fail(err));
        logger.debug('hello');
        logger.complete();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyX3NwZWMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2VybmllZGF2aXMvQ29kZS9hbmd1bGFyLWNsaS8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L2NvcmUvc3JjL2xvZ2dlci9sb2dnZXJfc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7R0FNRztBQUNILHdCQUF3QjtBQUN4Qiw4Q0FBeUM7QUFFekMscUNBQWtDO0FBR2xDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO0lBQ3RCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFZLEVBQUUsRUFBRTtRQUMzQixNQUFNLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFPLEVBQUUsQ0FBQzthQUNuQixTQUFTLEVBQUU7YUFDWCxJQUFJLENBQUMsQ0FBQyxRQUFxQixFQUFFLEVBQUU7WUFDOUIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQztnQkFDdkIsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBUTtnQkFDbkYsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBUTthQUNuRixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFN0MsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JCLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwQixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLElBQVksRUFBRSxFQUFFO1FBQ3pDLE1BQU0sTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xDLElBQUksWUFBWSxHQUFHLEtBQUssQ0FBQztRQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFPLEVBQUUsQ0FBQzthQUNuQixTQUFTLEVBQUU7YUFDWCxJQUFJLENBQUMsQ0FBQyxRQUFxQixFQUFFLEVBQUU7WUFDOUIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQztnQkFDdkIsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBUTtnQkFDcEYsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBUTthQUNwRixDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQzthQUNELElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUU3QyxNQUFNLFdBQVcsR0FBRyxJQUFJLGVBQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDaEQsV0FBVyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsQ0FBQztRQUN2RSxXQUFXLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUIsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3BCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG1DQUFtQyxFQUFFLENBQUMsSUFBWSxFQUFFLEVBQUU7UUFDdkQsTUFBTSxNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVyQixNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFPLEVBQUUsQ0FBQzthQUNuQixTQUFTLEVBQUU7YUFDWCxJQUFJLENBQUMsQ0FBQyxRQUFxQixFQUFFLEVBQUU7WUFDOUIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQztnQkFDdkIsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBUTthQUNwRixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFN0MsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDcEIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8vIHRzbGludDpkaXNhYmxlOm5vLWFueVxuaW1wb3J0IHsgdG9BcnJheSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEpzb25WYWx1ZSB9IGZyb20gJy4uL2pzb24vaW50ZXJmYWNlJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcblxuXG5kZXNjcmliZSgnTG9nZ2VyJywgKCkgPT4ge1xuICBpdCgnd29ya3MnLCAoZG9uZTogRG9uZUZuKSA9PiB7XG4gICAgY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcigndGVzdCcpO1xuICAgIGxvZ2dlci5waXBlKHRvQXJyYXkoKSlcbiAgICAgIC50b1Byb21pc2UoKVxuICAgICAgLnRoZW4oKG9ic2VydmVkOiBKc29uVmFsdWVbXSkgPT4ge1xuICAgICAgICBleHBlY3Qob2JzZXJ2ZWQpLnRvRXF1YWwoW1xuICAgICAgICAgIGphc21pbmUub2JqZWN0Q29udGFpbmluZyh7IG1lc3NhZ2U6ICdoZWxsbycsIGxldmVsOiAnZGVidWcnLCBuYW1lOiAndGVzdCcgfSkgYXMgYW55LFxuICAgICAgICAgIGphc21pbmUub2JqZWN0Q29udGFpbmluZyh7IG1lc3NhZ2U6ICd3b3JsZCcsIGxldmVsOiAnaW5mbycsIG5hbWU6ICd0ZXN0JyB9KSBhcyBhbnksXG4gICAgICAgIF0pO1xuICAgICAgfSlcbiAgICAgIC50aGVuKCgpID0+IGRvbmUoKSwgZXJyID0+IGRvbmUuZmFpbChlcnIpKTtcblxuICAgIGxvZ2dlci5kZWJ1ZygnaGVsbG8nKTtcbiAgICBsb2dnZXIuaW5mbygnd29ybGQnKTtcbiAgICBsb2dnZXIuY29tcGxldGUoKTtcbiAgfSk7XG5cbiAgaXQoJ3dvcmtzIHdpdGggY2hpbGRyZW4nLCAoZG9uZTogRG9uZUZuKSA9PiB7XG4gICAgY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcigndGVzdCcpO1xuICAgIGxldCBoYXNDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICBsb2dnZXIucGlwZSh0b0FycmF5KCkpXG4gICAgICAudG9Qcm9taXNlKClcbiAgICAgIC50aGVuKChvYnNlcnZlZDogSnNvblZhbHVlW10pID0+IHtcbiAgICAgICAgZXhwZWN0KG9ic2VydmVkKS50b0VxdWFsKFtcbiAgICAgICAgICBqYXNtaW5lLm9iamVjdENvbnRhaW5pbmcoeyBtZXNzYWdlOiAnaGVsbG8nLCBsZXZlbDogJ2RlYnVnJywgbmFtZTogJ2NoaWxkJyB9KSBhcyBhbnksXG4gICAgICAgICAgamFzbWluZS5vYmplY3RDb250YWluaW5nKHsgbWVzc2FnZTogJ3dvcmxkJywgbGV2ZWw6ICdpbmZvJywgbmFtZTogJ2NoaWxkJyB9KSBhcyBhbnksXG4gICAgICAgIF0pO1xuICAgICAgICBleHBlY3QoaGFzQ29tcGxldGVkKS50b0JlKHRydWUpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKCgpID0+IGRvbmUoKSwgZXJyID0+IGRvbmUuZmFpbChlcnIpKTtcblxuICAgIGNvbnN0IGNoaWxkTG9nZ2VyID0gbmV3IExvZ2dlcignY2hpbGQnLCBsb2dnZXIpO1xuICAgIGNoaWxkTG9nZ2VyLnN1YnNjcmliZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgKCkgPT4gaGFzQ29tcGxldGVkID0gdHJ1ZSk7XG4gICAgY2hpbGRMb2dnZXIuZGVidWcoJ2hlbGxvJyk7XG4gICAgY2hpbGRMb2dnZXIuaW5mbygnd29ybGQnKTtcbiAgICBsb2dnZXIuY29tcGxldGUoKTtcbiAgfSk7XG5cbiAgaXQoJ21pc3NlcyBtZXNzYWdlcyBpZiBub3Qgc3Vic2NyaWJlZCcsIChkb25lOiBEb25lRm4pID0+IHtcbiAgICBjb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKCd0ZXN0Jyk7XG4gICAgbG9nZ2VyLmRlYnVnKCd3b2FoJyk7XG5cbiAgICBsb2dnZXIucGlwZSh0b0FycmF5KCkpXG4gICAgICAudG9Qcm9taXNlKClcbiAgICAgIC50aGVuKChvYnNlcnZlZDogSnNvblZhbHVlW10pID0+IHtcbiAgICAgICAgZXhwZWN0KG9ic2VydmVkKS50b0VxdWFsKFtcbiAgICAgICAgICBqYXNtaW5lLm9iamVjdENvbnRhaW5pbmcoeyBtZXNzYWdlOiAnaGVsbG8nLCBsZXZlbDogJ2RlYnVnJywgbmFtZTogJ3Rlc3QnIH0pIGFzIGFueSxcbiAgICAgICAgXSk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4gZG9uZSgpLCBlcnIgPT4gZG9uZS5mYWlsKGVycikpO1xuXG4gICAgbG9nZ2VyLmRlYnVnKCdoZWxsbycpO1xuICAgIGxvZ2dlci5jb21wbGV0ZSgpO1xuICB9KTtcbn0pO1xuIl19