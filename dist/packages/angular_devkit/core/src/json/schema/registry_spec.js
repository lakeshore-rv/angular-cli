"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// tslint:disable:no-any non-null-operator no-big-function
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const registry_1 = require("./registry");
describe('CoreSchemaRegistry', () => {
    it('works asynchronously', done => {
        const registry = new registry_1.CoreSchemaRegistry();
        const data = {}; // tslint:disable-line:no-any
        registry
            .compile({
            properties: {
                bool: { type: 'boolean' },
                str: { type: 'string', default: 'someString' },
                obj: {
                    properties: {
                        num: { type: 'number' },
                        other: { type: 'number', default: 0 },
                    },
                },
                tslint: {
                    $ref: 'http://json.schemastore.org/tslint#',
                },
            },
        })
            .pipe(operators_1.mergeMap(validator => validator(data)), operators_1.map(result => {
            expect(result.success).toBe(true);
            expect(data.obj.num).toBeUndefined();
            expect(data.tslint).not.toBeUndefined();
        }))
            .toPromise().then(done, done.fail);
    });
    it('supports pre transforms', done => {
        const registry = new registry_1.CoreSchemaRegistry();
        const data = {}; // tslint:disable-line:no-any
        registry.addPreTransform((data, ptr) => {
            if (ptr == '/') {
                return { str: 'string' };
            }
            return data;
        });
        registry
            .compile({
            properties: {
                bool: { type: 'boolean' },
                str: { type: 'string', default: 'someString' },
                obj: {
                    properties: {
                        num: { type: 'number' },
                        other: { type: 'number', default: 0 },
                    },
                },
            },
        })
            .pipe(operators_1.mergeMap(validator => validator(data)), operators_1.map(result => {
            const data = result.data;
            expect(result.success).toBe(true);
            expect(data.str).toBe('string');
            expect(data.obj.num).toBeUndefined();
        }))
            .toPromise().then(done, done.fail);
    });
    it('supports local references', done => {
        const registry = new registry_1.CoreSchemaRegistry();
        const data = { numbers: { one: 1 } };
        registry
            .compile({
            properties: {
                numbers: {
                    type: 'object',
                    additionalProperties: { '$ref': '#/definitions/myRef' },
                },
            },
            definitions: {
                myRef: { type: 'integer' },
            },
        })
            .pipe(operators_1.mergeMap(validator => validator(data)), operators_1.map(result => {
            expect(result.success).toBe(true);
            expect(data.numbers.one).not.toBeUndefined();
        }))
            .toPromise().then(done, done.fail);
    });
    it('fails on invalid additionalProperties', done => {
        const registry = new registry_1.CoreSchemaRegistry();
        const data = { notNum: 'foo' };
        registry
            .compile({
            properties: {
                num: { type: 'number' },
            },
            additionalProperties: false,
        }).pipe(operators_1.mergeMap(validator => validator(data)), operators_1.map(result => {
            expect(result.success).toBe(false);
            expect(result.errors && result.errors[0].message).toContain('should NOT have additional properties');
        }))
            .toPromise().then(done, done.fail);
    });
    it('fails on invalid additionalProperties async', done => {
        const registry = new registry_1.CoreSchemaRegistry();
        const data = { notNum: 'foo' };
        registry
            .compile({
            $async: true,
            properties: {
                num: { type: 'number' },
            },
            additionalProperties: false,
        }).pipe(operators_1.mergeMap(validator => validator(data)), operators_1.map(result => {
            expect(result.success).toBe(false);
            expect(result.errors && result.errors[0].message).toContain('should NOT have additional properties');
            expect(result.errors && result.errors[0].keyword).toBe('additionalProperties');
        }))
            .toPromise().then(done, done.fail);
    });
    // Synchronous failure is only used internally.
    // If it's meant to be used externally then this test should change to truly be synchronous
    // (i.e. not relyign on the observable).
    it('works synchronously', done => {
        const registry = new registry_1.CoreSchemaRegistry();
        const data = {}; // tslint:disable-line:no-any
        let isDone = false;
        registry
            .compile({
            properties: {
                bool: { type: 'boolean' },
                str: { type: 'string', default: 'someString' },
                obj: {
                    properties: {
                        num: { type: 'number' },
                        other: { type: 'number', default: 0 },
                    },
                },
            },
        })
            .pipe(operators_1.mergeMap(validator => validator(data)), operators_1.map(result => {
            expect(result.success).toBe(true);
            expect(data.obj.num).toBeUndefined();
        }))
            .subscribe(() => {
            isDone = true;
        }, done.fail);
        expect(isDone).toBe(true);
        done();
    });
    it('supports sync format', done => {
        const registry = new registry_1.CoreSchemaRegistry();
        const data = { str: 'hotdog' };
        const format = {
            name: 'is-hotdog',
            formatter: {
                async: false,
                validate: (str) => str === 'hotdog',
            },
        };
        registry.addFormat(format);
        registry
            .compile({
            properties: {
                str: { type: 'string', format: 'is-hotdog' },
            },
        })
            .pipe(operators_1.mergeMap(validator => validator(data)), operators_1.map(result => {
            expect(result.success).toBe(true);
        }))
            .toPromise().then(done, done.fail);
    });
    it('supports async format', done => {
        const registry = new registry_1.CoreSchemaRegistry();
        const data = { str: 'hotdog' };
        const format = {
            name: 'is-hotdog',
            formatter: {
                async: true,
                validate: (str) => rxjs_1.of(str === 'hotdog'),
            },
        };
        registry.addFormat(format);
        registry
            .compile({
            $async: true,
            properties: {
                str: { type: 'string', format: 'is-hotdog' },
            },
        })
            .pipe(operators_1.mergeMap(validator => validator(data)), operators_1.map(result => {
            expect(result.success).toBe(true);
        }))
            .toPromise().then(done, done.fail);
    });
    it('shows dataPath and message on error', done => {
        const registry = new registry_1.CoreSchemaRegistry();
        const data = { hotdot: 'hotdog', banana: 'banana' };
        const format = {
            name: 'is-hotdog',
            formatter: {
                async: false,
                validate: (str) => str === 'hotdog',
            },
        };
        registry.addFormat(format);
        registry
            .compile({
            properties: {
                hotdot: { type: 'string', format: 'is-hotdog' },
                banana: { type: 'string', format: 'is-hotdog' },
            },
        })
            .pipe(operators_1.mergeMap(validator => validator(data)), operators_1.map(result => {
            expect(result.success).toBe(false);
            expect(result.errors && result.errors[0]).toBeTruthy();
            expect(result.errors && result.errors[0].keyword).toBe('format');
            expect(result.errors && result.errors[0].dataPath).toBe('.banana');
            expect(result.errors && result.errors[0].params.format).toBe('is-hotdog');
        }))
            .toPromise().then(done, done.fail);
    });
    it('supports smart defaults', done => {
        const registry = new registry_1.CoreSchemaRegistry();
        const data = {
            arr: [{}],
        };
        registry.addSmartDefaultProvider('test', (schema) => {
            expect(schema).toEqual({
                $source: 'test',
            });
            return true;
        });
        registry.addSmartDefaultProvider('test2', (schema) => {
            expect(schema).toEqual({
                $source: 'test2',
                blue: 'yep',
            });
            return schema['blue'];
        });
        registry.addSmartDefaultProvider('test3', (schema) => {
            return [1, 2, 3];
        });
        registry
            .compile({
            properties: {
                bool: {
                    $ref: '#/definitions/example',
                },
                arr: {
                    items: {
                        properties: {
                            'test': {
                                $ref: '#/definitions/other',
                            },
                        },
                    },
                },
                arr2: {
                    $ref: '#/definitions/test3',
                },
                obj: {
                    properties: {
                        deep: {
                            properties: {
                                arr: {
                                    $ref: '#/definitions/test3',
                                },
                            },
                        },
                    },
                },
            },
            definitions: {
                example: {
                    type: 'boolean',
                    $default: {
                        $source: 'test',
                    },
                },
                other: {
                    type: 'string',
                    $default: {
                        $source: 'test2',
                        blue: 'yep',
                    },
                },
                test3: {
                    type: 'array',
                    $default: {
                        $source: 'test3',
                    },
                },
            },
        })
            .pipe(operators_1.mergeMap(validator => validator(data)), operators_1.map(result => {
            expect(result.success).toBe(true);
            expect(data.bool).toBe(true);
            expect(data.arr[0].test).toBe('yep');
            expect(data.arr2).toEqual([1, 2, 3]);
            expect(data.obj.deep.arr).toEqual([1, 2, 3]);
        }))
            .toPromise().then(done, done.fail);
    });
});
//# sourceMappingURL=data:application/json;base64,