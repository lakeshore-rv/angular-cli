"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// tslint:disable:no-implicit-dependencies
// tslint:disable:non-null-operator
const core_1 = require("@angular-devkit/core");
const buffer_1 = require("./buffer");
const memory_1 = require("./memory");
const sync_1 = require("./sync");
describe('SimpleMemoryHost', () => {
    it('can watch', () => {
        const host = new sync_1.SyncDelegateHost(new memory_1.SimpleMemoryHost());
        host.write(core_1.normalize('/sub/file1'), buffer_1.stringToFileBuffer(''));
        let recursiveCalled = 0;
        let noRecursiveCalled = 0;
        let noRecursiveFileCalled = 0;
        let diffFile = 0;
        host.watch(core_1.normalize('/sub'), { recursive: true }).subscribe(() => recursiveCalled++);
        host.watch(core_1.normalize('/sub')).subscribe(() => noRecursiveCalled++);
        host.watch(core_1.normalize('/sub/file2')).subscribe(() => noRecursiveFileCalled++);
        host.watch(core_1.normalize('/sub/file3')).subscribe(() => diffFile++);
        host.write(core_1.normalize('/sub/file2'), buffer_1.stringToFileBuffer(''));
        expect(recursiveCalled).toBe(1);
        expect(noRecursiveCalled).toBe(0);
        expect(noRecursiveFileCalled).toBe(1);
        expect(diffFile).toBe(0);
        host.write(core_1.normalize('/sub/file3'), buffer_1.stringToFileBuffer(''));
        expect(recursiveCalled).toBe(2);
        expect(noRecursiveCalled).toBe(0);
        expect(noRecursiveFileCalled).toBe(1);
        expect(diffFile).toBe(1);
    });
    it('can read', () => {
        const host = new sync_1.SyncDelegateHost(new memory_1.SimpleMemoryHost());
        const buffer = buffer_1.stringToFileBuffer('hello');
        host.write(core_1.normalize('/hello'), buffer);
        expect(host.read(core_1.normalize('/hello'))).toBe(buffer);
    });
    it('can delete', () => {
        const host = new sync_1.SyncDelegateHost(new memory_1.SimpleMemoryHost());
        const buffer = buffer_1.stringToFileBuffer('hello');
        expect(host.exists(core_1.normalize('/sub/file1'))).toBe(false);
        host.write(core_1.normalize('/sub/file1'), buffer);
        expect(host.exists(core_1.normalize('/sub/file1'))).toBe(true);
        host.delete(core_1.normalize('/sub/file1'));
        expect(host.exists(core_1.normalize('/sub/file1'))).toBe(false);
    });
    it('can rename', () => {
        const host = new sync_1.SyncDelegateHost(new memory_1.SimpleMemoryHost());
        const buffer = buffer_1.stringToFileBuffer('hello');
        expect(host.exists(core_1.normalize('/sub/file1'))).toBe(false);
        host.write(core_1.normalize('/sub/file1'), buffer);
        expect(host.exists(core_1.normalize('/sub/file1'))).toBe(true);
        host.rename(core_1.normalize('/sub/file1'), core_1.normalize('/sub/file2'));
        expect(host.exists(core_1.normalize('/sub/file1'))).toBe(false);
        expect(host.exists(core_1.normalize('/sub/file2'))).toBe(true);
        expect(host.read(core_1.normalize('/sub/file2'))).toBe(buffer);
    });
    it('can list', () => {
        const host = new sync_1.SyncDelegateHost(new memory_1.SimpleMemoryHost());
        const buffer = buffer_1.stringToFileBuffer('hello');
        host.write(core_1.normalize('/sub/file1'), buffer);
        host.write(core_1.normalize('/sub/file2'), buffer);
        host.write(core_1.normalize('/sub/sub1/file3'), buffer);
        host.write(core_1.normalize('/file4'), buffer);
        expect(host.list(core_1.normalize('/sub')))
            .toEqual([core_1.fragment('file1'), core_1.fragment('file2'), core_1.fragment('sub1')]);
        expect(host.list(core_1.normalize('/')))
            .toEqual([core_1.fragment('sub'), core_1.fragment('file4')]);
        expect(host.list(core_1.normalize('/inexistent'))).toEqual([]);
    });
    it('supports isFile / isDirectory', () => {
        const host = new sync_1.SyncDelegateHost(new memory_1.SimpleMemoryHost());
        const buffer = buffer_1.stringToFileBuffer('hello');
        host.write(core_1.normalize('/sub/file1'), buffer);
        host.write(core_1.normalize('/sub/file2'), buffer);
        host.write(core_1.normalize('/sub/sub1/file3'), buffer);
        host.write(core_1.normalize('/file4'), buffer);
        expect(host.isFile(core_1.normalize('/sub'))).toBe(false);
        expect(host.isFile(core_1.normalize('/sub1'))).toBe(false);
        expect(host.isDirectory(core_1.normalize('/'))).toBe(true);
        expect(host.isDirectory(core_1.normalize('/sub'))).toBe(true);
        expect(host.isDirectory(core_1.normalize('/sub/sub1'))).toBe(true);
        expect(host.isDirectory(core_1.normalize('/sub/file1'))).toBe(false);
        expect(host.isDirectory(core_1.normalize('/sub/sub1/file3'))).toBe(false);
    });
    it('makes every path absolute', () => {
        const host = new sync_1.SyncDelegateHost(new memory_1.SimpleMemoryHost());
        const buffer = buffer_1.stringToFileBuffer('hello');
        const buffer2 = buffer_1.stringToFileBuffer('hello 2');
        host.write(core_1.normalize('file1'), buffer);
        host.write(core_1.normalize('/sub/file2'), buffer);
        host.write(core_1.normalize('sub/file2'), buffer2);
        expect(host.isFile(core_1.normalize('file1'))).toBe(true);
        expect(host.isFile(core_1.normalize('/file1'))).toBe(true);
        expect(host.isFile(core_1.normalize('/sub/file2'))).toBe(true);
        expect(host.read(core_1.normalize('sub/file2'))).toBe(buffer2);
        expect(host.isDirectory(core_1.normalize('/sub'))).toBe(true);
        expect(host.isDirectory(core_1.normalize('sub'))).toBe(true);
    });
});
//# sourceMappingURL=data:application/json;base64,