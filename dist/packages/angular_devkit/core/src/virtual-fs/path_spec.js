"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const path_1 = require("./path");
describe('path', () => {
    it('normalize', () => {
        expect(path_1.normalize('////')).toBe('/');
        expect(path_1.normalize('././././.')).toBe('');
        expect(path_1.normalize('/./././.')).toBe('/');
        // Regular use cases.
        expect(path_1.normalize('a')).toBe('a');
        expect(path_1.normalize('a/b/c')).toBe('a/b/c');
        expect(path_1.normalize('/a/b/c')).toBe('/a/b/c');
        expect(path_1.normalize('./a/b/c')).toBe('a/b/c');
        expect(path_1.normalize('/./a/b/c')).toBe('/a/b/c');
        expect(path_1.normalize('/./a/b/c/')).toBe('/a/b/c');
        expect(path_1.normalize('/./a/b/./c')).toBe('/a/b/c');
        expect(path_1.normalize('./a/b/./c')).toBe('a/b/c');
        expect(path_1.normalize('/./a/b/d/../c')).toBe('/a/b/c');
        expect(path_1.normalize('/./a/b/./d/../c')).toBe('/a/b/c');
        expect(path_1.normalize('././a/b/./d/../c')).toBe('a/b/c');
        expect(path_1.normalize('a/')).toBe('a');
        expect(path_1.normalize('a/./..')).toBe('');
        // Reducing to nothing use cases.
        expect(path_1.normalize('')).toBe('');
        expect(path_1.normalize('.')).toBe('');
        expect(path_1.normalize('/.')).toBe('/');
        expect(path_1.normalize('/./.')).toBe('/');
        expect(path_1.normalize('/././.')).toBe('/');
        expect(path_1.normalize('/c/..')).toBe('/');
        // Out of directory.
        expect(path_1.normalize('..')).toBe('..');
        expect(path_1.normalize('../..')).toBe('../..');
        expect(path_1.normalize('../../a')).toBe('../../a');
        expect(path_1.normalize('b/../../a')).toBe('../a');
        expect(path_1.normalize('./..')).toBe('..');
        expect(path_1.normalize('../a/b/c')).toBe('../a/b/c');
        expect(path_1.normalize('./a/../../a/b/c')).toBe('../a/b/c');
        // Invalid use cases.
        expect(() => path_1.normalize('/./././../././/'))
            .toThrow(new path_1.InvalidPathException('/./././../././/'));
        expect(() => path_1.normalize('/./././../././/../'))
            .toThrow(new path_1.InvalidPathException('/./././../././/../'));
        expect(() => path_1.normalize('/./././../././a/.'))
            .toThrow(new path_1.InvalidPathException('/./././../././a/.'));
        expect(() => path_1.normalize('/c/../../')).toThrow(new path_1.InvalidPathException('/c/../../'));
        // Windows use cases.
        expect(path_1.normalize('a\\b\\c')).toBe('a/b/c');
        expect(path_1.normalize('\\a\\b\\c')).toBe('/a/b/c');
        expect(path_1.normalize('.\\a\\b\\c')).toBe('a/b/c');
        expect(path_1.normalize('C:\\a\\b\\c')).toBe('/C/a/b/c');
        expect(path_1.normalize('c:\\a\\b\\c')).toBe('/c/a/b/c');
        expect(path_1.normalize('A:\\a\\b\\c')).toBe('/A/a/b/c');
        expect(() => path_1.normalize('A:\\..\\..'))
            .toThrow(new path_1.InvalidPathException('A:\\..\\..'));
        expect(path_1.normalize('\\.\\a\\b\\c')).toBe('/a/b/c');
        expect(path_1.normalize('\\.\\a\\b\\.\\c')).toBe('/a/b/c');
        expect(path_1.normalize('\\.\\a\\b\\d\\..\\c')).toBe('/a/b/c');
        expect(path_1.normalize('\\.\\a\\b\\.\\d\\..\\c')).toBe('/a/b/c');
        expect(path_1.normalize('a\\')).toBe('a');
    });
    describe('split', () => {
        const tests = [
            ['a', ['a']],
            ['/a/b', ['', 'a', 'b']],
            ['a/b', ['a', 'b']],
            ['a/b/', ['a', 'b']],
            ['', []],
            ['/', ['']],
        ];
        for (const goldens of tests) {
            const result = goldens.pop();
            const args = goldens.map((x) => path_1.normalize(x));
            it(`(${JSON.stringify(args)}) == "${result}"`, () => {
                expect(path_1.split.apply(null, args)).toEqual(result);
            });
        }
    });
    describe('join', () => {
        const tests = [
            ['a', 'a'],
            ['/a', '/b', '/a/b'],
            ['/a', '/b', '/c', '/a/b/c'],
            ['/a', 'b', 'c', '/a/b/c'],
            ['a', 'b', 'c', 'a/b/c'],
        ];
        for (const goldens of tests) {
            const result = goldens.pop();
            const args = goldens.map(x => path_1.normalize(x));
            it(`(${JSON.stringify(args)}) == "${result}"`, () => {
                expect(path_1.join.apply(null, args)).toBe(result);
            });
        }
    });
    describe('relative', () => {
        const tests = [
            ['/a/b/c', '/a/b/c', ''],
            ['/a/b', '/a/b/c', 'c'],
            ['/a/b', '/a/b/c/d', 'c/d'],
            ['/a/b/c', '/a/b', '..'],
            ['/a/b/c', '/a/b/d', '../d'],
            ['/a/b/c/d/e', '/a/f/g', '../../../../f/g'],
            [
                '/src/app/sub1/test1', '/src/app/sub2/test2',
                '../../sub2/test2',
            ],
        ];
        for (const [from, to, result] of tests) {
            it(`("${from}", "${to}") == "${result}"`, () => {
                const f = path_1.normalize(from);
                const t = path_1.normalize(to);
                expect(path_1.relative(f, t)).toBe(result);
            });
        }
    });
    it('dirname', () => {
        expect(path_1.dirname(path_1.normalize('a'))).toBe('');
        expect(path_1.dirname(path_1.normalize('/a'))).toBe('/');
        expect(path_1.dirname(path_1.normalize('/a/b/c'))).toBe('/a/b');
        expect(path_1.dirname(path_1.normalize('./c'))).toBe('');
        expect(path_1.dirname(path_1.normalize('./a/b/c'))).toBe('a/b');
    });
    it('basename', () => {
        expect(path_1.basename(path_1.normalize('a'))).toBe('a');
        expect(path_1.basename(path_1.normalize('/a/b/c'))).toBe('c');
        expect(path_1.basename(path_1.normalize('./c'))).toBe('c');
        expect(path_1.basename(path_1.normalize('.'))).toBe('');
        expect(path_1.basename(path_1.normalize('./a/b/c'))).toBe('c');
    });
});
//# sourceMappingURL=data:application/json;base64,