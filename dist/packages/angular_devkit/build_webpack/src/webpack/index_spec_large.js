"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/architect/testing");
const core_1 = require("@angular-devkit/core");
const operators_1 = require("rxjs/operators");
const test_utils_1 = require("../test-utils");
describe('Webpack Builder basic test', () => {
    describe('basic app', () => {
        const outputPath = core_1.normalize('dist');
        const webpackTargetSpec = { project: 'app', target: 'build' };
        beforeEach(done => test_utils_1.basicHost.initialize().toPromise().then(done, done.fail));
        afterEach(done => test_utils_1.basicHost.restore().toPromise().then(done, done.fail));
        it('works', (done) => {
            testing_1.runTargetSpec(test_utils_1.basicHost, webpackTargetSpec).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true)), operators_1.tap(() => {
                expect(test_utils_1.basicHost.scopedSync().exists(core_1.join(outputPath, 'bundle.js'))).toBe(true);
            })).toPromise().then(done, done.fail);
        });
    });
    describe('Angular app', () => {
        const outputPath = core_1.normalize('dist/');
        const webpackTargetSpec = { project: 'app', target: 'build-webpack' };
        beforeEach(done => test_utils_1.angularHost.initialize().toPromise().then(done, done.fail));
        afterEach(done => test_utils_1.angularHost.restore().toPromise().then(done, done.fail));
        it('works', (done) => {
            testing_1.runTargetSpec(test_utils_1.angularHost, webpackTargetSpec).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true)), operators_1.tap(() => {
                expect(test_utils_1.angularHost.scopedSync().exists(core_1.join(outputPath, 'main.js'))).toBe(true);
                expect(test_utils_1.angularHost.scopedSync().exists(core_1.join(outputPath, 'polyfills.js'))).toBe(true);
            })).toPromise().then(done, done.fail);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXhfc3BlY19sYXJnZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZXJuaWVkYXZpcy9Db2RlL2FuZ3VsYXItY2xpLyIsInNvdXJjZXMiOlsicGFja2FnZXMvYW5ndWxhcl9kZXZraXQvYnVpbGRfd2VicGFjay9zcmMvd2VicGFjay9pbmRleF9zcGVjX2xhcmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7O0FBRUgsK0RBQWtFO0FBQ2xFLCtDQUF1RDtBQUN2RCw4Q0FBcUM7QUFDckMsOENBQXVEO0FBR3ZELFFBQVEsQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7SUFDMUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUU7UUFDekIsTUFBTSxVQUFVLEdBQUcsZ0JBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQyxNQUFNLGlCQUFpQixHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUM7UUFFOUQsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsc0JBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzdFLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLHNCQUFTLENBQUMsT0FBTyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUV6RSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDbkIsdUJBQWEsQ0FBQyxzQkFBUyxFQUFFLGlCQUFpQixDQUFDLENBQUMsSUFBSSxDQUM5QyxlQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQzFELGVBQUcsQ0FBQyxHQUFHLEVBQUU7Z0JBQ1AsTUFBTSxDQUFDLHNCQUFTLENBQUMsVUFBVSxFQUFFLENBQUMsTUFBTSxDQUFDLFdBQUksQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsRixDQUFDLENBQUMsQ0FDSCxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtRQUMzQixNQUFNLFVBQVUsR0FBRyxnQkFBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RDLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsQ0FBQztRQUV0RSxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyx3QkFBVyxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDL0UsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsd0JBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRTNFLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNuQix1QkFBYSxDQUFDLHdCQUFXLEVBQUUsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQ2hELGVBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDMUQsZUFBRyxDQUFDLEdBQUcsRUFBRTtnQkFDUCxNQUFNLENBQUMsd0JBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxNQUFNLENBQUMsV0FBSSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNoRixNQUFNLENBQUMsd0JBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxNQUFNLENBQUMsV0FBSSxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZGLENBQUMsQ0FBQyxDQUNILENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgeyBydW5UYXJnZXRTcGVjIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2FyY2hpdGVjdC90ZXN0aW5nJztcbmltcG9ydCB7IGpvaW4sIG5vcm1hbGl6ZSB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGFuZ3VsYXJIb3N0LCBiYXNpY0hvc3QgfSBmcm9tICcuLi90ZXN0LXV0aWxzJztcblxuXG5kZXNjcmliZSgnV2VicGFjayBCdWlsZGVyIGJhc2ljIHRlc3QnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdiYXNpYyBhcHAnLCAoKSA9PiB7XG4gICAgY29uc3Qgb3V0cHV0UGF0aCA9IG5vcm1hbGl6ZSgnZGlzdCcpO1xuICAgIGNvbnN0IHdlYnBhY2tUYXJnZXRTcGVjID0geyBwcm9qZWN0OiAnYXBwJywgdGFyZ2V0OiAnYnVpbGQnIH07XG5cbiAgICBiZWZvcmVFYWNoKGRvbmUgPT4gYmFzaWNIb3N0LmluaXRpYWxpemUoKS50b1Byb21pc2UoKS50aGVuKGRvbmUsIGRvbmUuZmFpbCkpO1xuICAgIGFmdGVyRWFjaChkb25lID0+IGJhc2ljSG9zdC5yZXN0b3JlKCkudG9Qcm9taXNlKCkudGhlbihkb25lLCBkb25lLmZhaWwpKTtcblxuICAgIGl0KCd3b3JrcycsIChkb25lKSA9PiB7XG4gICAgICBydW5UYXJnZXRTcGVjKGJhc2ljSG9zdCwgd2VicGFja1RhcmdldFNwZWMpLnBpcGUoXG4gICAgICAgIHRhcCgoYnVpbGRFdmVudCkgPT4gZXhwZWN0KGJ1aWxkRXZlbnQuc3VjY2VzcykudG9CZSh0cnVlKSksXG4gICAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgICAgZXhwZWN0KGJhc2ljSG9zdC5zY29wZWRTeW5jKCkuZXhpc3RzKGpvaW4ob3V0cHV0UGF0aCwgJ2J1bmRsZS5qcycpKSkudG9CZSh0cnVlKTtcbiAgICAgICAgfSksXG4gICAgICApLnRvUHJvbWlzZSgpLnRoZW4oZG9uZSwgZG9uZS5mYWlsKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0FuZ3VsYXIgYXBwJywgKCkgPT4ge1xuICAgIGNvbnN0IG91dHB1dFBhdGggPSBub3JtYWxpemUoJ2Rpc3QvJyk7XG4gICAgY29uc3Qgd2VicGFja1RhcmdldFNwZWMgPSB7IHByb2plY3Q6ICdhcHAnLCB0YXJnZXQ6ICdidWlsZC13ZWJwYWNrJyB9O1xuXG4gICAgYmVmb3JlRWFjaChkb25lID0+IGFuZ3VsYXJIb3N0LmluaXRpYWxpemUoKS50b1Byb21pc2UoKS50aGVuKGRvbmUsIGRvbmUuZmFpbCkpO1xuICAgIGFmdGVyRWFjaChkb25lID0+IGFuZ3VsYXJIb3N0LnJlc3RvcmUoKS50b1Byb21pc2UoKS50aGVuKGRvbmUsIGRvbmUuZmFpbCkpO1xuXG4gICAgaXQoJ3dvcmtzJywgKGRvbmUpID0+IHtcbiAgICAgIHJ1blRhcmdldFNwZWMoYW5ndWxhckhvc3QsIHdlYnBhY2tUYXJnZXRTcGVjKS5waXBlKFxuICAgICAgICB0YXAoKGJ1aWxkRXZlbnQpID0+IGV4cGVjdChidWlsZEV2ZW50LnN1Y2Nlc3MpLnRvQmUodHJ1ZSkpLFxuICAgICAgICB0YXAoKCkgPT4ge1xuICAgICAgICAgIGV4cGVjdChhbmd1bGFySG9zdC5zY29wZWRTeW5jKCkuZXhpc3RzKGpvaW4ob3V0cHV0UGF0aCwgJ21haW4uanMnKSkpLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgZXhwZWN0KGFuZ3VsYXJIb3N0LnNjb3BlZFN5bmMoKS5leGlzdHMoam9pbihvdXRwdXRQYXRoLCAncG9seWZpbGxzLmpzJykpKS50b0JlKHRydWUpO1xuICAgICAgICB9KSxcbiAgICAgICkudG9Qcm9taXNlKCkudGhlbihkb25lLCBkb25lLmZhaWwpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19