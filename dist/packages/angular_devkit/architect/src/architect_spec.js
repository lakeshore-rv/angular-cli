"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const node_1 = require("@angular-devkit/core/node");
const operators_1 = require("rxjs/operators");
const architect_1 = require("./architect");
describe('Architect', () => {
    const host = new node_1.NodeJsSyncHost();
    const root = core_1.normalize(__dirname);
    const workspace = new core_1.experimental.workspace.Workspace(root, host);
    let architect;
    const workspaceJson = {
        version: 1,
        newProjectRoot: 'src',
        projects: {
            app: {
                root: 'app',
                sourceRoot: 'app/src',
                projectType: 'application',
                architect: {
                    browser: {
                        builder: '../test:browser',
                        options: {
                            browserOption: 1,
                        },
                        configurations: {
                            prod: {
                                optionalBrowserOption: false,
                            },
                        },
                    },
                    badBrowser: {
                        builder: '../test:browser',
                        options: {
                            badBrowserOption: 1,
                        },
                    },
                    karma: {
                        builder: '../test:karma',
                        options: {},
                    },
                },
            },
        },
    };
    beforeAll((done) => workspace.loadWorkspaceFromJson(workspaceJson).pipe(operators_1.concatMap(ws => new architect_1.Architect(ws).loadArchitect()), operators_1.tap(arch => architect = arch)).toPromise().then(done, done.fail));
    it('works', () => {
        const targetSpec = { project: 'app', target: 'browser', configuration: 'prod' };
        const builderConfig = architect.getBuilderConfiguration(targetSpec);
        expect(builderConfig.root).toBe('app');
        expect(builderConfig.sourceRoot).toBe('app/src');
        expect(builderConfig.projectType).toBe('application');
        expect(builderConfig.builder).toBe('../test:browser');
        expect(builderConfig.options.browserOption).toBe(1);
        expect(builderConfig.options.optionalBrowserOption).toBe(false);
    });
    it('lists targets by name', () => {
        expect(architect.listProjectTargets('app')).toEqual(['browser', 'badBrowser', 'karma']);
    });
    it('errors when missing target is used', () => {
        const targetSpec = { project: 'app', target: 'missing', configuration: 'prod' };
        expect(() => architect.getBuilderConfiguration(targetSpec))
            .toThrow(new architect_1.TargetNotFoundException(targetSpec.project, targetSpec.target));
    });
    it('throws when missing configuration is used', () => {
        const targetSpec = { project: 'app', target: 'browser', configuration: 'missing' };
        expect(() => architect.getBuilderConfiguration(targetSpec))
            .toThrow(new architect_1.ConfigurationNotFoundException(targetSpec.project, targetSpec.configuration));
    });
    it('runs targets', (done) => {
        const targetSpec = { project: 'app', target: 'browser', configuration: 'prod' };
        const builderConfig = architect.getBuilderConfiguration(targetSpec);
        architect.run(builderConfig).pipe(operators_1.toArray(), operators_1.tap(events => {
            expect(events.length).toBe(3);
            expect(events[0].success).toBe(true);
            expect(events[1].success).toBe(false);
            expect(events[2].success).toBe(true);
        })).toPromise().then(done, done.fail);
    });
    it('errors when builder cannot be resolved', (done) => {
        const targetSpec = { project: 'app', target: 'karma' };
        const builderConfig = architect.getBuilderConfiguration(targetSpec);
        architect.run(builderConfig).toPromise().then(() => done.fail(), (err) => {
            expect(err).toEqual(jasmine.any(architect_1.BuilderCannotBeResolvedException));
            done();
        });
    });
    it('errors when builder options fail validation', (done) => {
        const targetSpec = { project: 'app', target: 'badBrowser' };
        const builderConfig = architect.getBuilderConfiguration(targetSpec);
        architect.run(builderConfig).toPromise().then(() => done.fail(), (err) => {
            expect(err).toEqual(jasmine.any(core_1.schema.SchemaValidationException));
            done();
        });
    });
});
//# sourceMappingURL=data:application/json;base64,