"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/architect/testing");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const utils_1 = require("../utils");
describe('Dev Server Builder public host', () => {
    // We have to spoof the host to a non-numeric one because Webpack Dev Server does not
    // check the hosts anymore when requests come from numeric IP addresses.
    const headers = { host: 'http://spoofy.mcspoofface' };
    beforeEach(done => utils_1.host.initialize().toPromise().then(done, done.fail));
    afterEach(done => utils_1.host.restore().toPromise().then(done, done.fail));
    it('works', (done) => {
        testing_1.runTargetSpec(utils_1.host, utils_1.devServerTargetSpec).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true)), operators_1.concatMap(() => rxjs_1.from(testing_1.request('http://localhost:4200/', headers))), operators_1.tap(response => expect(response).toContain('Invalid Host header')), operators_1.take(1)).toPromise().then(done, done.fail);
    }, 30000);
    it('works', (done) => {
        const overrides = { publicHost: headers.host };
        testing_1.runTargetSpec(utils_1.host, utils_1.devServerTargetSpec, overrides).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true)), operators_1.concatMap(() => rxjs_1.from(testing_1.request('http://localhost:4200/', headers))), operators_1.tap(response => expect(response).toContain('<title>HelloWorldApp</title>')), operators_1.take(1)).toPromise().then(done, done.fail);
    }, 30000);
    it('works', (done) => {
        const overrides = { disableHostCheck: true };
        testing_1.runTargetSpec(utils_1.host, utils_1.devServerTargetSpec, overrides).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true)), operators_1.concatMap(() => rxjs_1.from(testing_1.request('http://localhost:4200/', headers))), operators_1.tap(response => expect(response).toContain('<title>HelloWorldApp</title>')), operators_1.take(1)).toPromise().then(done, done.fail);
    }, 30000);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljLWhvc3Rfc3BlY19sYXJnZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZXJuaWVkYXZpcy9Db2RlL2FuZ3VsYXItY2xpLyIsInNvdXJjZXMiOlsicGFja2FnZXMvYW5ndWxhcl9kZXZraXQvYnVpbGRfYW5ndWxhci90ZXN0L2Rldi1zZXJ2ZXIvcHVibGljLWhvc3Rfc3BlY19sYXJnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOztBQUVILCtEQUEyRTtBQUMzRSwrQkFBNEI7QUFDNUIsOENBQXNEO0FBRXRELG9DQUFxRDtBQUdyRCxRQUFRLENBQUMsZ0NBQWdDLEVBQUUsR0FBRyxFQUFFO0lBQzlDLHFGQUFxRjtJQUNyRix3RUFBd0U7SUFDeEUsTUFBTSxPQUFPLEdBQUcsRUFBRSxJQUFJLEVBQUUsMkJBQTJCLEVBQUUsQ0FBQztJQUV0RCxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN4RSxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUVwRSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDbkIsdUJBQWEsQ0FBQyxZQUFJLEVBQUUsMkJBQW1CLENBQUMsQ0FBQyxJQUFJLENBQzNDLGVBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDMUQscUJBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFJLENBQUMsaUJBQU8sQ0FBQyx3QkFBd0IsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQ2pFLGVBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsQ0FBQyxFQUNsRSxnQkFBSSxDQUFDLENBQUMsQ0FBQyxDQUNSLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRVYsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ25CLE1BQU0sU0FBUyxHQUFxQyxFQUFFLFVBQVUsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFakYsdUJBQWEsQ0FBQyxZQUFJLEVBQUUsMkJBQW1CLEVBQUUsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUN0RCxlQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQzFELHFCQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBSSxDQUFDLGlCQUFPLENBQUMsd0JBQXdCLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUNqRSxlQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLDhCQUE4QixDQUFDLENBQUMsRUFDM0UsZ0JBQUksQ0FBQyxDQUFDLENBQUMsQ0FDUixDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUVWLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNuQixNQUFNLFNBQVMsR0FBcUMsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUUvRSx1QkFBYSxDQUFDLFlBQUksRUFBRSwyQkFBbUIsRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQ3RELGVBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDMUQscUJBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFJLENBQUMsaUJBQU8sQ0FBQyx3QkFBd0IsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQ2pFLGVBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQUMsOEJBQThCLENBQUMsQ0FBQyxFQUMzRSxnQkFBSSxDQUFDLENBQUMsQ0FBQyxDQUNSLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ1osQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IHJlcXVlc3QsIHJ1blRhcmdldFNwZWMgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvYXJjaGl0ZWN0L3Rlc3RpbmcnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY29uY2F0TWFwLCB0YWtlLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBEZXZTZXJ2ZXJCdWlsZGVyT3B0aW9ucyB9IGZyb20gJy4uLy4uL3NyYyc7XG5pbXBvcnQgeyBkZXZTZXJ2ZXJUYXJnZXRTcGVjLCBob3N0IH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5cbmRlc2NyaWJlKCdEZXYgU2VydmVyIEJ1aWxkZXIgcHVibGljIGhvc3QnLCAoKSA9PiB7XG4gIC8vIFdlIGhhdmUgdG8gc3Bvb2YgdGhlIGhvc3QgdG8gYSBub24tbnVtZXJpYyBvbmUgYmVjYXVzZSBXZWJwYWNrIERldiBTZXJ2ZXIgZG9lcyBub3RcbiAgLy8gY2hlY2sgdGhlIGhvc3RzIGFueW1vcmUgd2hlbiByZXF1ZXN0cyBjb21lIGZyb20gbnVtZXJpYyBJUCBhZGRyZXNzZXMuXG4gIGNvbnN0IGhlYWRlcnMgPSB7IGhvc3Q6ICdodHRwOi8vc3Bvb2Z5Lm1jc3Bvb2ZmYWNlJyB9O1xuXG4gIGJlZm9yZUVhY2goZG9uZSA9PiBob3N0LmluaXRpYWxpemUoKS50b1Byb21pc2UoKS50aGVuKGRvbmUsIGRvbmUuZmFpbCkpO1xuICBhZnRlckVhY2goZG9uZSA9PiBob3N0LnJlc3RvcmUoKS50b1Byb21pc2UoKS50aGVuKGRvbmUsIGRvbmUuZmFpbCkpO1xuXG4gIGl0KCd3b3JrcycsIChkb25lKSA9PiB7XG4gICAgcnVuVGFyZ2V0U3BlYyhob3N0LCBkZXZTZXJ2ZXJUYXJnZXRTcGVjKS5waXBlKFxuICAgICAgdGFwKChidWlsZEV2ZW50KSA9PiBleHBlY3QoYnVpbGRFdmVudC5zdWNjZXNzKS50b0JlKHRydWUpKSxcbiAgICAgIGNvbmNhdE1hcCgoKSA9PiBmcm9tKHJlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3Q6NDIwMC8nLCBoZWFkZXJzKSkpLFxuICAgICAgdGFwKHJlc3BvbnNlID0+IGV4cGVjdChyZXNwb25zZSkudG9Db250YWluKCdJbnZhbGlkIEhvc3QgaGVhZGVyJykpLFxuICAgICAgdGFrZSgxKSxcbiAgICApLnRvUHJvbWlzZSgpLnRoZW4oZG9uZSwgZG9uZS5mYWlsKTtcbiAgfSwgMzAwMDApO1xuXG4gIGl0KCd3b3JrcycsIChkb25lKSA9PiB7XG4gICAgY29uc3Qgb3ZlcnJpZGVzOiBQYXJ0aWFsPERldlNlcnZlckJ1aWxkZXJPcHRpb25zPiA9IHsgcHVibGljSG9zdDogaGVhZGVycy5ob3N0IH07XG5cbiAgICBydW5UYXJnZXRTcGVjKGhvc3QsIGRldlNlcnZlclRhcmdldFNwZWMsIG92ZXJyaWRlcykucGlwZShcbiAgICAgIHRhcCgoYnVpbGRFdmVudCkgPT4gZXhwZWN0KGJ1aWxkRXZlbnQuc3VjY2VzcykudG9CZSh0cnVlKSksXG4gICAgICBjb25jYXRNYXAoKCkgPT4gZnJvbShyZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0OjQyMDAvJywgaGVhZGVycykpKSxcbiAgICAgIHRhcChyZXNwb25zZSA9PiBleHBlY3QocmVzcG9uc2UpLnRvQ29udGFpbignPHRpdGxlPkhlbGxvV29ybGRBcHA8L3RpdGxlPicpKSxcbiAgICAgIHRha2UoMSksXG4gICAgKS50b1Byb21pc2UoKS50aGVuKGRvbmUsIGRvbmUuZmFpbCk7XG4gIH0sIDMwMDAwKTtcblxuICBpdCgnd29ya3MnLCAoZG9uZSkgPT4ge1xuICAgIGNvbnN0IG92ZXJyaWRlczogUGFydGlhbDxEZXZTZXJ2ZXJCdWlsZGVyT3B0aW9ucz4gPSB7IGRpc2FibGVIb3N0Q2hlY2s6IHRydWUgfTtcblxuICAgIHJ1blRhcmdldFNwZWMoaG9zdCwgZGV2U2VydmVyVGFyZ2V0U3BlYywgb3ZlcnJpZGVzKS5waXBlKFxuICAgICAgdGFwKChidWlsZEV2ZW50KSA9PiBleHBlY3QoYnVpbGRFdmVudC5zdWNjZXNzKS50b0JlKHRydWUpKSxcbiAgICAgIGNvbmNhdE1hcCgoKSA9PiBmcm9tKHJlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3Q6NDIwMC8nLCBoZWFkZXJzKSkpLFxuICAgICAgdGFwKHJlc3BvbnNlID0+IGV4cGVjdChyZXNwb25zZSkudG9Db250YWluKCc8dGl0bGU+SGVsbG9Xb3JsZEFwcDwvdGl0bGU+JykpLFxuICAgICAgdGFrZSgxKSxcbiAgICApLnRvUHJvbWlzZSgpLnRoZW4oZG9uZSwgZG9uZS5mYWlsKTtcbiAgfSwgMzAwMDApO1xufSk7XG4iXX0=