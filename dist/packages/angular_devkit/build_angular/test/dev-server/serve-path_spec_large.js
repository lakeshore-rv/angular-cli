"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/architect/testing");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const utils_1 = require("../utils");
describe('Dev Server Builder serve path', () => {
    beforeEach(done => utils_1.host.initialize().toPromise().then(done, done.fail));
    afterEach(done => utils_1.host.restore().toPromise().then(done, done.fail));
    // TODO: review this test, it seems to pass with or without the servePath.
    it('works', (done) => {
        const overrides = { servePath: 'test/' };
        testing_1.runTargetSpec(utils_1.host, utils_1.devServerTargetSpec, overrides).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true)), operators_1.concatMap(() => rxjs_1.from(testing_1.request('http://localhost:4200/test/'))), operators_1.tap(response => expect(response).toContain('<title>HelloWorldApp</title>')), operators_1.concatMap(() => rxjs_1.from(testing_1.request('http://localhost:4200/test/abc/'))), operators_1.tap(response => expect(response).toContain('<title>HelloWorldApp</title>')), operators_1.take(1)).toPromise().then(done, done.fail);
    }, 30000);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmUtcGF0aF9zcGVjX2xhcmdlLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9lcm5pZWRhdmlzL0NvZGUvYW5ndWxhci1jbGkvIiwic291cmNlcyI6WyJwYWNrYWdlcy9hbmd1bGFyX2RldmtpdC9idWlsZF9hbmd1bGFyL3Rlc3QvZGV2LXNlcnZlci9zZXJ2ZS1wYXRoX3NwZWNfbGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7QUFFSCwrREFBMkU7QUFDM0UsK0JBQTRCO0FBQzVCLDhDQUFzRDtBQUV0RCxvQ0FBcUQ7QUFHckQsUUFBUSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtJQUM3QyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN4RSxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUVwRSwwRUFBMEU7SUFDMUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ25CLE1BQU0sU0FBUyxHQUFxQyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsQ0FBQztRQUUzRSx1QkFBYSxDQUFDLFlBQUksRUFBRSwyQkFBbUIsRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQ3RELGVBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDMUQscUJBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFJLENBQUMsaUJBQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsRUFDN0QsZUFBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLEVBQzNFLHFCQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBSSxDQUFDLGlCQUFPLENBQUMsaUNBQWlDLENBQUMsQ0FBQyxDQUFDLEVBQ2pFLGVBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQUMsOEJBQThCLENBQUMsQ0FBQyxFQUMzRSxnQkFBSSxDQUFDLENBQUMsQ0FBQyxDQUNSLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ1osQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IHJlcXVlc3QsIHJ1blRhcmdldFNwZWMgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvYXJjaGl0ZWN0L3Rlc3RpbmcnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY29uY2F0TWFwLCB0YWtlLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBEZXZTZXJ2ZXJCdWlsZGVyT3B0aW9ucyB9IGZyb20gJy4uLy4uL3NyYyc7XG5pbXBvcnQgeyBkZXZTZXJ2ZXJUYXJnZXRTcGVjLCBob3N0IH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5cbmRlc2NyaWJlKCdEZXYgU2VydmVyIEJ1aWxkZXIgc2VydmUgcGF0aCcsICgpID0+IHtcbiAgYmVmb3JlRWFjaChkb25lID0+IGhvc3QuaW5pdGlhbGl6ZSgpLnRvUHJvbWlzZSgpLnRoZW4oZG9uZSwgZG9uZS5mYWlsKSk7XG4gIGFmdGVyRWFjaChkb25lID0+IGhvc3QucmVzdG9yZSgpLnRvUHJvbWlzZSgpLnRoZW4oZG9uZSwgZG9uZS5mYWlsKSk7XG5cbiAgLy8gVE9ETzogcmV2aWV3IHRoaXMgdGVzdCwgaXQgc2VlbXMgdG8gcGFzcyB3aXRoIG9yIHdpdGhvdXQgdGhlIHNlcnZlUGF0aC5cbiAgaXQoJ3dvcmtzJywgKGRvbmUpID0+IHtcbiAgICBjb25zdCBvdmVycmlkZXM6IFBhcnRpYWw8RGV2U2VydmVyQnVpbGRlck9wdGlvbnM+ID0geyBzZXJ2ZVBhdGg6ICd0ZXN0LycgfTtcblxuICAgIHJ1blRhcmdldFNwZWMoaG9zdCwgZGV2U2VydmVyVGFyZ2V0U3BlYywgb3ZlcnJpZGVzKS5waXBlKFxuICAgICAgdGFwKChidWlsZEV2ZW50KSA9PiBleHBlY3QoYnVpbGRFdmVudC5zdWNjZXNzKS50b0JlKHRydWUpKSxcbiAgICAgIGNvbmNhdE1hcCgoKSA9PiBmcm9tKHJlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3Q6NDIwMC90ZXN0LycpKSksXG4gICAgICB0YXAocmVzcG9uc2UgPT4gZXhwZWN0KHJlc3BvbnNlKS50b0NvbnRhaW4oJzx0aXRsZT5IZWxsb1dvcmxkQXBwPC90aXRsZT4nKSksXG4gICAgICBjb25jYXRNYXAoKCkgPT4gZnJvbShyZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0OjQyMDAvdGVzdC9hYmMvJykpKSxcbiAgICAgIHRhcChyZXNwb25zZSA9PiBleHBlY3QocmVzcG9uc2UpLnRvQ29udGFpbignPHRpdGxlPkhlbGxvV29ybGRBcHA8L3RpdGxlPicpKSxcbiAgICAgIHRha2UoMSksXG4gICAgKS50b1Byb21pc2UoKS50aGVuKGRvbmUsIGRvbmUuZmFpbCk7XG4gIH0sIDMwMDAwKTtcbn0pO1xuIl19