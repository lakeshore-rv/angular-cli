"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/architect/testing");
const core_1 = require("@angular-devkit/core");
const operators_1 = require("rxjs/operators");
const utils_1 = require("../utils");
describe('Extract i18n Target', () => {
    const extractionFile = core_1.join(core_1.normalize('src'), 'messages.xlf');
    beforeEach(done => utils_1.host.initialize().toPromise().then(done, done.fail));
    afterEach(done => utils_1.host.restore().toPromise().then(done, done.fail));
    it('works', (done) => {
        utils_1.host.appendToFile('src/app/app.component.html', '<p i18n>i18n test</p>');
        testing_1.runTargetSpec(utils_1.host, utils_1.extractI18nTargetSpec).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true)), operators_1.tap(() => {
            expect(utils_1.host.scopedSync().exists((extractionFile))).toBe(true);
            expect(core_1.virtualFs.fileBufferToString(utils_1.host.scopedSync().read(extractionFile)))
                .toMatch(/i18n test/);
        })).toPromise().then(done, done.fail);
    }, 30000);
    it('shows errors', (done) => {
        const logger = new testing_1.TestLogger('i18n-errors');
        utils_1.host.appendToFile('src/app/app.component.html', '<p i18n>Hello world <span i18n>inner</span></p>');
        testing_1.runTargetSpec(utils_1.host, utils_1.extractI18nTargetSpec, {}, testing_1.DefaultTimeout, logger).pipe(operators_1.tap((buildEvent) => {
            expect(buildEvent.success).toBe(false);
            const msg = 'Could not mark an element as translatable inside a translatable section';
            expect(logger.includes(msg)).toBe(true);
        })).toPromise().then(done, done.fail);
    }, 30000);
    it('supports locale', (done) => {
        utils_1.host.appendToFile('src/app/app.component.html', '<p i18n>i18n test</p>');
        const overrides = { i18nLocale: 'fr' };
        testing_1.runTargetSpec(utils_1.host, utils_1.extractI18nTargetSpec, overrides).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true)), operators_1.tap(() => {
            expect(utils_1.host.scopedSync().exists((extractionFile))).toBe(true);
            expect(core_1.virtualFs.fileBufferToString(utils_1.host.scopedSync().read(extractionFile)))
                .toContain('source-language="fr"');
        })).toPromise().then(done, done.fail);
    }, 30000);
    it('supports out file', (done) => {
        utils_1.host.appendToFile('src/app/app.component.html', '<p i18n>i18n test</p>');
        const outFile = 'messages.fr.xlf';
        const extractionFile = core_1.join(core_1.normalize('src'), outFile);
        const overrides = { outFile };
        testing_1.runTargetSpec(utils_1.host, utils_1.extractI18nTargetSpec, overrides).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true)), operators_1.tap(() => {
            expect(utils_1.host.scopedSync().exists(extractionFile)).toBe(true);
            expect(core_1.virtualFs.fileBufferToString(utils_1.host.scopedSync().read(extractionFile)))
                .toMatch(/i18n test/);
        })).toPromise().then(done, done.fail);
    }, 30000);
    it('supports output path', (done) => {
        utils_1.host.appendToFile('src/app/app.component.html', '<p i18n>i18n test</p>');
        // Note: this folder will not be created automatically. It must exist beforehand.
        const outputPath = 'app';
        const extractionFile = core_1.join(core_1.normalize('src'), outputPath, 'messages.xlf');
        const overrides = { outputPath };
        testing_1.runTargetSpec(utils_1.host, utils_1.extractI18nTargetSpec, overrides).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true)), operators_1.tap(() => {
            expect(utils_1.host.scopedSync().exists(extractionFile)).toBe(true);
            expect(core_1.virtualFs.fileBufferToString(utils_1.host.scopedSync().read(extractionFile)))
                .toMatch(/i18n test/);
        })).toPromise().then(done, done.fail);
    }, 30000);
    it('supports i18n format', (done) => {
        utils_1.host.appendToFile('src/app/app.component.html', '<p i18n>i18n test</p>');
        const extractionFile = core_1.join(core_1.normalize('src'), 'messages.xmb');
        const overrides = { i18nFormat: 'xmb' };
        testing_1.runTargetSpec(utils_1.host, utils_1.extractI18nTargetSpec, overrides).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true)), operators_1.tap(() => {
            expect(utils_1.host.scopedSync().exists(extractionFile)).toBe(true);
            expect(core_1.virtualFs.fileBufferToString(utils_1.host.scopedSync().read(extractionFile)))
                .toMatch(/i18n test/);
        })).toPromise().then(done, done.fail);
    }, 30000);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya3Nfc3BlY19sYXJnZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZXJuaWVkYXZpcy9Db2RlL2FuZ3VsYXItY2xpLyIsInNvdXJjZXMiOlsicGFja2FnZXMvYW5ndWxhcl9kZXZraXQvYnVpbGRfYW5ndWxhci90ZXN0L2V4dHJhY3QtaTE4bi93b3Jrc19zcGVjX2xhcmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7O0FBRUgsK0RBQThGO0FBQzlGLCtDQUFrRTtBQUNsRSw4Q0FBcUM7QUFDckMsb0NBQXVEO0FBR3ZELFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUU7SUFDbkMsTUFBTSxjQUFjLEdBQUcsV0FBSSxDQUFDLGdCQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFFOUQsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDeEUsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFcEUsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ25CLFlBQUksQ0FBQyxZQUFZLENBQUMsNEJBQTRCLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztRQUV6RSx1QkFBYSxDQUFDLFlBQUksRUFBRSw2QkFBcUIsQ0FBQyxDQUFDLElBQUksQ0FDN0MsZUFBRyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUMxRCxlQUFHLENB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TSxDQUFDLFlBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUQsTUFBTSxDQUFDLGdCQUFTLENBQUMsa0JBQWtCLENBQUMsWUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO2lCQUN6RSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQ0gsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDWixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHsgRGVmYXVsdFRpbWVvdXQsIFRlc3RMb2dnZXIsIHJ1blRhcmdldFNwZWMgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvYXJjaGl0ZWN0L3Rlc3RpbmcnO1xuaW1wb3J0IHsgam9pbiwgbm9ybWFsaXplLCB2aXJ0dWFsRnMgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvY29yZSc7XG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBleHRyYWN0STE4blRhcmdldFNwZWMsIGhvc3QgfSBmcm9tICcuLi91dGlscyc7XG5cblxuZGVzY3JpYmUoJ0V4dHJhY3QgaTE4biBUYXJnZXQnLCAoKSA9PiB7XG4gIGNvbnN0IGV4dHJhY3Rpb25GaWxlID0gam9pbihub3JtYWxpemUoJ3NyYycpLCAnbWVzc2FnZXMueGxmJyk7XG5cbiAgYmVmb3JlRWFjaChkb25lID0+IGhvc3QuaW5pdGlhbGl6ZSgpLnRvUHJvbWlzZSgpLnRoZW4oZG9uZSwgZG9uZS5mYWlsKSk7XG4gIGFmdGVyRWFjaChkb25lID0+IGhvc3QucmVzdG9yZSgpLnRvUHJvbWlzZSgpLnRoZW4oZG9uZSwgZG9uZS5mYWlsKSk7XG5cbiAgaXQoJ3dvcmtzJywgKGRvbmUpID0+IHtcbiAgICBob3N0LmFwcGVuZFRvRmlsZSgnc3JjL2FwcC9hcHAuY29tcG9uZW50Lmh0bWwnLCAnPHAgaTE4bj5pMThuIHRlc3Q8L3A+Jyk7XG5cbiAgICBydW5UYXJnZXRTcGVjKGhvc3QsIGV4dHJhY3RJMThuVGFyZ2V0U3BlYykucGlwZShcbiAgICAgIHRhcCgoYnVpbGRFdmVudCkgPT4gZXhwZWN0KGJ1aWxkRXZlbnQuc3VjY2VzcykudG9CZSh0cnVlKSksXG4gICAgICB0YXAoKCkgPT4ge1xuICAgICAgICBleHBlY3QoaG9zdC5zY29wZWRTeW5jKCkuZXhpc3RzKChleHRyYWN0aW9uRmlsZSkpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QodmlydHVhbEZzLmZpbGVCdWZmZXJUb1N0cmluZyhob3N0LnNjb3BlZFN5bmMoKS5yZWFkKGV4dHJhY3Rpb25GaWxlKSkpXG4gICAgICAgICAgLnRvTWF0Y2goL2kxOG4gdGVzdC8pO1xuICAgICAgfSksXG4gICAgKS50b1Byb21pc2UoKS50aGVuKGRvbmUsIGRvbmUuZmFpbCk7XG4gIH0sIDMwMDAwKTtcblxuICBpdCgnc2hvd3MgZXJyb3JzJywgKGRvbmUpID0+IHtcbiAgICBjb25zdCBsb2dnZXIgPSBuZXcgVGVzdExvZ2dlcignaTE4bi1lcnJvcnMnKTtcbiAgICBob3N0LmFwcGVuZFRvRmlsZSgnc3JjL2FwcC9hcHAuY29tcG9uZW50Lmh0bWwnLFxuICAgICAgJzxwIGkxOG4+SGVsbG8gd29ybGQgPHNwYW4gaTE4bj5pbm5lcjwvc3Bhbj48L3A+Jyk7XG5cbiAgICBydW5UYXJnZXRTcGVjKGhvc3QsIGV4dHJhY3RJMThuVGFyZ2V0U3BlYywge30sIERlZmF1bHRUaW1lb3V0LCBsb2dnZXIpLnBpcGUoXG4gICAgICB0YXAoKGJ1aWxkRXZlbnQpID0+IHtcbiAgICAgICAgZXhwZWN0KGJ1aWxkRXZlbnQuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICAgIGNvbnN0IG1zZyA9ICdDb3VsZCBub3QgbWFyayBhbiBlbGVtZW50IGFzIHRyYW5zbGF0YWJsZSBpbnNpZGUgYSB0cmFuc2xhdGFibGUgc2VjdGlvbic7XG4gICAgICAgIGV4cGVjdChsb2dnZXIuaW5jbHVkZXMobXNnKSkudG9CZSh0cnVlKTtcbiAgICAgIH0pLFxuICAgICkudG9Qcm9taXNlKCkudGhlbihkb25lLCBkb25lLmZhaWwpO1xuICB9LCAzMDAwMCk7XG5cbiAgaXQoJ3N1cHBvcnRzIGxvY2FsZScsIChkb25lKSA9PiB7XG4gICAgaG9zdC5hcHBlbmRUb0ZpbGUoJ3NyYy9hcHAvYXBwLmNvbXBvbmVudC5odG1sJywgJzxwIGkxOG4+aTE4biB0ZXN0PC9wPicpO1xuICAgIGNvbnN0IG92ZXJyaWRlcyA9IHsgaTE4bkxvY2FsZTogJ2ZyJyB9O1xuXG4gICAgcnVuVGFyZ2V0U3BlYyhob3N0LCBleHRyYWN0STE4blRhcmdldFNwZWMsIG92ZXJyaWRlcykucGlwZShcbiAgICAgIHRhcCgoYnVpbGRFdmVudCkgPT4gZXhwZWN0KGJ1aWxkRXZlbnQuc3VjY2VzcykudG9CZSh0cnVlKSksXG4gICAgICB0YXAoKCkgPT4ge1xuICAgICAgICBleHBlY3QoaG9zdC5zY29wZWRTeW5jKCkuZXhpc3RzKChleHRyYWN0aW9uRmlsZSkpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QodmlydHVhbEZzLmZpbGVCdWZmZXJUb1N0cmluZyhob3N0LnNjb3BlZFN5bmMoKS5yZWFkKGV4dHJhY3Rpb25GaWxlKSkpXG4gICAgICAgICAgLnRvQ29udGFpbignc291cmNlLWxhbmd1YWdlPVwiZnJcIicpO1xuICAgICAgfSksXG4gICAgKS50b1Byb21pc2UoKS50aGVuKGRvbmUsIGRvbmUuZmFpbCk7XG4gIH0sIDMwMDAwKTtcblxuICBpdCgnc3VwcG9ydHMgb3V0IGZpbGUnLCAoZG9uZSkgPT4ge1xuICAgIGhvc3QuYXBwZW5kVG9GaWxlKCdzcmMvYXBwL2FwcC5jb21wb25lbnQuaHRtbCcsICc8cCBpMThuPmkxOG4gdGVzdDwvcD4nKTtcbiAgICBjb25zdCBvdXRGaWxlID0gJ21lc3NhZ2VzLmZyLnhsZic7XG4gICAgY29uc3QgZXh0cmFjdGlvbkZpbGUgPSBqb2luKG5vcm1hbGl6ZSgnc3JjJyksIG91dEZpbGUpO1xuICAgIGNvbnN0IG92ZXJyaWRlcyA9IHsgb3V0RmlsZSB9O1xuXG4gICAgcnVuVGFyZ2V0U3BlYyhob3N0LCBleHRyYWN0STE4blRhcmdldFNwZWMsIG92ZXJyaWRlcykucGlwZShcbiAgICAgIHRhcCgoYnVpbGRFdmVudCkgPT4gZXhwZWN0KGJ1aWxkRXZlbnQuc3VjY2VzcykudG9CZSh0cnVlKSksXG4gICAgICB0YXAoKCkgPT4ge1xuICAgICAgICBleHBlY3QoaG9zdC5zY29wZWRTeW5jKCkuZXhpc3RzKGV4dHJhY3Rpb25GaWxlKSkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KHZpcnR1YWxGcy5maWxlQnVmZmVyVG9TdHJpbmcoaG9zdC5zY29wZWRTeW5jKCkucmVhZChleHRyYWN0aW9uRmlsZSkpKVxuICAgICAgICAgIC50b01hdGNoKC9pMThuIHRlc3QvKTtcbiAgICAgIH0pLFxuICAgICkudG9Qcm9taXNlKCkudGhlbihkb25lLCBkb25lLmZhaWwpO1xuICB9LCAzMDAwMCk7XG5cbiAgaXQoJ3N1cHBvcnRzIG91dHB1dCBwYXRoJywgKGRvbmUpID0+IHtcbiAgICBob3N0LmFwcGVuZFRvRmlsZSgnc3JjL2FwcC9hcHAuY29tcG9uZW50Lmh0bWwnLCAnPHAgaTE4bj5pMThuIHRlc3Q8L3A+Jyk7XG4gICAgLy8gTm90ZTogdGhpcyBmb2xkZXIgd2lsbCBub3QgYmUgY3JlYXRlZCBhdXRvbWF0aWNhbGx5LiBJdCBtdXN0IGV4aXN0IGJlZm9yZWhhbmQuXG4gICAgY29uc3Qgb3V0cHV0UGF0aCA9ICdhcHAnO1xuICAgIGNvbnN0IGV4dHJhY3Rpb25GaWxlID0gam9pbihub3JtYWxpemUoJ3NyYycpLCBvdXRwdXRQYXRoLCAnbWVzc2FnZXMueGxmJyk7XG4gICAgY29uc3Qgb3ZlcnJpZGVzID0geyBvdXRwdXRQYXRoIH07XG5cbiAgICBydW5UYXJnZXRTcGVjKGhvc3QsIGV4dHJhY3RJMThuVGFyZ2V0U3BlYywgb3ZlcnJpZGVzKS5waXBlKFxuICAgICAgdGFwKChidWlsZEV2ZW50KSA9PiBleHBlY3QoYnVpbGRFdmVudC5zdWNjZXNzKS50b0JlKHRydWUpKSxcbiAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgIGV4cGVjdChob3N0LnNjb3BlZFN5bmMoKS5leGlzdHMoZXh0cmFjdGlvbkZpbGUpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QodmlydHVhbEZzLmZpbGVCdWZmZXJUb1N0cmluZyhob3N0LnNjb3BlZFN5bmMoKS5yZWFkKGV4dHJhY3Rpb25GaWxlKSkpXG4gICAgICAgICAgLnRvTWF0Y2goL2kxOG4gdGVzdC8pO1xuICAgICAgfSksXG4gICAgKS50b1Byb21pc2UoKS50aGVuKGRvbmUsIGRvbmUuZmFpbCk7XG4gIH0sIDMwMDAwKTtcblxuICBpdCgnc3VwcG9ydHMgaTE4biBmb3JtYXQnLCAoZG9uZSkgPT4ge1xuICAgIGhvc3QuYXBwZW5kVG9GaWxlKCdzcmMvYXBwL2FwcC5jb21wb25lbnQuaHRtbCcsICc8cCBpMThuPmkxOG4gdGVzdDwvcD4nKTtcbiAgICBjb25zdCBleHRyYWN0aW9uRmlsZSA9IGpvaW4obm9ybWFsaXplKCdzcmMnKSwgJ21lc3NhZ2VzLnhtYicpO1xuICAgIGNvbnN0IG92ZXJyaWRlcyA9IHsgaTE4bkZvcm1hdDogJ3htYicgfTtcblxuICAgIHJ1blRhcmdldFNwZWMoaG9zdCwgZXh0cmFjdEkxOG5UYXJnZXRTcGVjLCBvdmVycmlkZXMpLnBpcGUoXG4gICAgICB0YXAoKGJ1aWxkRXZlbnQpID0+IGV4cGVjdChidWlsZEV2ZW50LnN1Y2Nlc3MpLnRvQmUodHJ1ZSkpLFxuICAgICAgdGFwKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KGhvc3Quc2NvcGVkU3luYygpLmV4aXN0cyhleHRyYWN0aW9uRmlsZSkpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdCh2aXJ0dWFsRnMuZmlsZUJ1ZmZlclRvU3RyaW5nKGhvc3Quc2NvcGVkU3luYygpLnJlYWQoZXh0cmFjdGlvbkZpbGUpKSlcbiAgICAgICAgICAudG9NYXRjaCgvaTE4biB0ZXN0Lyk7XG4gICAgICB9KSxcbiAgICApLnRvUHJvbWlzZSgpLnRoZW4oZG9uZSwgZG9uZS5mYWlsKTtcbiAgfSwgMzAwMDApO1xufSk7XG4iXX0=