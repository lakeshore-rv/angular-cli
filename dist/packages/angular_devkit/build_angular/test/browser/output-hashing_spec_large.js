"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/architect/testing");
const core_1 = require("@angular-devkit/core");
const operators_1 = require("rxjs/operators");
const utils_1 = require("../utils");
const lazy_module_spec_large_1 = require("./lazy-module_spec_large");
describe('Browser Builder output hashing', () => {
    beforeEach(done => utils_1.host.initialize().toPromise().then(done, done.fail));
    afterEach(done => utils_1.host.restore().toPromise().then(done, done.fail));
    it('updates hash as content changes', (done) => {
        const OUTPUT_RE = /(main|styles|lazy\.module)\.([a-z0-9]+)\.(chunk|bundle)\.(js|css)$/;
        function generateFileHashMap() {
            const hashes = new Map();
            utils_1.host.scopedSync().list(core_1.normalize('./dist')).forEach(name => {
                const matches = name.match(OUTPUT_RE);
                if (matches) {
                    const [, module, hash] = matches;
                    hashes.set(module, hash);
                }
            });
            return hashes;
        }
        function validateHashes(oldHashes, newHashes, shouldChange) {
            newHashes.forEach((hash, module) => {
                if (hash == oldHashes.get(module)) {
                    if (shouldChange.includes(module)) {
                        throw new Error(`Module "${module}" did not change hash (${hash}), but was expected to.`);
                    }
                }
                else if (!shouldChange.includes(module)) {
                    throw new Error(`Module "${module}" changed hash (${hash}), but was not expected to.`);
                }
            });
        }
        let oldHashes;
        let newHashes;
        utils_1.host.writeMultipleFiles(lazy_module_spec_large_1.lazyModuleFiles);
        utils_1.host.writeMultipleFiles(lazy_module_spec_large_1.lazyModuleImport);
        const overrides = { outputHashing: 'all', extractCss: true };
        // We must do several builds instead of a single one in watch mode, so that the output
        // path is deleted on each run and only contains the most recent files.
        testing_1.runTargetSpec(utils_1.host, utils_1.browserTargetSpec, overrides, testing_1.DefaultTimeout * 3).pipe(operators_1.tap(() => {
            // Save the current hashes.
            oldHashes = generateFileHashMap();
            utils_1.host.writeMultipleFiles(lazy_module_spec_large_1.lazyModuleFiles);
            utils_1.host.writeMultipleFiles(lazy_module_spec_large_1.lazyModuleImport);
        }), 
        // Lazy chunk hash should have changed without modifying main bundle.
        operators_1.concatMap(() => testing_1.runTargetSpec(utils_1.host, utils_1.browserTargetSpec, overrides)), operators_1.tap(() => {
            newHashes = generateFileHashMap();
            validateHashes(oldHashes, newHashes, []);
            oldHashes = newHashes;
            utils_1.host.writeMultipleFiles({ 'src/styles.css': 'body { background: blue; }' });
        }), 
        // Style hash should change.
        operators_1.concatMap(() => testing_1.runTargetSpec(utils_1.host, utils_1.browserTargetSpec, overrides)), operators_1.tap(() => {
            newHashes = generateFileHashMap();
            validateHashes(oldHashes, newHashes, ['styles']);
            oldHashes = newHashes;
            utils_1.host.writeMultipleFiles({ 'src/app/app.component.css': 'h1 { margin: 10px; }' });
        }), 
        // Main hash should change, since inline styles go in the main bundle.
        operators_1.concatMap(() => testing_1.runTargetSpec(utils_1.host, utils_1.browserTargetSpec, overrides)), operators_1.tap(() => {
            newHashes = generateFileHashMap();
            validateHashes(oldHashes, newHashes, ['main']);
            oldHashes = newHashes;
            utils_1.host.appendToFile('src/app/lazy/lazy.module.ts', `console.log(1);`);
        }), 
        // Lazy loaded bundle should change, and so should inline.
        operators_1.concatMap(() => testing_1.runTargetSpec(utils_1.host, utils_1.browserTargetSpec, overrides)), operators_1.tap(() => {
            newHashes = generateFileHashMap();
            validateHashes(oldHashes, newHashes, ['lazy.module']);
            oldHashes = newHashes;
            utils_1.host.appendToFile('src/main.ts', '');
        }), 
        // Nothing should have changed.
        operators_1.concatMap(() => testing_1.runTargetSpec(utils_1.host, utils_1.browserTargetSpec, overrides)), operators_1.tap(() => {
            newHashes = generateFileHashMap();
            validateHashes(oldHashes, newHashes, []);
        })).toPromise().then(done, done.fail);
    });
    it('supports options', (done) => {
        utils_1.host.writeMultipleFiles({ 'src/styles.css': `h1 { background: url('./spectrum.png')}` });
        utils_1.host.writeMultipleFiles(lazy_module_spec_large_1.lazyModuleFiles);
        utils_1.host.writeMultipleFiles(lazy_module_spec_large_1.lazyModuleImport);
        const overrides = { outputHashing: 'all', extractCss: true };
        // We must do several builds instead of a single one in watch mode, so that the output
        // path is deleted on each run and only contains the most recent files.
        // 'all' should hash everything.
        testing_1.runTargetSpec(utils_1.host, utils_1.browserTargetSpec, overrides, testing_1.DefaultTimeout * 2).pipe(operators_1.tap(() => {
            expect(utils_1.host.fileMatchExists('dist', /runtime\.[0-9a-f]{20}\.js/)).toBeTruthy();
            expect(utils_1.host.fileMatchExists('dist', /main\.[0-9a-f]{20}\.js/)).toBeTruthy();
            expect(utils_1.host.fileMatchExists('dist', /polyfills\.[0-9a-f]{20}\.js/)).toBeTruthy();
            expect(utils_1.host.fileMatchExists('dist', /vendor\.[0-9a-f]{20}\.js/)).toBeTruthy();
            expect(utils_1.host.fileMatchExists('dist', /styles\.[0-9a-f]{20}\.css/)).toBeTruthy();
            expect(utils_1.host.fileMatchExists('dist', /spectrum\.[0-9a-f]{20}\.png/)).toBeTruthy();
        }), 
        // 'none' should hash nothing.
        operators_1.concatMap(() => testing_1.runTargetSpec(utils_1.host, utils_1.browserTargetSpec, { outputHashing: 'none', extractCss: true })), operators_1.tap(() => {
            expect(utils_1.host.fileMatchExists('dist', /runtime\.[0-9a-f]{20}\.js/)).toBeFalsy();
            expect(utils_1.host.fileMatchExists('dist', /main\.[0-9a-f]{20}\.js/)).toBeFalsy();
            expect(utils_1.host.fileMatchExists('dist', /polyfills\.[0-9a-f]{20}\.js/)).toBeFalsy();
            expect(utils_1.host.fileMatchExists('dist', /vendor\.[0-9a-f]{20}\.js/)).toBeFalsy();
            expect(utils_1.host.fileMatchExists('dist', /styles\.[0-9a-f]{20}\.css/)).toBeFalsy();
            expect(utils_1.host.fileMatchExists('dist', /spectrum\.[0-9a-f]{20}\.png/)).toBeFalsy();
        }), 
        // 'media' should hash css resources only.
        operators_1.concatMap(() => testing_1.runTargetSpec(utils_1.host, utils_1.browserTargetSpec, { outputHashing: 'media', extractCss: true })), operators_1.tap(() => {
            expect(utils_1.host.fileMatchExists('dist', /runtime\.[0-9a-f]{20}\.js/)).toBeFalsy();
            expect(utils_1.host.fileMatchExists('dist', /main\.[0-9a-f]{20}\.js/)).toBeFalsy();
            expect(utils_1.host.fileMatchExists('dist', /polyfills\.[0-9a-f]{20}\.js/)).toBeFalsy();
            expect(utils_1.host.fileMatchExists('dist', /vendor\.[0-9a-f]{20}\.js/)).toBeFalsy();
            expect(utils_1.host.fileMatchExists('dist', /styles\.[0-9a-f]{20}\.css/)).toBeFalsy();
            expect(utils_1.host.fileMatchExists('dist', /spectrum\.[0-9a-f]{20}\.png/)).toBeTruthy();
        }), 
        // 'bundles' should hash bundles only.
        operators_1.concatMap(() => testing_1.runTargetSpec(utils_1.host, utils_1.browserTargetSpec, { outputHashing: 'bundles', extractCss: true })), operators_1.tap(() => {
            expect(utils_1.host.fileMatchExists('dist', /runtime\.[0-9a-f]{20}\.js/)).toBeTruthy();
            expect(utils_1.host.fileMatchExists('dist', /main\.[0-9a-f]{20}\.js/)).toBeTruthy();
            expect(utils_1.host.fileMatchExists('dist', /polyfills\.[0-9a-f]{20}\.js/)).toBeTruthy();
            expect(utils_1.host.fileMatchExists('dist', /vendor\.[0-9a-f]{20}\.js/)).toBeTruthy();
            expect(utils_1.host.fileMatchExists('dist', /styles\.[0-9a-f]{20}\.css/)).toBeTruthy();
            expect(utils_1.host.fileMatchExists('dist', /spectrum\.[0-9a-f]{20}\.png/)).toBeFalsy();
        })).toPromise().then(done, done.fail);
    });
    it('does not hash lazy styles', (done) => {
        const overrides = {
            outputHashing: 'all',
            extractCss: true,
            styles: [{ input: 'src/styles.css', lazy: true }],
        };
        testing_1.runTargetSpec(utils_1.host, utils_1.browserTargetSpec, overrides, testing_1.DefaultTimeout).pipe(operators_1.tap(() => {
            expect(utils_1.host.fileMatchExists('dist', /styles\.[0-9a-f]{20}\.js/)).toBeFalsy();
            expect(utils_1.host.fileMatchExists('dist', /styles\.[0-9a-f]{20}\.js.map/)).toBeFalsy();
            expect(utils_1.host.scopedSync().exists(core_1.normalize('dist/styles.css'))).toBe(true);
            expect(utils_1.host.scopedSync().exists(core_1.normalize('dist/styles.css.map'))).toBe(true);
        })).toPromise().then(done, done.fail);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0cHV0LWhhc2hpbmdfc3BlY19sYXJnZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZXJuaWVkYXZpcy9Db2RlL2FuZ3VsYXItY2xpLyIsInNvdXJjZXMiOlsicGFja2FnZXMvYW5ndWxhcl9kZXZraXQvYnVpbGRfYW5ndWxhci90ZXN0L2Jyb3dzZXIvb3V0cHV0LWhhc2hpbmdfc3BlY19sYXJnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOztBQUVILCtEQUFrRjtBQUNsRiwrQ0FBaUQ7QUFDakQsOENBQWdEO0FBQ2hELG9DQUFtRDtBQUNuRCxxRUFBNkU7QUFHN0UsUUFBUSxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsRUFBRTtJQUM5QyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN4RSxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUVwRSxFQUFFLENBQUMsaUNBQWlDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUM3QyxNQUFNLFNBQVMsR0FBRyxvRUFBb0UsQ0FBQztRQUV2RjtZQUNFLE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxFQUFrQixDQUFDO1lBRXpDLFlBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDekQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDdEMsSUFBSSxPQUFPLEVBQUU7b0JBQ1gs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QUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoRixDQUFDLENBQUMsQ0FDSCxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IERlZmF1bHRUaW1lb3V0LCBydW5UYXJnZXRTcGVjIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2FyY2hpdGVjdC90ZXN0aW5nJztcbmltcG9ydCB7IG5vcm1hbGl6ZSB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcbmltcG9ydCB7IGNvbmNhdE1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgYnJvd3NlclRhcmdldFNwZWMsIGhvc3QgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBsYXp5TW9kdWxlRmlsZXMsIGxhenlNb2R1bGVJbXBvcnQgfSBmcm9tICcuL2xhenktbW9kdWxlX3NwZWNfbGFyZ2UnO1xuXG5cbmRlc2NyaWJlKCdCcm93c2VyIEJ1aWxkZXIgb3V0cHV0IGhhc2hpbmcnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goZG9uZSA9PiBob3N0LmluaXRpYWxpemUoKS50b1Byb21pc2UoKS50aGVuKGRvbmUsIGRvbmUuZmFpbCkpO1xuICBhZnRlckVhY2goZG9uZSA9PiBob3N0LnJlc3RvcmUoKS50b1Byb21pc2UoKS50aGVuKGRvbmUsIGRvbmUuZmFpbCkpO1xuXG4gIGl0KCd1cGRhdGVzIGhhc2ggYXMgY29udGVudCBjaGFuZ2VzJywgKGRvbmUpID0+IHtcbiAgICBjb25zdCBPVVRQVVRfUkUgPSAvKG1haW58c3R5bGVzfGxhenlcXC5tb2R1bGUpXFwuKFthLXowLTldKylcXC4oY2h1bmt8YnVuZGxlKVxcLihqc3xjc3MpJC87XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUZpbGVIYXNoTWFwKCk6IE1hcDxzdHJpbmcsIHN0cmluZz4ge1xuICAgICAgY29uc3QgaGFzaGVzID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcblxuICAgICAgaG9zdC5zY29wZWRTeW5jKCkubGlzdChub3JtYWxpemUoJy4vZGlzdCcpKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICBjb25zdCBtYXRjaGVzID0gbmFtZS5tYXRjaChPVVRQVVRfUkUpO1xuICAgICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICAgIGNvbnN0IFssIG1vZHVsZSwgaGFzaF0gPSBtYXRjaGVzO1xuICAgICAgICAgIGhhc2hlcy5zZXQobW9kdWxlLCBoYXNoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBoYXNoZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVIYXNoZXMoXG4gICAgICBvbGRIYXNoZXM6IE1hcDxzdHJpbmcsIHN0cmluZz4sXG4gICAgICBuZXdIYXNoZXM6IE1hcDxzdHJpbmcsIHN0cmluZz4sXG4gICAgICBzaG91bGRDaGFuZ2U6IEFycmF5PHN0cmluZz4sXG4gICAgKTogdm9pZCB7XG4gICAgICBuZXdIYXNoZXMuZm9yRWFjaCgoaGFzaCwgbW9kdWxlKSA9PiB7XG4gICAgICAgIGlmIChoYXNoID09IG9sZEhhc2hlcy5nZXQobW9kdWxlKSkge1xuICAgICAgICAgIGlmIChzaG91bGRDaGFuZ2UuaW5jbHVkZXMobW9kdWxlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBgTW9kdWxlIFwiJHttb2R1bGV9XCIgZGlkIG5vdCBjaGFuZ2UgaGFzaCAoJHtoYXNofSksIGJ1dCB3YXMgZXhwZWN0ZWQgdG8uYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFzaG91bGRDaGFuZ2UuaW5jbHVkZXMobW9kdWxlKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTW9kdWxlIFwiJHttb2R1bGV9XCIgY2hhbmdlZCBoYXNoICgke2hhc2h9KSwgYnV0IHdhcyBub3QgZXhwZWN0ZWQgdG8uYCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGxldCBvbGRIYXNoZXM6IE1hcDxzdHJpbmcsIHN0cmluZz47XG4gICAgbGV0IG5ld0hhc2hlczogTWFwPHN0cmluZywgc3RyaW5nPjtcblxuICAgIGhvc3Qud3JpdGVNdWx0aXBsZUZpbGVzKGxhenlNb2R1bGVGaWxlcyk7XG4gICAgaG9zdC53cml0ZU11bHRpcGxlRmlsZXMobGF6eU1vZHVsZUltcG9ydCk7XG5cbiAgICBjb25zdCBvdmVycmlkZXMgPSB7IG91dHB1dEhhc2hpbmc6ICdhbGwnLCBleHRyYWN0Q3NzOiB0cnVlIH07XG5cbiAgICAvLyBXZSBtdXN0IGRvIHNldmVyYWwgYnVpbGRzIGluc3RlYWQgb2YgYSBzaW5nbGUgb25lIGluIHdhdGNoIG1vZGUsIHNvIHRoYXQgdGhlIG91dHB1dFxuICAgIC8vIHBhdGggaXMgZGVsZXRlZCBvbiBlYWNoIHJ1biBhbmQgb25seSBjb250YWlucyB0aGUgbW9zdCByZWNlbnQgZmlsZXMuXG4gICAgcnVuVGFyZ2V0U3BlYyhob3N0LCBicm93c2VyVGFyZ2V0U3BlYywgb3ZlcnJpZGVzLCBEZWZhdWx0VGltZW91dCAqIDMpLnBpcGUoXG4gICAgICB0YXAoKCkgPT4ge1xuICAgICAgICAvLyBTYXZlIHRoZSBjdXJyZW50IGhhc2hlcy5cbiAgICAgICAgb2xkSGFzaGVzID0gZ2VuZXJhdGVGaWxlSGFzaE1hcCgpO1xuICAgICAgICBob3N0LndyaXRlTXVsdGlwbGVGaWxlcyhsYXp5TW9kdWxlRmlsZXMpO1xuICAgICAgICBob3N0LndyaXRlTXVsdGlwbGVGaWxlcyhsYXp5TW9kdWxlSW1wb3J0KTtcbiAgICAgIH0pLFxuICAgICAgLy8gTGF6eSBjaHVuayBoYXNoIHNob3VsZCBoYXZlIGNoYW5nZWQgd2l0aG91dCBtb2RpZnlpbmcgbWFpbiBidW5kbGUuXG4gICAgICBjb25jYXRNYXAoKCkgPT4gcnVuVGFyZ2V0U3BlYyhob3N0LCBicm93c2VyVGFyZ2V0U3BlYywgb3ZlcnJpZGVzKSksXG4gICAgICB0YXAoKCkgPT4ge1xuICAgICAgICBuZXdIYXNoZXMgPSBnZW5lcmF0ZUZpbGVIYXNoTWFwKCk7XG4gICAgICAgIHZhbGlkYXRlSGFzaGVzKG9sZEhhc2hlcywgbmV3SGFzaGVzLCBbXSk7XG4gICAgICAgIG9sZEhhc2hlcyA9IG5ld0hhc2hlcztcbiAgICAgICAgaG9zdC53cml0ZU11bHRpcGxlRmlsZXMoeyAnc3JjL3N0eWxlcy5jc3MnOiAnYm9keSB7IGJhY2tncm91bmQ6IGJsdWU7IH0nIH0pO1xuICAgICAgfSksXG4gICAgICAvLyBTdHlsZSBoYXNoIHNob3VsZCBjaGFuZ2UuXG4gICAgICBjb25jYXRNYXAoKCkgPT4gcnVuVGFyZ2V0U3BlYyhob3N0LCBicm93c2VyVGFyZ2V0U3BlYywgb3ZlcnJpZGVzKSksXG4gICAgICB0YXAoKCkgPT4ge1xuICAgICAgICBuZXdIYXNoZXMgPSBnZW5lcmF0ZUZpbGVIYXNoTWFwKCk7XG4gICAgICAgIHZhbGlkYXRlSGFzaGVzKG9sZEhhc2hlcywgbmV3SGFzaGVzLCBbJ3N0eWxlcyddKTtcbiAgICAgICAgb2xkSGFzaGVzID0gbmV3SGFzaGVzO1xuICAgICAgICBob3N0LndyaXRlTXVsdGlwbGVGaWxlcyh7ICdzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzJzogJ2gxIHsgbWFyZ2luOiAxMHB4OyB9JyB9KTtcbiAgICAgIH0pLFxuICAgICAgLy8gTWFpbiBoYXNoIHNob3VsZCBjaGFuZ2UsIHNpbmNlIGlubGluZSBzdHlsZXMgZ28gaW4gdGhlIG1haW4gYnVuZGxlLlxuICAgICAgY29uY2F0TWFwKCgpID0+IHJ1blRhcmdldFNwZWMoaG9zdCwgYnJvd3NlclRhcmdldFNwZWMsIG92ZXJyaWRlcykpLFxuICAgICAgdGFwKCgpID0+IHtcbiAgICAgICAgbmV3SGFzaGVzID0gZ2VuZXJhdGVGaWxlSGFzaE1hcCgpO1xuICAgICAgICB2YWxpZGF0ZUhhc2hlcyhvbGRIYXNoZXMsIG5ld0hhc2hlcywgWydtYWluJ10pO1xuICAgICAgICBvbGRIYXNoZXMgPSBuZXdIYXNoZXM7XG4gICAgICAgIGhvc3QuYXBwZW5kVG9GaWxlKCdzcmMvYXBwL2xhenkvbGF6eS5tb2R1bGUudHMnLCBgY29uc29sZS5sb2coMSk7YCk7XG4gICAgICB9KSxcbiAgICAgIC8vIExhenkgbG9hZGVkIGJ1bmRsZSBzaG91bGQgY2hhbmdlLCBhbmQgc28gc2hvdWxkIGlubGluZS5cbiAgICAgIGNvbmNhdE1hcCgoKSA9PiBydW5UYXJnZXRTcGVjKGhvc3QsIGJyb3dzZXJUYXJnZXRTcGVjLCBvdmVycmlkZXMpKSxcbiAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgIG5ld0hhc2hlcyA9IGdlbmVyYXRlRmlsZUhhc2hNYXAoKTtcbiAgICAgICAgdmFsaWRhdGVIYXNoZXMob2xkSGFzaGVzLCBuZXdIYXNoZXMsIFsnbGF6eS5tb2R1bGUnXSk7XG4gICAgICAgIG9sZEhhc2hlcyA9IG5ld0hhc2hlcztcbiAgICAgICAgaG9zdC5hcHBlbmRUb0ZpbGUoJ3NyYy9tYWluLnRzJywgJycpO1xuICAgICAgfSksXG4gICAgICAvLyBOb3RoaW5nIHNob3VsZCBoYXZlIGNoYW5nZWQuXG4gICAgICBjb25jYXRNYXAoKCkgPT4gcnVuVGFyZ2V0U3BlYyhob3N0LCBicm93c2VyVGFyZ2V0U3BlYywgb3ZlcnJpZGVzKSksXG4gICAgICB0YXAoKCkgPT4ge1xuICAgICAgICBuZXdIYXNoZXMgPSBnZW5lcmF0ZUZpbGVIYXNoTWFwKCk7XG4gICAgICAgIHZhbGlkYXRlSGFzaGVzKG9sZEhhc2hlcywgbmV3SGFzaGVzLCBbXSk7XG4gICAgICB9KSxcbiAgICApLnRvUHJvbWlzZSgpLnRoZW4oZG9uZSwgZG9uZS5mYWlsKTtcbiAgfSk7XG5cbiAgaXQoJ3N1cHBvcnRzIG9wdGlvbnMnLCAoZG9uZSkgPT4ge1xuICAgIGhvc3Qud3JpdGVNdWx0aXBsZUZpbGVzKHsgJ3NyYy9zdHlsZXMuY3NzJzogYGgxIHsgYmFja2dyb3VuZDogdXJsKCcuL3NwZWN0cnVtLnBuZycpfWAgfSk7XG4gICAgaG9zdC53cml0ZU11bHRpcGxlRmlsZXMobGF6eU1vZHVsZUZpbGVzKTtcbiAgICBob3N0LndyaXRlTXVsdGlwbGVGaWxlcyhsYXp5TW9kdWxlSW1wb3J0KTtcblxuICAgIGNvbnN0IG92ZXJyaWRlcyA9IHsgb3V0cHV0SGFzaGluZzogJ2FsbCcsIGV4dHJhY3RDc3M6IHRydWUgfTtcblxuICAgIC8vIFdlIG11c3QgZG8gc2V2ZXJhbCBidWlsZHMgaW5zdGVhZCBvZiBhIHNpbmdsZSBvbmUgaW4gd2F0Y2ggbW9kZSwgc28gdGhhdCB0aGUgb3V0cHV0XG4gICAgLy8gcGF0aCBpcyBkZWxldGVkIG9uIGVhY2ggcnVuIGFuZCBvbmx5IGNvbnRhaW5zIHRoZSBtb3N0IHJlY2VudCBmaWxlcy5cbiAgICAvLyAnYWxsJyBzaG91bGQgaGFzaCBldmVyeXRoaW5nLlxuICAgIHJ1blRhcmdldFNwZWMoaG9zdCwgYnJvd3NlclRhcmdldFNwZWMsIG92ZXJyaWRlcywgRGVmYXVsdFRpbWVvdXQgKiAyKS5waXBlKFxuICAgICAgdGFwKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KGhvc3QuZmlsZU1hdGNoRXhpc3RzKCdkaXN0JywgL3J1bnRpbWVcXC5bMC05YS1mXXsyMH1cXC5qcy8pKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChob3N0LmZpbGVNYXRjaEV4aXN0cygnZGlzdCcsIC9tYWluXFwuWzAtOWEtZl17MjB9XFwuanMvKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoaG9zdC5maWxlTWF0Y2hFeGlzdHMoJ2Rpc3QnLCAvcG9seWZpbGxzXFwuWzAtOWEtZl17MjB9XFwuanMvKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoaG9zdC5maWxlTWF0Y2hFeGlzdHMoJ2Rpc3QnLCAvdmVuZG9yXFwuWzAtOWEtZl17MjB9XFwuanMvKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoaG9zdC5maWxlTWF0Y2hFeGlzdHMoJ2Rpc3QnLCAvc3R5bGVzXFwuWzAtOWEtZl17MjB9XFwuY3NzLykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgZXhwZWN0KGhvc3QuZmlsZU1hdGNoRXhpc3RzKCdkaXN0JywgL3NwZWN0cnVtXFwuWzAtOWEtZl17MjB9XFwucG5nLykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIH0pLFxuICAgICAgLy8gJ25vbmUnIHNob3VsZCBoYXNoIG5vdGhpbmcuXG4gICAgICBjb25jYXRNYXAoKCkgPT4gcnVuVGFyZ2V0U3BlYyhob3N0LCBicm93c2VyVGFyZ2V0U3BlYyxcbiAgICAgICAgeyBvdXRwdXRIYXNoaW5nOiAnbm9uZScsIGV4dHJhY3RDc3M6IHRydWUgfSkpLFxuICAgICAgdGFwKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KGhvc3QuZmlsZU1hdGNoRXhpc3RzKCdkaXN0JywgL3J1bnRpbWVcXC5bMC05YS1mXXsyMH1cXC5qcy8pKS50b0JlRmFsc3koKTtcbiAgICAgICAgZXhwZWN0KGhvc3QuZmlsZU1hdGNoRXhpc3RzKCdkaXN0JywgL21haW5cXC5bMC05YS1mXXsyMH1cXC5qcy8pKS50b0JlRmFsc3koKTtcbiAgICAgICAgZXhwZWN0KGhvc3QuZmlsZU1hdGNoRXhpc3RzKCdkaXN0JywgL3BvbHlmaWxsc1xcLlswLTlhLWZdezIwfVxcLmpzLykpLnRvQmVGYWxzeSgpO1xuICAgICAgICBleHBlY3QoaG9zdC5maWxlTWF0Y2hFeGlzdHMoJ2Rpc3QnLCAvdmVuZG9yXFwuWzAtOWEtZl17MjB9XFwuanMvKSkudG9CZUZhbHN5KCk7XG4gICAgICAgIGV4cGVjdChob3N0LmZpbGVNYXRjaEV4aXN0cygnZGlzdCcsIC9zdHlsZXNcXC5bMC05YS1mXXsyMH1cXC5jc3MvKSkudG9CZUZhbHN5KCk7XG4gICAgICAgIGV4cGVjdChob3N0LmZpbGVNYXRjaEV4aXN0cygnZGlzdCcsIC9zcGVjdHJ1bVxcLlswLTlhLWZdezIwfVxcLnBuZy8pKS50b0JlRmFsc3koKTtcbiAgICAgIH0pLFxuICAgICAgLy8gJ21lZGlhJyBzaG91bGQgaGFzaCBjc3MgcmVzb3VyY2VzIG9ubHkuXG4gICAgICBjb25jYXRNYXAoKCkgPT4gcnVuVGFyZ2V0U3BlYyhob3N0LCBicm93c2VyVGFyZ2V0U3BlYyxcbiAgICAgICAgeyBvdXRwdXRIYXNoaW5nOiAnbWVkaWEnLCBleHRyYWN0Q3NzOiB0cnVlIH0pKSxcbiAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgIGV4cGVjdChob3N0LmZpbGVNYXRjaEV4aXN0cygnZGlzdCcsIC9ydW50aW1lXFwuWzAtOWEtZl17MjB9XFwuanMvKSkudG9CZUZhbHN5KCk7XG4gICAgICAgIGV4cGVjdChob3N0LmZpbGVNYXRjaEV4aXN0cygnZGlzdCcsIC9tYWluXFwuWzAtOWEtZl17MjB9XFwuanMvKSkudG9CZUZhbHN5KCk7XG4gICAgICAgIGV4cGVjdChob3N0LmZpbGVNYXRjaEV4aXN0cygnZGlzdCcsIC9wb2x5ZmlsbHNcXC5bMC05YS1mXXsyMH1cXC5qcy8pKS50b0JlRmFsc3koKTtcbiAgICAgICAgZXhwZWN0KGhvc3QuZmlsZU1hdGNoRXhpc3RzKCdkaXN0JywgL3ZlbmRvclxcLlswLTlhLWZdezIwfVxcLmpzLykpLnRvQmVGYWxzeSgpO1xuICAgICAgICBleHBlY3QoaG9zdC5maWxlTWF0Y2hFeGlzdHMoJ2Rpc3QnLCAvc3R5bGVzXFwuWzAtOWEtZl17MjB9XFwuY3NzLykpLnRvQmVGYWxzeSgpO1xuICAgICAgICBleHBlY3QoaG9zdC5maWxlTWF0Y2hFeGlzdHMoJ2Rpc3QnLCAvc3BlY3RydW1cXC5bMC05YS1mXXsyMH1cXC5wbmcvKSkudG9CZVRydXRoeSgpO1xuICAgICAgfSksXG4gICAgICAvLyAnYnVuZGxlcycgc2hvdWxkIGhhc2ggYnVuZGxlcyBvbmx5LlxuICAgICAgY29uY2F0TWFwKCgpID0+IHJ1blRhcmdldFNwZWMoaG9zdCwgYnJvd3NlclRhcmdldFNwZWMsXG4gICAgICAgIHsgb3V0cHV0SGFzaGluZzogJ2J1bmRsZXMnLCBleHRyYWN0Q3NzOiB0cnVlIH0pKSxcbiAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgIGV4cGVjdChob3N0LmZpbGVNYXRjaEV4aXN0cygnZGlzdCcsIC9ydW50aW1lXFwuWzAtOWEtZl17MjB9XFwuanMvKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoaG9zdC5maWxlTWF0Y2hFeGlzdHMoJ2Rpc3QnLCAvbWFpblxcLlswLTlhLWZdezIwfVxcLmpzLykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgZXhwZWN0KGhvc3QuZmlsZU1hdGNoRXhpc3RzKCdkaXN0JywgL3BvbHlmaWxsc1xcLlswLTlhLWZdezIwfVxcLmpzLykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgZXhwZWN0KGhvc3QuZmlsZU1hdGNoRXhpc3RzKCdkaXN0JywgL3ZlbmRvclxcLlswLTlhLWZdezIwfVxcLmpzLykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgZXhwZWN0KGhvc3QuZmlsZU1hdGNoRXhpc3RzKCdkaXN0JywgL3N0eWxlc1xcLlswLTlhLWZdezIwfVxcLmNzcy8pKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChob3N0LmZpbGVNYXRjaEV4aXN0cygnZGlzdCcsIC9zcGVjdHJ1bVxcLlswLTlhLWZdezIwfVxcLnBuZy8pKS50b0JlRmFsc3koKTtcbiAgICAgIH0pLFxuICAgICkudG9Qcm9taXNlKCkudGhlbihkb25lLCBkb25lLmZhaWwpO1xuICB9KTtcblxuICBpdCgnZG9lcyBub3QgaGFzaCBsYXp5IHN0eWxlcycsIChkb25lKSA9PiB7XG4gICAgY29uc3Qgb3ZlcnJpZGVzID0ge1xuICAgICAgb3V0cHV0SGFzaGluZzogJ2FsbCcsXG4gICAgICBleHRyYWN0Q3NzOiB0cnVlLFxuICAgICAgc3R5bGVzOiBbeyBpbnB1dDogJ3NyYy9zdHlsZXMuY3NzJywgbGF6eTogdHJ1ZSB9XSxcbiAgICB9O1xuXG4gICAgcnVuVGFyZ2V0U3BlYyhob3N0LCBicm93c2VyVGFyZ2V0U3BlYywgb3ZlcnJpZGVzLCBEZWZhdWx0VGltZW91dCkucGlwZShcbiAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgIGV4cGVjdChob3N0LmZpbGVNYXRjaEV4aXN0cygnZGlzdCcsIC9zdHlsZXNcXC5bMC05YS1mXXsyMH1cXC5qcy8pKS50b0JlRmFsc3koKTtcbiAgICAgICAgZXhwZWN0KGhvc3QuZmlsZU1hdGNoRXhpc3RzKCdkaXN0JywgL3N0eWxlc1xcLlswLTlhLWZdezIwfVxcLmpzLm1hcC8pKS50b0JlRmFsc3koKTtcbiAgICAgICAgZXhwZWN0KGhvc3Quc2NvcGVkU3luYygpLmV4aXN0cyhub3JtYWxpemUoJ2Rpc3Qvc3R5bGVzLmNzcycpKSkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KGhvc3Quc2NvcGVkU3luYygpLmV4aXN0cyhub3JtYWxpemUoJ2Rpc3Qvc3R5bGVzLmNzcy5tYXAnKSkpLnRvQmUodHJ1ZSk7XG4gICAgICB9KSxcbiAgICApLnRvUHJvbWlzZSgpLnRoZW4oZG9uZSwgZG9uZS5mYWlsKTtcbiAgfSk7XG59KTtcbiJdfQ==