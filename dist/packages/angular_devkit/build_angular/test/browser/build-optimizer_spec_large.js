"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/architect/testing");
const core_1 = require("@angular-devkit/core");
const operators_1 = require("rxjs/operators");
const utils_1 = require("../utils");
describe('Browser Builder build optimizer', () => {
    const outputPath = core_1.normalize('dist');
    const fileName = core_1.join(outputPath, 'main.js');
    beforeEach(done => utils_1.host.initialize().toPromise().then(done, done.fail));
    afterEach(done => utils_1.host.restore().toPromise().then(done, done.fail));
    it('works', (done) => {
        const overrides = { aot: true, buildOptimizer: true };
        testing_1.runTargetSpec(utils_1.host, utils_1.browserTargetSpec, overrides).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true)), operators_1.tap(() => {
            const content = core_1.virtualFs.fileBufferToString(utils_1.host.scopedSync().read(core_1.normalize(fileName)));
            expect(content).not.toMatch(/\.decorators =/);
        })).toPromise().then(done, done.fail);
    });
    it('fails if AOT is disabled', (done) => {
        const overrides = { aot: false, buildOptimizer: true };
        testing_1.runTargetSpec(utils_1.host, utils_1.browserTargetSpec, overrides)
            .toPromise().then(() => done.fail(), () => done());
    });
    it('reduces bundle size', (done) => {
        const noBoOverrides = { aot: true, optimization: true, vendorChunk: false };
        const boOverrides = Object.assign({}, noBoOverrides, { buildOptimizer: true });
        let noBoSize;
        let boSize;
        testing_1.runTargetSpec(utils_1.host, utils_1.browserTargetSpec, noBoOverrides, testing_1.DefaultTimeout * 3).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true)), operators_1.tap(() => {
            const noBoStats = utils_1.host.scopedSync().stat(core_1.normalize(fileName));
            if (!noBoStats) {
                throw new Error('Main file has no stats');
            }
            noBoSize = noBoStats.size;
        }), operators_1.concatMap(() => testing_1.runTargetSpec(utils_1.host, utils_1.browserTargetSpec, boOverrides, testing_1.DefaultTimeout * 3)), operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true)), operators_1.tap(() => {
            const boStats = utils_1.host.scopedSync().stat(core_1.normalize(fileName));
            if (!boStats) {
                throw new Error('Main file has no stats');
            }
            boSize = boStats.size;
        }), operators_1.tap(() => {
            const sizeDiff = Math.round(((boSize - noBoSize) / noBoSize) * 10000) / 100;
            if (sizeDiff > -1 && sizeDiff < 0) {
                throw new Error('Total size difference is too small, '
                    + 'build optimizer does not seem to have made any optimizations.');
            }
            if (sizeDiff > 1) {
                throw new Error('Total size difference is positive, '
                    + 'build optimizer made the bundle bigger.');
            }
        })).toPromise().then(done, done.fail);
    });
});
//# sourceMappingURL=data:application/json;base64,