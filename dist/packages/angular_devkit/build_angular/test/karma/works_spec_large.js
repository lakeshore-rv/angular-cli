"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/architect/testing");
const operators_1 = require("rxjs/operators");
const utils_1 = require("../utils");
// TODO: replace this with an "it()" macro that's reusable globally.
let linuxOnlyIt = it;
if (process.platform.startsWith('win')) {
    linuxOnlyIt = xit;
}
describe('Karma Builder', () => {
    beforeEach(done => utils_1.host.initialize().toPromise().then(done, done.fail));
    afterEach(done => utils_1.host.restore().toPromise().then(done, done.fail));
    it('runs', (done) => {
        testing_1.runTargetSpec(utils_1.host, utils_1.karmaTargetSpec).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true))).toPromise().then(done, done.fail);
    }, 30000);
    // This test seems to succeed on appveyor but not terminate Karma, leaving the port used
    // and killing Chrome after 60s. This causes other tests that use Chrome to fail.
    linuxOnlyIt('fails with broken compilation', (done) => {
        utils_1.host.writeMultipleFiles({
            'src/app/app.component.spec.ts': '<p> definitely not typescript </p>',
        });
        testing_1.runTargetSpec(utils_1.host, utils_1.karmaTargetSpec).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(false))).toPromise().then(done, done.fail);
    }, 30000);
    it('supports ES2015 target', (done) => {
        utils_1.host.replaceInFile('tsconfig.json', '"target": "es5"', '"target": "es2015"');
        testing_1.runTargetSpec(utils_1.host, utils_1.karmaTargetSpec).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true))).toPromise().then(done, done.fail);
    }, 30000);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya3Nfc3BlY19sYXJnZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZXJuaWVkYXZpcy9Db2RlL2FuZ3VsYXItY2xpLyIsInNvdXJjZXMiOlsicGFja2FnZXMvYW5ndWxhcl9kZXZraXQvYnVpbGRfYW5ndWxhci90ZXN0L2thcm1hL3dvcmtzX3NwZWNfbGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7QUFFSCwrREFBa0U7QUFDbEUsOENBQXFDO0FBQ3JDLG9DQUFpRDtBQUdqRCxvRUFBb0U7QUFDcEUsSUFBSSxXQUFXLEdBQWMsRUFBRSxDQUFDO0FBQ2hDLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7SUFDdEMsV0FBVyxHQUFHLEdBQUcsQ0FBQztDQUNuQjtBQUVELFFBQVEsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO0lBQzdCLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRXBFLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNsQix1QkFBYSxDQUFDLFlBQUksRUFBRSx1QkFBZSxDQUFDLENBQUMsSUFBSSxDQUN2QyxlQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQzNELENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRVYsd0ZBQXdGO0lBQ3hGLGlGQUFpRjtJQUNqRixXQUFXLENBQUMsK0JBQStCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNwRCxZQUFJLENBQUMsa0JBQWtCLENBQUM7WUFDdEIsK0JBQStCLEVBQUUsb0NBQW9DO1NBQ3RFLENBQUMsQ0FBQztRQUNILHVCQUFhLENBQUMsWUFBSSxFQUFFLHVCQUFlLENBQUMsQ0FBQyxJQUFJLENBQ3ZDLGVBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDNUQsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFVixFQUFFLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNwQyxZQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQzdFLHVCQUFhLENBQUMsWUFBSSxFQUFFLHVCQUFlLENBQUMsQ0FBQyxJQUFJLENBQ3ZDLGVBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FDM0QsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDWixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHsgcnVuVGFyZ2V0U3BlYyB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9hcmNoaXRlY3QvdGVzdGluZyc7XG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBob3N0LCBrYXJtYVRhcmdldFNwZWMgfSBmcm9tICcuLi91dGlscyc7XG5cblxuLy8gVE9ETzogcmVwbGFjZSB0aGlzIHdpdGggYW4gXCJpdCgpXCIgbWFjcm8gdGhhdCdzIHJldXNhYmxlIGdsb2JhbGx5LlxubGV0IGxpbnV4T25seUl0OiB0eXBlb2YgaXQgPSBpdDtcbmlmIChwcm9jZXNzLnBsYXRmb3JtLnN0YXJ0c1dpdGgoJ3dpbicpKSB7XG4gIGxpbnV4T25seUl0ID0geGl0O1xufVxuXG5kZXNjcmliZSgnS2FybWEgQnVpbGRlcicsICgpID0+IHtcbiAgYmVmb3JlRWFjaChkb25lID0+IGhvc3QuaW5pdGlhbGl6ZSgpLnRvUHJvbWlzZSgpLnRoZW4oZG9uZSwgZG9uZS5mYWlsKSk7XG4gIGFmdGVyRWFjaChkb25lID0+IGhvc3QucmVzdG9yZSgpLnRvUHJvbWlzZSgpLnRoZW4oZG9uZSwgZG9uZS5mYWlsKSk7XG5cbiAgaXQoJ3J1bnMnLCAoZG9uZSkgPT4ge1xuICAgIHJ1blRhcmdldFNwZWMoaG9zdCwga2FybWFUYXJnZXRTcGVjKS5waXBlKFxuICAgICAgdGFwKChidWlsZEV2ZW50KSA9PiBleHBlY3QoYnVpbGRFdmVudC5zdWNjZXNzKS50b0JlKHRydWUpKSxcbiAgICApLnRvUHJvbWlzZSgpLnRoZW4oZG9uZSwgZG9uZS5mYWlsKTtcbiAgfSwgMzAwMDApO1xuXG4gIC8vIFRoaXMgdGVzdCBzZWVtcyB0byBzdWNjZWVkIG9uIGFwcHZleW9yIGJ1dCBub3QgdGVybWluYXRlIEthcm1hLCBsZWF2aW5nIHRoZSBwb3J0IHVzZWRcbiAgLy8gYW5kIGtpbGxpbmcgQ2hyb21lIGFmdGVyIDYwcy4gVGhpcyBjYXVzZXMgb3RoZXIgdGVzdHMgdGhhdCB1c2UgQ2hyb21lIHRvIGZhaWwuXG4gIGxpbnV4T25seUl0KCdmYWlscyB3aXRoIGJyb2tlbiBjb21waWxhdGlvbicsIChkb25lKSA9PiB7XG4gICAgaG9zdC53cml0ZU11bHRpcGxlRmlsZXMoe1xuICAgICAgJ3NyYy9hcHAvYXBwLmNvbXBvbmVudC5zcGVjLnRzJzogJzxwPiBkZWZpbml0ZWx5IG5vdCB0eXBlc2NyaXB0IDwvcD4nLFxuICAgIH0pO1xuICAgIHJ1blRhcmdldFNwZWMoaG9zdCwga2FybWFUYXJnZXRTcGVjKS5waXBlKFxuICAgICAgdGFwKChidWlsZEV2ZW50KSA9PiBleHBlY3QoYnVpbGRFdmVudC5zdWNjZXNzKS50b0JlKGZhbHNlKSksXG4gICAgKS50b1Byb21pc2UoKS50aGVuKGRvbmUsIGRvbmUuZmFpbCk7XG4gIH0sIDMwMDAwKTtcblxuICBpdCgnc3VwcG9ydHMgRVMyMDE1IHRhcmdldCcsIChkb25lKSA9PiB7XG4gICAgaG9zdC5yZXBsYWNlSW5GaWxlKCd0c2NvbmZpZy5qc29uJywgJ1widGFyZ2V0XCI6IFwiZXM1XCInLCAnXCJ0YXJnZXRcIjogXCJlczIwMTVcIicpO1xuICAgIHJ1blRhcmdldFNwZWMoaG9zdCwga2FybWFUYXJnZXRTcGVjKS5waXBlKFxuICAgICAgdGFwKChidWlsZEV2ZW50KSA9PiBleHBlY3QoYnVpbGRFdmVudC5zdWNjZXNzKS50b0JlKHRydWUpKSxcbiAgICApLnRvUHJvbWlzZSgpLnRoZW4oZG9uZSwgZG9uZS5mYWlsKTtcbiAgfSwgMzAwMDApO1xufSk7XG4iXX0=