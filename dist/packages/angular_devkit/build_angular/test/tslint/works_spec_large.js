"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/architect/testing");
const core_1 = require("@angular-devkit/core");
const operators_1 = require("rxjs/operators");
const utils_1 = require("../utils");
describe('Tslint Target', () => {
    const filesWithErrors = { 'src/foo.ts': 'const foo = "";\n' };
    beforeEach(done => utils_1.host.initialize().toPromise().then(done, done.fail));
    afterEach(done => utils_1.host.restore().toPromise().then(done, done.fail));
    it('works', (done) => {
        testing_1.runTargetSpec(utils_1.host, utils_1.tslintTargetSpec).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true))).toPromise().then(done, done.fail);
    }, 30000);
    it('should report lint error once', (done) => {
        utils_1.host.writeMultipleFiles({ 'src/app/app.component.ts': 'const foo = "";\n' });
        const logger = new testing_1.TestLogger('lint-error');
        testing_1.runTargetSpec(utils_1.host, utils_1.tslintTargetSpec, undefined, testing_1.DefaultTimeout, logger).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(false)), operators_1.tap(() => {
            // this is to make sure there are no duplicates
            expect(logger.includes(`" should be \'\nERROR`)).toBe(false);
            expect(logger.includes(`" should be '`)).toBe(true);
            expect(logger.includes(`Lint errors found in the listed files`)).toBe(true);
        })).toPromise().then(done, done.fail);
    }, 30000);
    it('supports exclude', (done) => {
        utils_1.host.writeMultipleFiles(filesWithErrors);
        const overrides = { exclude: ['**/foo.ts'] };
        testing_1.runTargetSpec(utils_1.host, utils_1.tslintTargetSpec, overrides).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true))).toPromise().then(done, done.fail);
    }, 30000);
    it('supports fix', (done) => {
        utils_1.host.writeMultipleFiles(filesWithErrors);
        const overrides = { fix: true };
        testing_1.runTargetSpec(utils_1.host, utils_1.tslintTargetSpec, overrides).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true)), operators_1.tap(() => {
            const fileName = core_1.normalize('src/foo.ts');
            const content = core_1.virtualFs.fileBufferToString(utils_1.host.scopedSync().read(fileName));
            expect(content).toContain(`const foo = '';`);
        })).toPromise().then(done, done.fail);
    }, 30000);
    it('supports force', (done) => {
        utils_1.host.writeMultipleFiles(filesWithErrors);
        const logger = new testing_1.TestLogger('lint-force');
        const overrides = { force: true };
        testing_1.runTargetSpec(utils_1.host, utils_1.tslintTargetSpec, overrides, testing_1.DefaultTimeout, logger).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true)), operators_1.tap(() => {
            expect(logger.includes(`" should be '`)).toBe(true);
            expect(logger.includes(`Lint errors found in the listed files`)).toBe(true);
        })).toPromise().then(done, done.fail);
    }, 30000);
    it('supports format', (done) => {
        utils_1.host.writeMultipleFiles(filesWithErrors);
        const logger = new testing_1.TestLogger('lint-format');
        const overrides = { format: 'stylish' };
        testing_1.runTargetSpec(utils_1.host, utils_1.tslintTargetSpec, overrides, testing_1.DefaultTimeout, logger).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(false)), operators_1.tap(() => {
            expect(logger.includes(`quotemark`)).toBe(true);
        })).toPromise().then(done, done.fail);
    }, 30000);
    it('supports finding configs', (done) => {
        utils_1.host.writeMultipleFiles({
            'src/app/foo/foo.ts': `const foo = '';\n`,
            'src/app/foo/tslint.json': `
        {
          "rules": {
            "quotemark": [
              true,
              "double"
            ]
          }
        }
      `,
        });
        const overrides = { tslintConfig: undefined };
        testing_1.runTargetSpec(utils_1.host, utils_1.tslintTargetSpec, overrides).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(false))).toPromise().then(done, done.fail);
    }, 30000);
    it('supports overriding configs', (done) => {
        utils_1.host.writeMultipleFiles({
            'src/app/foo/foo.ts': `const foo = '';\n`,
            'src/app/foo/tslint.json': `
        {
          "rules": {
            "quotemark": [
              true,
              "double"
            ]
          }
        }
      `,
        });
        const overrides = { tslintConfig: 'tslint.json' };
        testing_1.runTargetSpec(utils_1.host, utils_1.tslintTargetSpec, overrides).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true))).toPromise().then(done, done.fail);
    }, 30000);
    it('supports using files with no project', (done) => {
        const overrides = {
            tsConfig: undefined,
            files: ['src/app/**/*.ts'],
        };
        testing_1.runTargetSpec(utils_1.host, utils_1.tslintTargetSpec, overrides).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true))).toPromise().then(done, done.fail);
    }, 30000);
    it('supports using one project as a string', (done) => {
        const overrides = {
            tsConfig: 'src/tsconfig.app.json',
        };
        testing_1.runTargetSpec(utils_1.host, utils_1.tslintTargetSpec, overrides).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true))).toPromise().then(done, done.fail);
    }, 30000);
    it('supports using one project as an array', (done) => {
        const overrides = {
            tsConfig: ['src/tsconfig.app.json'],
        };
        testing_1.runTargetSpec(utils_1.host, utils_1.tslintTargetSpec, overrides).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true))).toPromise().then(done, done.fail);
    }, 30000);
    it('supports using two projects', (done) => {
        const overrides = {
            tsConfig: ['src/tsconfig.app.json', 'src/tsconfig.spec.json'],
        };
        testing_1.runTargetSpec(utils_1.host, utils_1.tslintTargetSpec, overrides).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true))).toPromise().then(done, done.fail);
    }, 30000);
    it('errors when type checking is used without a project', (done) => {
        const overrides = {
            tsConfig: undefined,
            typeCheck: true,
        };
        testing_1.runTargetSpec(utils_1.host, utils_1.tslintTargetSpec, overrides)
            .subscribe(undefined, () => done(), done.fail);
    }, 30000);
});
//# sourceMappingURL=data:application/json;base64,